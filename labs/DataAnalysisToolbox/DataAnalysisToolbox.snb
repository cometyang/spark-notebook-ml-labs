{
  "metadata" : {
    "name" : "DataAnalysisToolbox",
    "user_save_timestamp" : "1970-01-01T03:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T03:00:00.000Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "customLocalRepo" : null,
    "customRepos" : null,
    "customDeps" : [ "com.databricks:spark-csv_2.10:1.4.0" ],
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : null
  },
  "cells" : [ {
    "metadata" : {
      "id" : "95D05E6947F345E89118DB4D3FFFA6B7"
    },
    "cell_type" : "markdown",
    "source" : "## Data Analysis Toolbox"
  }, {
    "metadata" : {
      "id" : "EB9614E2CD184E678F6BC1B93365EF96"
    },
    "cell_type" : "markdown",
    "source" : "In this lab we are going to get familiar with **Breeze** numerical processing library, **Bokeh** plotting library, Spark **RDD** (resilient distributed datasets) and Spark **DataFrames** (distributed collections of data organized into named columns) in a way of offering little challenges and solving them."
  }, {
    "metadata" : {
      "id" : "51F8A0B8B4CD4E428971A244E456E37B"
    },
    "cell_type" : "markdown",
    "source" : "### Breeze"
  }, {
    "metadata" : {
      "id" : "495A983C298B4D4E835A8D1BA7951D40"
    },
    "cell_type" : "markdown",
    "source" : "[Quick start tutorial](https://github.com/scalanlp/breeze/wiki/Quickstart)"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9A1F20BEE5614F5288F63802F1C959D9"
    },
    "cell_type" : "code",
    "source" : "import breeze.linalg._\nimport breeze.stats.{mean, stddev}\nimport breeze.stats.distributions._",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import breeze.linalg._\nimport breeze.stats.{mean, stddev}\nimport breeze.stats.distributions._\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 3
    } ]
  }, {
    "metadata" : {
      "id" : "DFBA1EA8C73C462B8D8A75B8DF86A8E5"
    },
    "cell_type" : "markdown",
    "source" : "** Problem 1.** Implement a method that takes Matrix X and two sequences ii and jj of equal size as an input and produces breeze.linalg.DenseVector[Double] of elements [X[ii[0], jj[0]], X[ii[1], jj[1]], ..., X[ii[N-1], jj[N-1]]]."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "D02A774908504FD68919A102A39E9A1B"
    },
    "cell_type" : "code",
    "source" : "def constructVector(X: Matrix[Double], ii: Seq[Int], jj: Seq[Int]): DenseVector[Double] = ???",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "constructVector: (X: breeze.linalg.Matrix[Double], ii: Seq[Int], jj: Seq[Int])breeze.linalg.DenseVector[Double]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 4
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "A57CE7E24EF64E79BF84E5E8B4305A5B"
    },
    "cell_type" : "code",
    "source" : "// solution for problem 1\ndef constructVector(X: Matrix[Double], ii: Seq[Int], jj: Seq[Int]): DenseVector[Double] =\n  DenseVector(ii.zip(jj).map(ix => X(ix._1, ix._2)).toArray)\n\nconstructVector(DenseMatrix((1.0,2.0,3.0), \n                            (4.0,5.0,6.0), \n                            (7.0, 8.0, 9.0)), \n                List(0, 1, 2), List(0, 1, 2))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "constructVector: (X: breeze.linalg.Matrix[Double], ii: Seq[Int], jj: Seq[Int])breeze.linalg.DenseVector[Double]\nres7: breeze.linalg.DenseVector[Double] = DenseVector(1.0, 5.0, 9.0)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "DenseVector(1.0, 5.0, 9.0)"
      },
      "output_type" : "execute_result",
      "execution_count" : 5
    } ]
  }, {
    "metadata" : {
      "id" : "D8CA43DDDF6B40FF90E502D3E8AF8853"
    },
    "cell_type" : "markdown",
    "source" : "** Problem 2. ** Write a method to calculate the product of nonzero elements on the diagonal of a rectangular matrix. For example, for X = Matrix((1.0, 0.0, 1.0), (2.0, 0.0, 2.0), (3.0, 0.0, 3.0), (4.0, 4.0, 4.0)) the answer is Some(3). If there are no nonzero elements, the method should return None."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B3D4225AFB974919A498F73F1261CDB2"
    },
    "cell_type" : "code",
    "source" : "def nonzeroProduct(X: Matrix[Double]): Option[Double] = ???",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "nonzeroProduct: (X: breeze.linalg.Matrix[Double])Option[Double]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 6
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "446C8EF7D64F4D39830B992B5C71E7AF"
    },
    "cell_type" : "code",
    "source" : "// solution for problem 2\ndef nonzeroProduct(X: Matrix[Double]): Option[Double] =\n  (0 until min(X.rows, X.cols)).map(i => X(i, i)).filter(_ != 0) match {\n  case Seq() => None\n  case xs => Some(xs.reduce(_ * _))\n}\n\nnonzeroProduct(Matrix((1.0, 0.0, 1.0), (2.0, 0.0, 2.0), (3.0, 0.0, 3.0), (4.0, 4.0, 4.0)))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "nonzeroProduct: (X: breeze.linalg.Matrix[Double])Option[Double]\nres10: Option[Double] = Some(3.0)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "Some(3.0)"
      },
      "output_type" : "execute_result",
      "execution_count" : 7
    } ]
  }, {
    "metadata" : {
      "id" : "923401B0BDF545A79CD054DD311A085A"
    },
    "cell_type" : "markdown",
    "source" : "** Problem 3. ** Write a method to find the maximum element of the vector with the preceding zero element. For example, for Vector(6, 2, 0, 3, 0, 0, 5, 7, 0) the answer is Some(5). If there are no such an elements, the method should return None."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "EA7AF589BB6647C9B5E822642FEED048"
    },
    "cell_type" : "code",
    "source" : "def maxAfterZeroElement(vec: Vector[Double]): Option[Double] = ???",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "maxAfterZeroElement: (vec: breeze.linalg.Vector[Double])Option[Double]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 8
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "A69FB921286E41FCA109F75D9B698A9F"
    },
    "cell_type" : "code",
    "source" : "def maxAfterZeroElement(vec: Vector[Double]): Option[Double] =\n  vec.toArray.foldLeft((None, false): (Option[Double], Boolean))(\n    (prev: (Option[Double], Boolean), el: Double) =>\n    if (el == 0) {\n      (prev._1, true)\n    } else {\n      prev match {\n        case (p, false) => (p, false)\n        case (None, true) => (Some(el), false)\n        case (Some(m), true) => ({if (el > m) Some(el) else Some(m)}, false)\n      }\n    }\n  )._1",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "maxAfterZeroElement: (vec: breeze.linalg.Vector[Double])Option[Double]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 9
    } ]
  }, {
    "metadata" : {
      "id" : "5FD54847415148EC872CDB23065D42A0"
    },
    "cell_type" : "markdown",
    "source" : "** Problem 4. ** Write a method that takes Matrix X and some number Double v and returns closest matrix element to given number v. For example: for X = new DenseMatrix(2, 5, DenseVector.range(0, 10).mapValues(_.toDouble).toArray) and v = 3.6 the answer would be 4.0."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "2BEAC9974E47494086A3DFB018508CC2"
    },
    "cell_type" : "code",
    "source" : "def closestValue(X: DenseMatrix[Double], v: Double): Double = ???",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "closestValue: (X: breeze.linalg.DenseMatrix[Double], v: Double)Double\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 10
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "0F75F38E392944A99C10DF4C2826140D"
    },
    "cell_type" : "code",
    "source" : "// Solution for problem 4\nimport scala.math.abs\n\ndef closestValue(X: DenseMatrix[Double], v: Double): Double =\n  X(argmin(X.map(e => abs(e - v))))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import scala.math.abs\nclosestValue: (X: breeze.linalg.DenseMatrix[Double], v: Double)Double\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 11
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "2187AA8E3A4542A19A8728D6D6F7761A"
    },
    "cell_type" : "code",
    "source" : "// Another solution for problem 4\nimport breeze.numerics.abs\n\ndef closestValue(X: DenseMatrix[Double], v: Double): Double =\n  X(argmin(abs(X - v)))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import breeze.numerics.abs\nclosestValue: (X: breeze.linalg.DenseMatrix[Double], v: Double)Double\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 12
    } ]
  }, {
    "metadata" : {
      "id" : "B8D5C66ED4EB48859128CDCF17BAC141"
    },
    "cell_type" : "markdown",
    "source" : "** Problem 5. ** Write a method that takes Matrix X and scales each column of this matrix by subtracting mean value and dividing by standard deviation of the column. For testing one can generate random matrix. Avoid division by zero."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "5D942106942C459E850AD8126B2CE709"
    },
    "cell_type" : "code",
    "source" : "def scale(X: DenseMatrix[Double]): Unit = ???",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "scale: (X: breeze.linalg.DenseMatrix[Double])Unit\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 13
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "16F51358CEB846309D858984F38CB4D8"
    },
    "cell_type" : "code",
    "source" : "// Solution for problem 5\ndef scale(X: DenseMatrix[Double]): Unit = {\n  val mm = mean(X(::, *))    // using broadcasting\n  val std = stddev(X(::, *)) // https://github.com/scalanlp/breeze/wiki/Quickstart#broadcasting\n  (0 until X.cols).foreach{i =>\n    if (std(0, i) == 0.0) {\n      X(::, i) := 0.0\n    } else {\n      X(::, i) := (X(::, i) - mm(0, i)) :/ std(0, i)\n    }\n  }\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "scale: (X: breeze.linalg.DenseMatrix[Double])Unit\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 14
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "26EBF924AEC34E28809536FAD8F74D6F"
    },
    "cell_type" : "code",
    "source" : "// Another solution for problem 5\ndef scale(X: DenseMatrix[Double]): Unit =\n  (0 until X.cols).map{i =>\n    val col = X(::, i)\n    val std = stddev(col)\n    if (std != 0.0) {\n      X(::, i) := (col - mean(col)) / std\n    } else {\n      X(::, i) := DenseVector.zeros[Double](col.size)\n    }\n  }",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "scale: (X: breeze.linalg.DenseMatrix[Double])Unit\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 15
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab301562629-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "4E50151E12884DE88DCACA72B0CD50D7"
    },
    "cell_type" : "code",
    "source" : "// Let's test our scale method on random data\nval nd = new Gaussian(12, 20)\nval m = DenseMatrix.rand(10, 3, nd)\nprintln(m)\nprintln(\"============\")\nscale(m)\nprintln(m)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "9.599506781392831    6.280671248216523   12.141589175070516   \n-3.713928009461444   32.53175969149672   20.37041735720641    \n-6.37116557570188    8.729748313197284   24.311202742779223   \n19.272868368538294   16.637351959919265  32.0862050106171     \n-14.019174183428923  13.086085176608107  37.562514600512046   \n-21.484110101685346  21.52719509908875   43.5983300309783     \n49.352531591612276   -15.8565753173608   6.317005783722339    \n6.358639793708001    16.3610832360443    3.306376163443886    \n20.912225346732754   23.077536365965933  -6.041257533715417   \n-13.75438580987926   8.978062171863545   -6.3994462759691615  \n============\n0.23450414395858352  -0.532311597642218      -0.25869080454552734  \n-0.3918856266639191  1.5062781003182386      0.20572005980847605   \n-0.5169071899009476  -0.3421227875679812     0.42812639843158456   \n0.6896304761867651   0.27196067661266277     0.8669246627336226    \n-0.8767417805059219  -0.0038212550512221367  1.1759914719828948    \n-1.2279629019523943  0.6516928873243013      1.5166351455534963    \n2.104862055617098    -2.251431278614859      -0.5874131629914492   \n0.08202313804803585  0.25050638241922135     -0.7573242454999637   \n0.7667613186531317   0.7720882660457432      -1.2848772030871232   \n-0.8642836334404315  -0.32283939384388477    -1.305092322386012    \nnd: breeze.stats.distributions.Gaussian = Gaussian(12.0, 20.0)\nm: breeze.linalg.DenseMatrix[Double] = \n0.23450414395858352  -0.532311597642218      -0.25869080454552734  \n-0.3918856266639191  1.5062781003182386      0.20572005980847605   \n-0.5169071899009476  -0.3421227875679812     0.42812639843158456   \n0.6896304761867651   0.27196067661266277     0.8669246627336226    \n-0.8767417805059219  -0.0038212550512221367  1.1759914719828948    \n-1.2279629019523943  0.6516928873243013      1.5166351455534963    \n2.104862055617098    -2.251431278614859      -0.5874131629914492   \n0.08202313804803585  0.25050638241922135     -0.7573242454999637   \n0.7667613186531317   0.7720882660457432      -1.2848772030871232   \n-0.8642836334404315  -0.32283939384388477    -1.305092322386012    \n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 16
    } ]
  }, {
    "metadata" : {
      "id" : "C4A3752987EE46F18747BCB4C34A4022"
    },
    "cell_type" : "markdown",
    "source" : "** Problem 6. ** Implement a method that for given matrix X finds:\n* the determinant\n* the trace\n* max and min elements\n* Frobenius Norm\n* eigenvalues\n* inverse matrix\n\nFor testing one can generate random matrix from normal distribution $N(10, 1)$."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9BD53A5E493848E1BE168CD483002AE5"
    },
    "cell_type" : "code",
    "source" : "def getStats(X: Matrix[Double]): Unit = ???",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "getStats: (X: breeze.linalg.Matrix[Double])Unit\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 52
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "4DDB7D9BF36A482485E3C4E6B380C429"
    },
    "cell_type" : "code",
    "source" : "// Solution for problem 6\ndef getStats(X: DenseMatrix[Double]): String = {\n  val dt = det(X)\n  val tr = trace(X)\n  val minE = min(X)\n  val maxE = max(X)\n  val frob = breeze.linalg.norm(X.toDenseVector)\n  val ev = eig(X).eigenvalues\n  val invM = inv(X)\n  \n  s\"\"\"Stats:\n     |determinant: $dt\n     |trace: $tr\n     |min element: $minE\n     |max element: $maxE\n     |Frobenius Norm: $frob\n     |eigenvalues: $ev\n     |inverse matrix:\\n$invM\"\"\".stripMargin \n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "getStats: (X: breeze.linalg.DenseMatrix[Double])String\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 73
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : true,
      "id" : "D784DB3C1C244CCDA1E52E063A34A820"
    },
    "cell_type" : "code",
    "source" : "// Let's test our scale method on random data\nval nd = new Gaussian(10, 1)\nval X = DenseMatrix.rand(4, 4, nd)\nprintln(getSt)",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "79479A6475BF4C3C9BB94A4B2D9771AB"
    },
    "cell_type" : "code",
    "source" : "println(getStats(m))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "Stats:\ndeterminant: 41.914804106399906\ntrace: 43.936177320649236\nmin element: 9.379411225354211\nmax element: 17.84417407281853\nFrobenius Norm: 50.36703791447856\neigenvalues: DenseVector(49.37505011623383, 0.10136539178883221, -2.7701190936867084, -2.7701190936867084)\ninverse matrix:\n-1.1725459647041807  0.6830627423391604   2.2414570462016914  -2.2657582538777374  \n3.0557785743727672   -1.902917221227752   -6.572349828361608  7.0414687652697205   \n-3.5212460508532892  1.9719356315129852   7.81321734239318    -8.07016796535549    \n2.188068200764961    -1.0593598840811294  -4.567445239939355  4.486255732340604    \n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 74
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "A97F5563BE6843FAA042CBBF241E57A0"
    },
    "cell_type" : "code",
    "source" : "ev.eigenvalues",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res64: breeze.linalg.DenseVector[Double] = DenseVector(32.46424919657296, -2.46424919657298, -4.793153113860696E-16, 1.6818088025315485E-15)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "DenseVector(32.46424919657296, -2.46424919657298, -4.793153113860696E-16, 1.6818088025315485E-15)"
      },
      "output_type" : "execute_result",
      "execution_count" : 46
    } ]
  } ],
  "nbformat" : 4
}