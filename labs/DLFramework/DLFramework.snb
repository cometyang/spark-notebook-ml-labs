{
  "metadata" : {
    "id" : "ea6e0418-480d-4802-9895-1bb2505a26c7",
    "name" : "DLToyFramework",
    "user_save_timestamp" : "1970-01-01T03:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T03:00:00.000Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "sparkNotebook" : null,
    "customLocalRepo" : null,
    "customRepos" : null,
    "customDeps" : [ "org.bytedeco % javacpp % 1.3.2", "org.nd4j % nd4j-native-platform % 0.8.0", "org.nd4j %% nd4s % 0.8.0", "org.deeplearning4j % deeplearning4j-core % 0.8.0" ],
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : {
      "spark.app.name" : "Notebook",
      "spark.master" : "local[*]",
      "spark.executor.memory" : "1G"
    },
    "customVars" : null
  },
  "cells" : [ {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "A4067CCA55FB4DC69A025D7126F21D6D"
    },
    "cell_type" : "code",
    "source" : "import org.nd4j.linalg.factory.Nd4j\nimport org.nd4j.linalg.api.ndarray.INDArray\nimport org.nd4j.linalg.ops.transforms.Transforms\n\nimport org.nd4j.linalg.cpu.nativecpu.rng.CpuNativeRandom",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.nd4j.linalg.factory.Nd4j\nimport org.nd4j.linalg.api.ndarray.INDArray\nimport org.nd4j.linalg.ops.transforms.Transforms\nimport org.nd4j.linalg.cpu.nativecpu.rng.CpuNativeRandom\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 1,
      "time" : "Took: 1 second 678 milliseconds, at 2017-3-26 15:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "74E7992C196640C2831B9202DCA9DDF4"
    },
    "cell_type" : "code",
    "source" : "Nd4j.ones(2,3)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res3: org.nd4j.linalg.api.ndarray.INDArray = \n[[1.00, 1.00, 1.00],\n [1.00, 1.00, 1.00]]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "[[1.00, 1.00, 1.00],\n [1.00, 1.00, 1.00]]"
      },
      "output_type" : "execute_result",
      "execution_count" : 2,
      "time" : "Took: 1 second 987 milliseconds, at 2017-3-26 15:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "85797E2F81AB4BD58042C4F90E36F2B8"
    },
    "cell_type" : "code",
    "source" : "val rngSEED = 181\nval RNG = new CpuNativeRandom(rngSEED)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "rngSEED: Int = 181\nRNG: org.nd4j.linalg.cpu.nativecpu.rng.CpuNativeRandom = org.nd4j.linalg.cpu.nativecpu.rng.CpuNativeRandom@74ed427b\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 3,
      "time" : "Took: 1 second 89 milliseconds, at 2017-3-26 15:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "D14ECAF500734E6FB5AB8E3D5327D54A"
    },
    "cell_type" : "code",
    "source" : "import org.nd4s.Implicits._\n\ndef sigmoid(x: INDArray): INDArray = {\n  Transforms.pow(Transforms.exp(-x) + 1, -1)\n}\n \n\ndef sigmoidGrad(f: INDArray): INDArray = {\n  f * (-f + 1)\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.nd4s.Implicits._\nsigmoid: (x: org.nd4j.linalg.api.ndarray.INDArray)org.nd4j.linalg.api.ndarray.INDArray\nsigmoidGrad: (f: org.nd4j.linalg.api.ndarray.INDArray)org.nd4j.linalg.api.ndarray.INDArray\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 4,
      "time" : "Took: 1 second 655 milliseconds, at 2017-3-26 15:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "E3AAA615A8494AA2ABEE01384040B244"
    },
    "cell_type" : "code",
    "source" : "/*\n * Compute the softmax function for each row of the input x.\n */\ndef softmax(x: INDArray): INDArray = {\n  val exps = Transforms.exp(x.addColumnVector(-x.max(1)))\n  exps.divColumnVector(exps.sum(1))\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "softmax: (x: org.nd4j.linalg.api.ndarray.INDArray)org.nd4j.linalg.api.ndarray.INDArray\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 5,
      "time" : "Took: 703 milliseconds, at 2017-3-26 15:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B8C8D8BCDBA545BB959CE1B467CB2DE4"
    },
    "cell_type" : "code",
    "source" : "def sigmoidTest(): Unit = {\n  val x = Array(Array(1, 2), Array(-1, -2)).toNDArray\n  val f = sigmoid(x)\n  val g = sigmoidGrad(f)\n  val sigmoidVals = Array(Array(0.73105858, 0.88079708),\n                          Array(0.26894142, 0.11920292)).toNDArray\n  val gradVals = Array(Array(0.19661193, 0.10499359),\n                       Array(0.19661193, 0.10499359)).toNDArray\n  assert((f - Transforms.abs(sigmoidVals)).max(1) < 1e-6)\n  assert((g - Transforms.abs(gradVals)).max(1) < 1e-6)\n  println(\"sigmoid tests passed\")\n}\n\n\ndef softmaxTest(): Unit = {\n  val x = Array(Array(1001, 1002), \n                Array(3, 4)).toNDArray\n  val logits = softmax(x)\n  val expectedLogits = Array(Array(0.26894142, 0.73105858),\n                             Array(0.26894142, 0.73105858)).toNDArray\n  assert((logits - Transforms.abs(expectedLogits)).max(1) < 1e-6)\n  assert(\n    (softmax(Array(1, 1).toNDArray) - Transforms.abs(Array(0.5, 0.5).toNDArray)).max(1) < 1e-6\n  )\n  println(\"softmax tests passed\")\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "sigmoidTest: ()Unit\nsoftmaxTest: ()Unit\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 6,
      "time" : "Took: 989 milliseconds, at 2017-3-26 15:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "2AA4AF0D847C40C58B9EDFF54EFA5EC8"
    },
    "cell_type" : "code",
    "source" : "sigmoidTest\nsoftmaxTest",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "sigmoid tests passed\nsoftmax tests passed\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 7,
      "time" : "Took: 1 second 132 milliseconds, at 2017-3-26 15:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "8A710585A72E4F39A083A1C8ACE5F2CB"
    },
    "cell_type" : "code",
    "source" : "trait NetLayer {\n  def forwardProp(inputs: INDArray, isTrain: Boolean): INDArray\n  def backProp(outputsGrad: INDArray): INDArray\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined trait NetLayer\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 8,
      "time" : "Took: 608 milliseconds, at 2017-3-26 15:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "94BCEC29D1FF47F08E02B3016F5E0113"
    },
    "cell_type" : "code",
    "source" : "import org.nd4s.Implicits._\n\nclass Dense(inputDim: Int, outputDim: Int, val learningRate: Double) extends NetLayer {\n  private val W = Nd4j.rand(Array(inputDim, outputDim), -0.01, 0.01, RNG)\n  private val b = Nd4j.rand(Array(1, outputDim), -0.01, 0.01, RNG)\n  private var _inputs = Nd4j.zeros(1, inputDim)\n  \n  def forwardProp(inputs: INDArray, isTrain: Boolean): INDArray = {\n    _inputs = inputs\n    (inputs mmul W) addRowVector b\n  }\n  \n  def backProp(outputsGrad: INDArray): INDArray = {\n    val gradW = _inputs.T mmul outputsGrad\n    val gradb = outputsGrad.sum(0)\n    val prop = outputsGrad mmul W.T\n    W -= gradW * learningRate\n    b -= gradb * learningRate\n    prop\n  }\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.nd4s.Implicits._\ndefined class Dense\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 9,
      "time" : "Took: 1 second 454 milliseconds, at 2017-3-26 15:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "C6928100FBFD4F9087EFB6550FDFCE0E"
    },
    "cell_type" : "code",
    "source" : "import org.nd4s.Implicits._\n\nclass SigmoidActivation extends NetLayer {\n  private var _outputs = Nd4j.zeros(1)\n  \n  def forwardProp(inputs: INDArray, isTrain: Boolean): INDArray = {\n    _outputs = sigmoid(inputs)\n    _outputs\n  }\n  \n  def backProp(outputsGrad: INDArray): INDArray = {\n    outputsGrad * sigmoidGrad(_outputs)\n  }\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.nd4s.Implicits._\ndefined class SigmoidActivation\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 10,
      "time" : "Took: 1 second 307 milliseconds, at 2017-3-26 15:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "F59BB35B716A451D820E82A0BA975BA3"
    },
    "cell_type" : "code",
    "source" : "import org.nd4s.Implicits._\n\nclass Softmax extends NetLayer {\n  def forwardProp(inputs: INDArray, isTrain: Boolean): INDArray = {\n    softmax(inputs)\n  }\n  \n  def backProp(outputsGrad: INDArray): INDArray = {\n    val predictions = outputsGrad(0, ->)\n    val labels = outputsGrad(1, ->)\n    predictions - labels\n  }\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.nd4s.Implicits._\ndefined class Softmax\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 11,
      "time" : "Took: 1 second 376 milliseconds, at 2017-3-26 15:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "705378E3036742998FB06EE39B5C3E70"
    },
    "cell_type" : "code",
    "source" : "import org.nd4s.Implicits._\n\nclass Dropout(val dropRate: Double = 0.0) extends NetLayer {\n  var mask: INDArray = Nd4j.zeros(1)\n  def forwardProp(inputs: INDArray, isTrain: Boolean): INDArray = {\n    if (isTrain) {\n      mask = Nd4j.zeros(inputs.shape()(1), 1)\n      Nd4j.choice(Array(0, 1).toNDArray, Array(dropRate, 1 - dropRate).toNDArray, mask)\n      inputs.mulRowVector(mask.T)\n    } else {\n      inputs * (1 - dropRate)\n    }    \n  }\n  \n  def backProp(outputsGrad: INDArray): INDArray = {\n    outputsGrad.mulRowVector(mask.T)\n  }\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.nd4s.Implicits._\ndefined class Dropout\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 12,
      "time" : "Took: 1 second 679 milliseconds, at 2017-3-26 15:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "A871DC7E594B4BB388BD066A4D16A12A"
    },
    "cell_type" : "code",
    "source" : "def crossEntropy(predictions: INDArray, labels: INDArray): Double = {\n  val cost = - (Transforms.log(predictions) * labels).sumNumber.asInstanceOf[Double]\n  cost / labels.shape()(0)\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "crossEntropy: (predictions: org.nd4j.linalg.api.ndarray.INDArray, labels: org.nd4j.linalg.api.ndarray.INDArray)Double\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 13,
      "time" : "Took: 986 milliseconds, at 2017-3-26 15:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "AB7D21976ED946509245991859A7F766"
    },
    "cell_type" : "code",
    "source" : "def accuracy(predictions: INDArray, labels: INDArray): Double = {\n  val samplesNum = labels.shape()(0)\n  val matchesNum = (Nd4j.argMax(predictions, 1) eq Nd4j.argMax(labels, 1)).sumNumber.asInstanceOf[Double]\n  matchesNum / samplesNum\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "accuracy: (predictions: org.nd4j.linalg.api.ndarray.INDArray, labels: org.nd4j.linalg.api.ndarray.INDArray)Double\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 14,
      "time" : "Took: 1 second 33 milliseconds, at 2017-3-26 15:8"
    } ]
  }, {
    "metadata" : {
      "id" : "5985675AD417429F8BAED067FBF23F9C"
    },
    "cell_type" : "markdown",
    "source" : "## Neural Network"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "39AFAAFD2519433AAD40061184D5D2BF"
    },
    "cell_type" : "code",
    "source" : "import org.nd4j.linalg.dataset.api.iterator.DataSetIterator\nimport org.nd4j.linalg.dataset.DataSet",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.nd4j.linalg.dataset.api.iterator.DataSetIterator\nimport org.nd4j.linalg.dataset.DataSet\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 15,
      "time" : "Took: 851 milliseconds, at 2017-3-26 15:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "7F4993AA238D48368F83FD50601B836E"
    },
    "cell_type" : "code",
    "source" : "case class Metric(epoch: Int, acc: Double, loss: Double)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined class Metric\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 16,
      "time" : "Took: 906 milliseconds, at 2017-3-26 15:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B1F01220EC894EAD82FFA872B34771EF"
    },
    "cell_type" : "code",
    "source" : "import scala.collection.JavaConverters._\n\n\ncase class NeuralNet(layers: Vector[NetLayer] = Vector()) {\n  \n  def addLayer(layer: NetLayer): NeuralNet = {\n    this.copy(layers :+ layer)\n  }\n  \n  def fit(trainData: DataSetIterator, numEpochs: Int, validationData: DataSet): Seq[Metric] = {\n    val history = (1 to numEpochs).foldLeft(List[Metric]()){ (history, epoch) =>\n      trainData.reset()\n      trainData.asScala.foreach ( ds => trainBatch(ds.getFeatures, ds.getLabels) )\n      \n      // validate on validation Dataset\n      val prediction = this.predict(validationData.getFeatures)\n      val loss = crossEntropy(prediction, validationData.getLabels)\n      val acc = accuracy(prediction, validationData.getLabels)\n      \n      println(s\"Epoch: $epoch/$numEpochs - loss: $loss - acc: $acc\")\n\n      Metric(epoch, acc, loss) :: history\n    }\n    history.reverse\n  }\n  \n  def predict(X: INDArray): INDArray = {\n    layers.foldLeft(X){\n      (input, layer) => layer.forwardProp(input, isTrain=false)\n    }\n  }\n    \n  private def trainBatch(X: INDArray, Y: INDArray): Unit = {\n    val YPredict = layers.foldLeft(X){\n      (input, layer) => layer.forwardProp(input, isTrain=true)\n    }\n    val shape = Y.shape\n    layers.reverse.foldLeft(\n      Nd4j.vstack(YPredict, Y).reshape(2, shape(0), shape(1))\n    ){\n      (deriv, layer) => layer.backProp(deriv)\n    }\n  }  \n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import scala.collection.JavaConverters._\ndefined class NeuralNet\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 17,
      "time" : "Took: 2 seconds 121 milliseconds, at 2017-3-26 15:8"
    } ]
  }, {
    "metadata" : {
      "id" : "D2392D6C4AE34622B923A3CADA688261"
    },
    "cell_type" : "markdown",
    "source" : "## MNIST"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "ACE10B0E92964245B8FD82C1E99C27AF"
    },
    "cell_type" : "code",
    "source" : "import org.deeplearning4j.datasets.iterator.impl.MnistDataSetIterator",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.deeplearning4j.datasets.iterator.impl.MnistDataSetIterator\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 18,
      "time" : "Took: 945 milliseconds, at 2017-3-26 15:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "0BBA2DB07555458E81F95AAF7A83CC8A"
    },
    "cell_type" : "code",
    "source" : "val learningRate = 0.01\nval batchSize = 128\n\nval mnistTrain = new MnistDataSetIterator(batchSize, true, rngSEED)\nval mnistTest = new MnistDataSetIterator(batchSize, false, rngSEED)\n\nval inputDim = mnistTest.next.getFeatures.shape()(1)\nval totalTestExamples = mnistTest.numExamples()",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "learningRate: Double = 0.01\nbatchSize: Int = 128\nmnistTrain: org.deeplearning4j.datasets.iterator.impl.MnistDataSetIterator = org.deeplearning4j.datasets.iterator.impl.MnistDataSetIterator@64ea4398\nmnistTest: org.deeplearning4j.datasets.iterator.impl.MnistDataSetIterator = org.deeplearning4j.datasets.iterator.impl.MnistDataSetIterator@5d1512a3\ninputDim: Int = 784\ntotalTestExamples: Int = 10000\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 19,
      "time" : "Took: 1 second 76 milliseconds, at 2017-3-26 15:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "CD9BBCF630D4409D8F3F45064D765264"
    },
    "cell_type" : "code",
    "source" : "val model = NeuralNet()\n            .addLayer(new Dense(inputDim=inputDim, outputDim=512, learningRate=learningRate))\n            .addLayer(new SigmoidActivation())\n            .addLayer(new Dropout(dropRate=0.3))\n            .addLayer(new Dense(512, 512, learningRate))\n            .addLayer(new SigmoidActivation())\n            .addLayer(new Dropout(0.3))\n            .addLayer(new Dense(512, 10, learningRate))\n            .addLayer(new Softmax())",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "model: NeuralNet = NeuralNet(Vector($iwC$$iwC$Dense@29d5e44c, $iwC$$iwC$SigmoidActivation@7b2d74ff, $iwC$$iwC$Dropout@60ca3a9e, $iwC$$iwC$Dense@5f967af1, $iwC$$iwC$SigmoidActivation@596712cb, $iwC$$iwC$Dropout@49fd0f94, $iwC$$iwC$Dense@78d2c2ff, $iwC$$iwC$Softmax@14ff6ee6))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 20,
      "time" : "Took: 1 second 105 milliseconds, at 2017-3-26 15:8"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "153C4951EE454D068DE1F8E03DF6EB5F"
    },
    "cell_type" : "code",
    "source" : "val history = model.fit(mnistTrain, 40, (new MnistDataSetIterator(totalTestExamples, false, rngSEED)).next)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "Epoch: 1/40 - loss: 0.553437841796875 - acc: 0.8236\nEpoch: 2/40 - loss: 0.3287392578125 - acc: 0.8997\nEpoch: 3/40 - loss: 0.287028662109375 - acc: 0.9103\nEpoch: 4/40 - loss: 0.2096341064453125 - acc: 0.9356\nEpoch: 5/40 - loss: 0.1902560791015625 - acc: 0.9414\nEpoch: 6/40 - loss: 0.170572607421875 - acc: 0.9485\nEpoch: 7/40 - loss: 0.1558003173828125 - acc: 0.9513\nEpoch: 8/40 - loss: 0.1388808837890625 - acc: 0.9565\nEpoch: 9/40 - loss: 0.1310806640625 - acc: 0.9597\nEpoch: 10/40 - loss: 0.12377705078125 - acc: 0.9606\nEpoch: 11/40 - loss: 0.11897177734375 - acc: 0.9631\nEpoch: 12/40 - loss: 0.112712158203125 - acc: 0.9643\nEpoch: 13/40 - loss: 0.1101241943359375 - acc: 0.9654\nEpoch: 14/40 - loss: 0.10270872802734375 - acc: 0.9675\nEpoch: 15/40 - loss: 0.09695755615234375 - acc: 0.9698\nEpoch: 16/40 - loss: 0.0928009033203125 - acc: 0.9714\nEpoch: 17/40 - loss: 0.09171278076171875 - acc: 0.9717\nEpoch: 18/40 - loss: 0.0893869140625 - acc: 0.9711\nEpoch: 19/40 - loss: 0.08768370361328125 - acc: 0.9714\nEpoch: 20/40 - loss: 0.08273265380859375 - acc: 0.9733\nEpoch: 21/40 - loss: 0.08220009765625 - acc: 0.9732\nEpoch: 22/40 - loss: 0.08050025634765624 - acc: 0.9737\nEpoch: 23/40 - loss: 0.07561025390625 - acc: 0.9763\nEpoch: 24/40 - loss: 0.07690062866210938 - acc: 0.9757\nEpoch: 25/40 - loss: 0.07695980224609375 - acc: 0.9757\nEpoch: 26/40 - loss: 0.07533101806640626 - acc: 0.976\nEpoch: 27/40 - loss: 0.07689620971679688 - acc: 0.9757\nEpoch: 28/40 - loss: 0.0723163330078125 - acc: 0.9771\nEpoch: 29/40 - loss: 0.06934053955078125 - acc: 0.9786\nEpoch: 30/40 - loss: 0.06918525390625 - acc: 0.9783\nEpoch: 31/40 - loss: 0.067534716796875 - acc: 0.9785\nEpoch: 32/40 - loss: 0.06565299072265625 - acc: 0.9789\nEpoch: 33/40 - loss: 0.06615639038085938 - acc: 0.9794\nEpoch: 34/40 - loss: 0.06506829833984375 - acc: 0.9791\nEpoch: 35/40 - loss: 0.06601197509765624 - acc: 0.9785\nEpoch: 36/40 - loss: 0.06776669921875 - acc: 0.9795\nEpoch: 37/40 - loss: 0.063225244140625 - acc: 0.9796\nEpoch: 38/40 - loss: 0.06246710205078125 - acc: 0.9799\nEpoch: 39/40 - loss: 0.063174951171875 - acc: 0.9806\nEpoch: 40/40 - loss: 0.0638287353515625 - acc: 0.9802\nhistory: Seq[Metric] = List(Metric(1,0.8236,0.553437841796875), Metric(2,0.8997,0.3287392578125), Metric(3,0.9103,0.287028662109375), Metric(4,0.9356,0.2096341064453125), Metric(5,0.9414,0.1902560791015625), Metric(6,0.9485,0.170572607421875), Metric(7,0.9513,0.1558003173828125), Metric(8,0.9565,0.1388808837890625), Metric(9,0.9597,0.1310806640625), Metric(10,0.9606,0.12377705078125), Metric(11,0.9631,0.11897177734375), Metric(12,0.9643,0.112712158203125), Metric(13,0.9654,0.1101241943359375), Metric(14,0.9675,0.10270872802734375), Metric(15,0.9698,0.09695755615234375), Metric(16,0.9714,0.0928009033203125), Metric(17,0.9717,0.09171278076171875), Metric(18,0.9711,0.0893869140625), Metric(19,0.9714,0.08768370361328125), Metric(20,0.9733,0.08273265380859375), Metric(21,0.9732,0.08220009765..."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 21,
      "time" : "Took: 6 minutes 4 seconds 683 milliseconds, at 2017-3-26 15:14"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "15151B8114FC4CB3B94F956AFDDCF06A"
    },
    "cell_type" : "code",
    "source" : "CustomPlotlyChart(history,\n                  layout=\"{title: 'Accuracy on validation set', xaxis: {title: 'epoch'}, yaxis: {title: '%'}}\",\n                  dataOptions=\"{mode: 'lines'}\",\n                  dataSources=\"{x: 'epoch', y: 'acc'}\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res35: notebook.front.widgets.charts.CustomPlotlyChart[Seq[Metric]] = <CustomPlotlyChart widget>\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonffaab47b6ef45e070f3459f7c4799155&quot;,&quot;dataInit&quot;:[{&quot;epoch&quot;:1,&quot;acc&quot;:0.8236,&quot;loss&quot;:0.553437841796875},{&quot;epoch&quot;:2,&quot;acc&quot;:0.8997,&quot;loss&quot;:0.3287392578125},{&quot;epoch&quot;:3,&quot;acc&quot;:0.9103,&quot;loss&quot;:0.287028662109375},{&quot;epoch&quot;:4,&quot;acc&quot;:0.9356,&quot;loss&quot;:0.2096341064453125},{&quot;epoch&quot;:5,&quot;acc&quot;:0.9414,&quot;loss&quot;:0.1902560791015625},{&quot;epoch&quot;:6,&quot;acc&quot;:0.9485,&quot;loss&quot;:0.170572607421875},{&quot;epoch&quot;:7,&quot;acc&quot;:0.9513,&quot;loss&quot;:0.1558003173828125},{&quot;epoch&quot;:8,&quot;acc&quot;:0.9565,&quot;loss&quot;:0.1388808837890625},{&quot;epoch&quot;:9,&quot;acc&quot;:0.9597,&quot;loss&quot;:0.1310806640625},{&quot;epoch&quot;:10,&quot;acc&quot;:0.9606,&quot;loss&quot;:0.12377705078125},{&quot;epoch&quot;:11,&quot;acc&quot;:0.9631,&quot;loss&quot;:0.11897177734375},{&quot;epoch&quot;:12,&quot;acc&quot;:0.9643,&quot;loss&quot;:0.112712158203125},{&quot;epoch&quot;:13,&quot;acc&quot;:0.9654,&quot;loss&quot;:0.1101241943359375},{&quot;epoch&quot;:14,&quot;acc&quot;:0.9675,&quot;loss&quot;:0.10270872802734375},{&quot;epoch&quot;:15,&quot;acc&quot;:0.9698,&quot;loss&quot;:0.09695755615234375},{&quot;epoch&quot;:16,&quot;acc&quot;:0.9714,&quot;loss&quot;:0.0928009033203125},{&quot;epoch&quot;:17,&quot;acc&quot;:0.9717,&quot;loss&quot;:0.09171278076171875},{&quot;epoch&quot;:18,&quot;acc&quot;:0.9711,&quot;loss&quot;:0.0893869140625},{&quot;epoch&quot;:19,&quot;acc&quot;:0.9714,&quot;loss&quot;:0.08768370361328125},{&quot;epoch&quot;:20,&quot;acc&quot;:0.9733,&quot;loss&quot;:0.08273265380859375},{&quot;epoch&quot;:21,&quot;acc&quot;:0.9732,&quot;loss&quot;:0.08220009765625},{&quot;epoch&quot;:22,&quot;acc&quot;:0.9737,&quot;loss&quot;:0.08050025634765624},{&quot;epoch&quot;:23,&quot;acc&quot;:0.9763,&quot;loss&quot;:0.07561025390625},{&quot;epoch&quot;:24,&quot;acc&quot;:0.9757,&quot;loss&quot;:0.07690062866210938},{&quot;epoch&quot;:25,&quot;acc&quot;:0.9757,&quot;loss&quot;:0.07695980224609375},{&quot;epoch&quot;:26,&quot;acc&quot;:0.976,&quot;loss&quot;:0.07533101806640626},{&quot;epoch&quot;:27,&quot;acc&quot;:0.9757,&quot;loss&quot;:0.07689620971679688},{&quot;epoch&quot;:28,&quot;acc&quot;:0.9771,&quot;loss&quot;:0.0723163330078125},{&quot;epoch&quot;:29,&quot;acc&quot;:0.9786,&quot;loss&quot;:0.06934053955078125},{&quot;epoch&quot;:30,&quot;acc&quot;:0.9783,&quot;loss&quot;:0.06918525390625},{&quot;epoch&quot;:31,&quot;acc&quot;:0.9785,&quot;loss&quot;:0.067534716796875},{&quot;epoch&quot;:32,&quot;acc&quot;:0.9789,&quot;loss&quot;:0.06565299072265625},{&quot;epoch&quot;:33,&quot;acc&quot;:0.9794,&quot;loss&quot;:0.06615639038085938},{&quot;epoch&quot;:34,&quot;acc&quot;:0.9791,&quot;loss&quot;:0.06506829833984375},{&quot;epoch&quot;:35,&quot;acc&quot;:0.9785,&quot;loss&quot;:0.06601197509765624},{&quot;epoch&quot;:36,&quot;acc&quot;:0.9795,&quot;loss&quot;:0.06776669921875},{&quot;epoch&quot;:37,&quot;acc&quot;:0.9796,&quot;loss&quot;:0.063225244140625},{&quot;epoch&quot;:38,&quot;acc&quot;:0.9799,&quot;loss&quot;:0.06246710205078125},{&quot;epoch&quot;:39,&quot;acc&quot;:0.9806,&quot;loss&quot;:0.063174951171875},{&quot;epoch&quot;:40,&quot;acc&quot;:0.9802,&quot;loss&quot;:0.0638287353515625}],&quot;genId&quot;:&quot;1697260207&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/customPlotlyChart'], \n      function(playground, _magiccustomPlotlyChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magiccustomPlotlyChart,\n    \"o\": {\"js\":\"var layout = {title: 'Accuracy on validation set', xaxis: {title: 'epoch'}, yaxis: {title: '%'}}; var dataSources={x: 'epoch', y: 'acc'}; var dataOptions = {mode: 'lines'}\",\"headers\":[\"epoch\",\"acc\",\"loss\"],\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anone8b97392377bbd600f64b611c3241f8e&quot;,&quot;initialValue&quot;:&quot;40&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon58244a52a4f893dbf143dd669dece9b8&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 27,
      "time" : "Took: 1 second 215 milliseconds, at 2017-3-26 15:22"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "66F17A982AF440CFB32F9847471E3A32"
    },
    "cell_type" : "code",
    "source" : "CustomPlotlyChart(history,\n                  layout=\"{title: 'Cross entropy on validation set', xaxis: {title: 'epoch'}, yaxis: {title: 'loss'}}\",\n                  dataOptions=\"\"\"{\n                    mode: 'lines', \n                    line: {\n                          color: 'rgb(128, 0, 128)',\n                          width: 3\n                          }\n                    }\"\"\",\n                  dataSources=\"{x: 'epoch', y: 'loss'}\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res45: notebook.front.widgets.charts.CustomPlotlyChart[Seq[Metric]] = <CustomPlotlyChart widget>\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anone28aa95a82f464e7ddffbc8171e40f11&quot;,&quot;dataInit&quot;:[{&quot;epoch&quot;:1,&quot;acc&quot;:0.8236,&quot;loss&quot;:0.553437841796875},{&quot;epoch&quot;:2,&quot;acc&quot;:0.8997,&quot;loss&quot;:0.3287392578125},{&quot;epoch&quot;:3,&quot;acc&quot;:0.9103,&quot;loss&quot;:0.287028662109375},{&quot;epoch&quot;:4,&quot;acc&quot;:0.9356,&quot;loss&quot;:0.2096341064453125},{&quot;epoch&quot;:5,&quot;acc&quot;:0.9414,&quot;loss&quot;:0.1902560791015625},{&quot;epoch&quot;:6,&quot;acc&quot;:0.9485,&quot;loss&quot;:0.170572607421875},{&quot;epoch&quot;:7,&quot;acc&quot;:0.9513,&quot;loss&quot;:0.1558003173828125},{&quot;epoch&quot;:8,&quot;acc&quot;:0.9565,&quot;loss&quot;:0.1388808837890625},{&quot;epoch&quot;:9,&quot;acc&quot;:0.9597,&quot;loss&quot;:0.1310806640625},{&quot;epoch&quot;:10,&quot;acc&quot;:0.9606,&quot;loss&quot;:0.12377705078125},{&quot;epoch&quot;:11,&quot;acc&quot;:0.9631,&quot;loss&quot;:0.11897177734375},{&quot;epoch&quot;:12,&quot;acc&quot;:0.9643,&quot;loss&quot;:0.112712158203125},{&quot;epoch&quot;:13,&quot;acc&quot;:0.9654,&quot;loss&quot;:0.1101241943359375},{&quot;epoch&quot;:14,&quot;acc&quot;:0.9675,&quot;loss&quot;:0.10270872802734375},{&quot;epoch&quot;:15,&quot;acc&quot;:0.9698,&quot;loss&quot;:0.09695755615234375},{&quot;epoch&quot;:16,&quot;acc&quot;:0.9714,&quot;loss&quot;:0.0928009033203125},{&quot;epoch&quot;:17,&quot;acc&quot;:0.9717,&quot;loss&quot;:0.09171278076171875},{&quot;epoch&quot;:18,&quot;acc&quot;:0.9711,&quot;loss&quot;:0.0893869140625},{&quot;epoch&quot;:19,&quot;acc&quot;:0.9714,&quot;loss&quot;:0.08768370361328125},{&quot;epoch&quot;:20,&quot;acc&quot;:0.9733,&quot;loss&quot;:0.08273265380859375},{&quot;epoch&quot;:21,&quot;acc&quot;:0.9732,&quot;loss&quot;:0.08220009765625},{&quot;epoch&quot;:22,&quot;acc&quot;:0.9737,&quot;loss&quot;:0.08050025634765624},{&quot;epoch&quot;:23,&quot;acc&quot;:0.9763,&quot;loss&quot;:0.07561025390625},{&quot;epoch&quot;:24,&quot;acc&quot;:0.9757,&quot;loss&quot;:0.07690062866210938},{&quot;epoch&quot;:25,&quot;acc&quot;:0.9757,&quot;loss&quot;:0.07695980224609375},{&quot;epoch&quot;:26,&quot;acc&quot;:0.976,&quot;loss&quot;:0.07533101806640626},{&quot;epoch&quot;:27,&quot;acc&quot;:0.9757,&quot;loss&quot;:0.07689620971679688},{&quot;epoch&quot;:28,&quot;acc&quot;:0.9771,&quot;loss&quot;:0.0723163330078125},{&quot;epoch&quot;:29,&quot;acc&quot;:0.9786,&quot;loss&quot;:0.06934053955078125},{&quot;epoch&quot;:30,&quot;acc&quot;:0.9783,&quot;loss&quot;:0.06918525390625},{&quot;epoch&quot;:31,&quot;acc&quot;:0.9785,&quot;loss&quot;:0.067534716796875},{&quot;epoch&quot;:32,&quot;acc&quot;:0.9789,&quot;loss&quot;:0.06565299072265625},{&quot;epoch&quot;:33,&quot;acc&quot;:0.9794,&quot;loss&quot;:0.06615639038085938},{&quot;epoch&quot;:34,&quot;acc&quot;:0.9791,&quot;loss&quot;:0.06506829833984375},{&quot;epoch&quot;:35,&quot;acc&quot;:0.9785,&quot;loss&quot;:0.06601197509765624},{&quot;epoch&quot;:36,&quot;acc&quot;:0.9795,&quot;loss&quot;:0.06776669921875},{&quot;epoch&quot;:37,&quot;acc&quot;:0.9796,&quot;loss&quot;:0.063225244140625},{&quot;epoch&quot;:38,&quot;acc&quot;:0.9799,&quot;loss&quot;:0.06246710205078125},{&quot;epoch&quot;:39,&quot;acc&quot;:0.9806,&quot;loss&quot;:0.063174951171875},{&quot;epoch&quot;:40,&quot;acc&quot;:0.9802,&quot;loss&quot;:0.0638287353515625}],&quot;genId&quot;:&quot;443704690&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/customPlotlyChart'], \n      function(playground, _magiccustomPlotlyChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magiccustomPlotlyChart,\n    \"o\": {\"js\":\"var layout = {title: 'Cross entropy on validation set', xaxis: {title: 'epoch'}, yaxis: {title: 'loss'}}; var dataSources={x: 'epoch', y: 'loss'}; var dataOptions = {\\n                    mode: 'lines', \\n                    line: {\\n                          color: 'rgb(128, 0, 128)',\\n                          width: 3\\n                          }\\n                    }\",\"headers\":[\"epoch\",\"acc\",\"loss\"],\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon3c944cb77879f155356bbeea4f2810bb&quot;,&quot;initialValue&quot;:&quot;40&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonb054a1dafd759472c23265ce3eb3f5c4&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 32,
      "time" : "Took: 916 milliseconds, at 2017-3-26 15:27"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : true,
      "id" : "AF310E51E16F4F378B1482A1E5060F86"
    },
    "cell_type" : "code",
    "source" : "",
    "outputs" : [ ]
  } ],
  "nbformat" : 4
}