{
  "metadata" : {
    "name" : "BagOfWordsMeetsBagsOfPopcorn",
    "user_save_timestamp" : "1970-01-01T03:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T03:00:00.000Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "customLocalRepo" : null,
    "customRepos" : null,
    "customDeps" : null,
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : null
  },
  "cells" : [ {
    "metadata" : {
      "id" : "89D96E0BE5DB49F983ACCFA8DB52561D"
    },
    "cell_type" : "markdown",
    "source" : "# Bag of Words Meets Bags of Popcorn"
  }, {
    "metadata" : {
      "id" : "65DB30C3AEA742C4839566164BF1A058"
    },
    "cell_type" : "markdown",
    "source" : "In this lab we're going to work with IMDB Movies Reviews dataset from kaggle competition [Bag of Words Meets Bags of Popcorn](https://www.kaggle.com/c/word2vec-nlp-tutorial/data).\n\n<div style=\"text-align:center\">\n  <img src=\"http://i.imgur.com/QZgxFic.png\">\n</div>\n\nThe task is to determine whether the given movie review is positive or negative. This is one example of the problem of text [sentiment analysis](https://en.wikipedia.org/wiki/Sentiment_analysis). Here is one example of review from the dataset:\n\n    When I saw this film in the 1950s, I wanted to be a scientist too. There was something magical and useful in Science. I took a girl - friend along to see it a second time. I don't think she was as impressed as I was! This film was comical yet serious, at a time when synthetic fibres were rather new. Lessons from this film could be applied to issues relating to GM experimentation of today."
  }, {
    "metadata" : {
      "id" : "60FEC683FB4B4F429C9F8894A70F4C30"
    },
    "cell_type" : "markdown",
    "source" : "Load labeledTrainData.tsv dataset. To load data from csv file direct to Spark's Dataframe one can use [spark-csv](http://spark-packages.org/package/databricks/spark-csv) package.\nTo add spark-csv package to spark notebook one could add \"com.databricks:spark-csv_2.10:1.4.0\" (or \"com.databricks:spark-csv_2.11:1.4.0\" for Scala 2.11) dependency into customDeps conf section. Alternatively one could specify this dependency in `--packages` command line option while submiting spark application to a cluster (`spark-submit`) or launching spark shell (`spark-shell`).\nFor tsv format use appropriate value of `delimiter` option."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "7E6CFDCD51034DF989F86638D5846457"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.sql.SQLContext\n\nval sqlContext = new SQLContext(sc)\n\nval data = sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\")\n    .option(\"inferSchema\", \"true\")\n    .option(\"delimiter\", \"\\t\")\n    .load(\"notebooks/labs/BagOfWordsMeetsBagsOfPopcorn/labeledTrainData.tsv\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.sql.SQLContext\nsqlContext: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@2047470c\ndata: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, review: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 1
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "3492639D56FE4809AA62FE110B48158B"
    },
    "cell_type" : "code",
    "source" : "data.limit(5).show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+-------+---------+--------------------+\n|     id|sentiment|              review|\n+-------+---------+--------------------+\n| 5814_8|        1|With all this stu...|\n| 7759_3|        0|The film starts w...|\n| 8196_8|        1|I dont know why p...|\n| 7166_2|        0|This movie could ...|\n|10633_1|        0|I watched this vi...|\n+-------+---------+--------------------+\n\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 2
    } ]
  }, {
    "metadata" : {
      "id" : "1BFBCC214C944B8281D0AEBF83FE23C4"
    },
    "cell_type" : "markdown",
    "source" : "How many positive and negative reviews in this dataset?"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "09ED77BEC2824A538C1A82089CDD8B2C"
    },
    "cell_type" : "code",
    "source" : "data.groupBy(\"sentiment\").count.show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------+-----+\n|sentiment|count|\n+---------+-----+\n|        0| 6387|\n|        1| 6990|\n+---------+-----+\n\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 3
    } ]
  }, {
    "metadata" : {
      "id" : "E437523B0D864162AB13DA0F209CE1BD"
    },
    "cell_type" : "markdown",
    "source" : "As we can see, almost half of the reviews are positive and the other half of the reviews are negative. Such datasets are called balanced. But let's make things a bit more interesting and remove three quarters of positive reviews from the dataset and thus we will make the dataset unbalanced."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "68BFF7509E0D478FBFD7BDBBFAF117D0"
    },
    "cell_type" : "code",
    "source" : "val unbalancedData = data.filter(data(\"sentiment\") === 1)\n                         .sample(false, 0.25)\n                         .unionAll(data.filter(data(\"sentiment\") === 0))\nunbalancedData.groupBy(\"sentiment\").count.show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------+-----+\n|sentiment|count|\n+---------+-----+\n|        0| 6387|\n|        1| 1747|\n+---------+-----+\n\nunbalancedData: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, review: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 4
    } ]
  }, {
    "metadata" : {
      "id" : "E6BB169B270649E48A1C9AA9703680EB"
    },
    "cell_type" : "markdown",
    "source" : "For model quality assessment we will be using train test split with 75% of the data is used for training and 25% for testing. Two important notes:\n - It is good to have a reproducible split on train and test data (hint: use seed param).\n - it is good to preserve the percentage of samples for each class in each split/fold especially in the case of a highly unbalanced classes (follow [the ticket](https://issues.apache.org/jira/browse/SPARK-8971))."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "99230B53BEC64921BED57959C191EFB5"
    },
    "cell_type" : "code",
    "source" : "// Split the data into training and test sets (25% held out for testing)\nval Array(trainingData, testData) = unbalancedData.randomSplit(Array(0.75, 0.25), seed=547)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "trainingData: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, review: string]\ntestData: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, review: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 5
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "CB9F2F4810E64E4484D5C7624DFD9D8B"
    },
    "cell_type" : "code",
    "source" : "println(trainingData.groupBy(\"sentiment\").count.show)\nprintln(testData.groupBy(\"sentiment\").count.show)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------+-----+\n|sentiment|count|\n+---------+-----+\n|        0| 4757|\n|        1| 1299|\n+---------+-----+\n\n()\n+---------+-----+\n|sentiment|count|\n+---------+-----+\n|        0| 1630|\n|        1|  448|\n+---------+-----+\n\n()\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 6
    } ]
  }, {
    "metadata" : {
      "id" : "6FD8193001054F9D8782B456B9EDFC9D"
    },
    "cell_type" : "markdown",
    "source" : "One of the difficulties of this task is textual representation of the data because there is no universal method of feature extraction from the texts.\nIn the course of the lab we will get a few feature representations of the data which will be compared with each other."
  }, {
    "metadata" : {
      "id" : "59DD6E6369DF456BBB19643C25EB3699"
    },
    "cell_type" : "markdown",
    "source" : "## Bag of words"
  }, {
    "metadata" : {
      "id" : "DF4A6A340D7C4008852399BFA2B9CFC5"
    },
    "cell_type" : "markdown",
    "source" : "First we will try the simplest approach, namely [bag-of-words](https://en.wikipedia.org/wiki/Bag-of-words_model). With bag-of-words each text will be represented as a vector of numbers with the size equal to the size of the dictionary. On each position of the vector there will be a counter which represents how many times corresponding word was found in this text. This representation one can obtain using [CountVectorizer](http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.ml.feature.CountVectorizer).\n\nBut before making features from our data we have to perform data cleaning and text preprocessing steps.\nThere is a good point about data cleaning and text preprocessing in corresponding [tutorial](https://www.kaggle.com/c/word2vec-nlp-tutorial/details/part-1-for-beginners-bag-of-words):\n\n    When considering how to clean the text, we should think about the data problem we are trying to solve. For many problems, it makes sense to remove punctuation. On the other hand, in this case, we are tackling a sentiment analysis problem, and it is possible that \"!!!\" or \":-(\" could carry sentiment, and should be treated as words.\n    \nRemoving [stop words](https://en.wikipedia.org/wiki/Stop_words) while constructing bag-of-words is also fa good practice.\n\nAll these steps can be implemented using sequence of the following feature transformers:\n[RegexTokenizer](http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.ml.feature.RegexTokenizer)\nfollowed by [StopWordsRemover](http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.ml.feature.StopWordsRemover)\nfollowed by [CountVectorizer](http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.ml.feature.CountVectorizer)."
  }, {
    "metadata" : {
      "id" : "D8FBF41064EA48CDA468475BA81E7CEB"
    },
    "cell_type" : "markdown",
    "source" : "`RegexTokenizer` performs splitting/tokenization based on regular expression matching. To perform tokenization rather than splitting one neet to set parameter `gaps` to `false`.\n\n`StopWordsRemover` comes with provided list of stop words. Alternatively one can provide its own stop words list."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "07865C6B32334E7989BA2221E1A3A36D"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.feature.{RegexTokenizer, StopWordsRemover, CountVectorizer}\n\nval regexTokenizer = new RegexTokenizer()\n  .setInputCol(\"review\")\n  .setOutputCol(\"tokens\")\n  .setPattern(\"(\\\\w+|[!?]|:-?\\\\)|:-?\\\\()\")\n  .setGaps(false)\n\nval remover = new StopWordsRemover()\n  .setInputCol(\"tokens\")\n  .setOutputCol(\"filteredTokens\")\n\nval countVec = new CountVectorizer()\n  .setInputCol(\"filteredTokens\")\n  .setOutputCol(\"features\")\n\n\n// Chain tokenizer, stop words remover and CountVectorizer in a Pipeline\nval pipeline = new Pipeline()\n  .setStages(Array(regexTokenizer, \n                   remover, \n                   countVec))\n\nval transformModel = pipeline.fit(unbalancedData)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.feature.{RegexTokenizer, StopWordsRemover, CountVectorizer}\nregexTokenizer: org.apache.spark.ml.feature.RegexTokenizer = regexTok_2f32b291ef68\nremover: org.apache.spark.ml.feature.StopWordsRemover = stopWords_5ac29abdc952\ncountVec: org.apache.spark.ml.feature.CountVectorizer = cntVec_983989492d07\npipeline: org.apache.spark.ml.Pipeline = pipeline_2a3cbcacdd70\ntransformModel: org.apache.spark.ml.PipelineModel = pipeline_2a3cbcacdd70\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 7
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "4403C8ACCAD9414E8B8A388A0BC594B9"
    },
    "cell_type" : "code",
    "source" : "val trainBagOfWords = transformModel.transform(trainingData).select(\"id\", \"sentiment\", \"features\")\nval testBagOfWords = transformModel.transform(testData).select(\"id\", \"sentiment\", \"features\")\n\ntrainBagOfWords.limit(1).show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+-------+---------+--------------------+\n|     id|sentiment|            features|\n+-------+---------+--------------------+\n|10034_8|        1|(41197,[1,2,3,4,9...|\n+-------+---------+--------------------+\n\ntrainBagOfWords: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector]\ntestBagOfWords: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 8
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "476FE34ED682482393CA8166A115F10F"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.mllib.linalg.SparseVector\n\nval featureSpaceDim = trainBagOfWords.select(\"features\").first.getAs[SparseVector](0).size\n\nprintln(s\"We've obtained $featureSpaceDim-dimensional feature space.\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "We've obtained 41197-dimensional feature space.\nimport org.apache.spark.mllib.linalg.SparseVector\nfeatureSpaceDim: Int = 41197\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 9
    } ]
  }, {
    "metadata" : {
      "id" : "55018FD2FA5C4E0C8FF0E95ED8247441"
    },
    "cell_type" : "markdown",
    "source" : "Now after we've obtained some representation of our text,  the next step is to train the classification algorithms and to compare them with each other. This requires understanding what are the metrics should be used to compare algorithms. We can consider, for example, the following metrics:\n\n- accuracy: $$ Accuracy = \\frac{1}{l}\\sum_{i=1}^l[y_i = \\hat{y}_i]$$ where $y_i$ — the true object class $x_i$, $\\hat{y}_i$ — he predicted class of the object.\n- precision: $$Precision = \\frac{TP}{TP + FP}$$\n- recall: $$Recall = \\frac{TP}{TP + FN}$$\n\nwhere *TP*, *FP*, *FN* and *TN* — the elements of a confusion matrix:\n\n| | y = 1 | y = 0 |\n|------|------|\n|   a(x) = 1  | TP| FP |\n|   a(x) = 0  | FN | TN |\n\nPlease note that accuracy and recall are calculated relative to a fixed class.\n\nOften, a classifier returns some *score* $b(x)$ of belonging to a given class, which is compared with fixed threshold *t*. Thus the classifier has the form $a(x) = [b(x) > t]$ and one can tune the threshold depending on specific needs. For example, there may be some cases where the threshold might need to be tuned so that it only predicts a class when the score is very high. Threshold tuning affects the quality of classification:\n - the higher $t$, the higher the precision, the lower the recall,\n - the lower $t$, the higher the recall, the lower the precesion.\n\n\n### Precision-Recall curve\nInteresting to know what will be the quality at all the different possible thresholds. So we can just compute precision-recall pairs for different thresholds. This will be precision-recall curve. We can achieve that using `BinaryClassificationMetrics` class from `org.apache.spark.mllib.evaluation` package. We can plot this curve with recall values on X-axis and precision values on Y-axis. This gives a good visualization of the quality of the algorithm.\n\n### ROC curve\n*ROC* curve is another method of visualizing the dependence of the quality of the algorithm from the threshold. In this case:\n  - X-axis: $FPR = \\frac{FP}{FP + TN}$\n  - Y-axis: $TPR = \\frac{TP}{TP + FN}$\n \nWhere *FPR* is false positive rate and *TPR* is true positive rate. Again `BinaryClassificationMetrics` provides appropriate method to compute this.\n\nIn addition, it is possible to measure the area under the curves: *auc_pr* and *auc_roc*, respectively."
  }, {
    "metadata" : {
      "id" : "AD5EDFC145DC4B588A1574ACD52BFF30"
    },
    "cell_type" : "markdown",
    "source" : "**Problem** What are disadvantages of using `accuracy` metric in case of unbalanced data? Train Logistic Regression and Random Forest with 200 trees on bag-of-words and build `precision-recall` and `ROC` curves on test data. Also compute *auc_pr* and *auc_roc*. Compare training times of the algorithms. Is there a significant difference in the quality of algorithms? Which method seems less applicable in this problem and why?"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "417DD06930FC40C8A061B6D116E5553B"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.ml.classification.{LogisticRegression, RandomForestClassifier}\nimport org.apache.spark.ml.feature.{StringIndexer, IndexToString}\nimport org.apache.spark.ml.tuning.TrainValidationSplit\n\n\nval labelIndexer = new StringIndexer()\n  .setInputCol(\"sentiment\")\n  .setOutputCol(\"label\")\n  .fit(unbalancedData)\n\n// Convert predicted labels back to original labels.\nval labelConverter = new IndexToString()\n  .setInputCol(\"prediction\")\n  .setOutputCol(\"predictedSentiment\")\n  .setLabels(labelIndexer.labels)\n\n// Chain indexer, classifier and converter in a Pipeline\nval lr = new LogisticRegression()\nval lrPipeline = new Pipeline()\n  .setStages(Array(labelIndexer, lr, labelConverter))\n\nval rf = new RandomForestClassifier()\n  .setNumTrees(200)\nval rfPipeline = new Pipeline()\n  .setStages(Array(labelIndexer, rf, labelConverter))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.ml.classification.{LogisticRegression, RandomForestClassifier}\nimport org.apache.spark.ml.feature.{StringIndexer, IndexToString}\nimport org.apache.spark.ml.tuning.TrainValidationSplit\nlabelIndexer: org.apache.spark.ml.feature.StringIndexerModel = strIdx_0adf7f930d9c\nlabelConverter: org.apache.spark.ml.feature.IndexToString = idxToStr_391ef7771db2\nlr: org.apache.spark.ml.classification.LogisticRegression = logreg_6c340763a154\nlrPipeline: org.apache.spark.ml.Pipeline = pipeline_58d6bdf76c0b\nrf: org.apache.spark.ml.classification.RandomForestClassifier = rfc_2877825d05c6\nrfPipeline: org.apache.spark.ml.Pipeline = pipeline_bfaae5776f5b\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 10
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "A7CAFEAEA18C461E8BF48328CBAB26B3"
    },
    "cell_type" : "code",
    "source" : "// train classifier\nval lrModel = lrPipeline.fit(trainBagOfWords)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "lrModel: org.apache.spark.ml.PipelineModel = pipeline_58d6bdf76c0b\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 11
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "1C53964A129044348D131D6E185036B1"
    },
    "cell_type" : "code",
    "source" : "val rfModel = rfPipeline.fit(trainBagOfWords)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "rfModel: org.apache.spark.ml.PipelineModel = pipeline_20a900ca76ec\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 12
    } ]
  }, {
    "metadata" : {
      "id" : "6D132E1F85284C4A81A4C6FFAA372A47"
    },
    "cell_type" : "markdown",
    "source" : "It's clear what Random Forest takes much more time to train. "
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "3200F4D40093464785E926A56EBACA07"
    },
    "cell_type" : "code",
    "source" : "// Make predictions.\nval lrPredictions = lrModel.transform(testBagOfWords)\nlrPredictions.select(\"sentiment\",\n                     \"label\",\n                     \"probability\",\n                     \"rawPrediction\",\n                     \"prediction\",\n                     \"predictedSentiment\")\n             .sample(false, 10.0 / testBagOfWords.count)\n             .show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------+-----+--------------------+--------------------+----------+------------------+\n|sentiment|label|         probability|       rawPrediction|prediction|predictedSentiment|\n+---------+-----+--------------------+--------------------+----------+------------------+\n|        0|  0.0|[0.99999998892718...|[18.3187724566630...|       0.0|                 0|\n|        0|  0.0|[0.99999965389096...|[14.8765116453880...|       0.0|                 0|\n|        0|  0.0|[0.99999667202417...|[12.6131429697485...|       0.0|                 0|\n|        0|  0.0|[0.99999701017132...|[12.7202914809926...|       0.0|                 0|\n|        0|  0.0|[0.99999999999999...|[33.2891788339196...|       0.0|                 0|\n|        0|  0.0|[0.99985916599383...|[8.86778777842664...|       0.0|                 0|\n|        0|  0.0|[1.0,9.3556414336...|[50.7234776156226...|       0.0|                 0|\n|        0|  0.0|[0.99999999589548...|[19.3111780716961...|       0.0|                 0|\n|        0|  0.0|[0.99970614675919...|[8.13213619978139...|       0.0|                 0|\n|        0|  0.0|[0.99954735698967...|[7.69995405435562...|       0.0|                 0|\n|        0|  0.0|[0.99999999991345...|[23.1703788877652...|       0.0|                 0|\n|        0|  0.0|[0.99999999545529...|[19.2093029912746...|       0.0|                 0|\n|        0|  0.0|[0.99999999999802...|[26.9502764427272...|       0.0|                 0|\n+---------+-----+--------------------+--------------------+----------+------------------+\n\nlrPredictions: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector, label: double, rawPrediction: vector, probability: vector, prediction: double, predictedSentiment: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 13
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "C5B95A260B674974ABBC12E45B17E511"
    },
    "cell_type" : "code",
    "source" : "val rfPredictions = rfModel.transform(testBagOfWords)\nrfPredictions.select(\"sentiment\",\n                     \"label\",\n                     \"probability\",\n                     \"rawPrediction\",\n                     \"prediction\",\n                     \"predictedSentiment\")\n             .sample(false, 10.0 / testBagOfWords.count)\n             .show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------+-----+--------------------+--------------------+----------+------------------+\n|sentiment|label|         probability|       rawPrediction|prediction|predictedSentiment|\n+---------+-----+--------------------+--------------------+----------+------------------+\n|        1|  1.0|[0.78091661651046...|[156.183323302093...|       0.0|                 0|\n|        0|  0.0|[0.78389432000378...|[156.778864000757...|       0.0|                 0|\n|        0|  0.0|[0.77912538160016...|[155.825076320032...|       0.0|                 0|\n|        0|  0.0|[0.80063333037932...|[160.126666075864...|       0.0|                 0|\n|        0|  0.0|[0.78545380206517...|[157.090760413034...|       0.0|                 0|\n|        0|  0.0|[0.79345311520246...|[158.690623040493...|       0.0|                 0|\n|        0|  0.0|[0.80362142314040...|[160.724284628081...|       0.0|                 0|\n|        0|  0.0|[0.81023039982448...|[162.046079964896...|       0.0|                 0|\n|        0|  0.0|[0.77688159787162...|[155.376319574324...|       0.0|                 0|\n|        0|  0.0|[0.79905204437165...|[159.810408874330...|       0.0|                 0|\n+---------+-----+--------------------+--------------------+----------+------------------+\n\nrfPredictions: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector, label: double, rawPrediction: vector, probability: vector, prediction: double, predictedSentiment: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 14
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "4233F315C14E4CA78E57545A987E27AF"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\nimport org.apache.spark.mllib.linalg.DenseVector\n\n// prepare labels and predictions for metric model\nval lrPredictionAndLabels = lrPredictions\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(1), r.getAs[Double](1)))\n\nval rfPredictionAndLabels = rfPredictions\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(1), r.getAs[Double](1)))\n\n// Instantiate metrics object\nval lrMetrics = new BinaryClassificationMetrics(lrPredictionAndLabels)\nval rfMetrics = new BinaryClassificationMetrics(rfPredictionAndLabels)\n\n// Obtain precision-recall curve\nval lrPrecisionRecall = lrMetrics.pr\nval rfPrecisionRecall = rfMetrics.pr\n\n// Obtain roc curve\nval lrROC = lrMetrics.roc\nval rfROC = rfMetrics.roc",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\nimport org.apache.spark.mllib.linalg.DenseVector\nlrPredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[426] at map at <console>:114\nrfPredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[447] at map at <console>:118\nlrMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@26257a25\nrfMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@5b785d7\nlrPrecisionRecall: org.apache.spark.rdd.RDD[(Double, Double)] = UnionRDD[458] at union at BinaryClassificationMetrics.scala:108\nrfPrecisionRecall: org.apache.sp..."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 15
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "0ED46DBD7C334C9387153710C581BA8C"
    },
    "cell_type" : "code",
    "source" : "case class RecallPrecisionPoint(lrRecall: Double,\n                                lrPrecision: Double,\n                                rfRecall: Double,\n                                rfPrecision: Double)\nval sampleFraction = 0.2\nval recallPrecisionPoints = lrPrecisionRecall\n                              .sample(false, sampleFraction)\n                              .collect.zip(rfPrecisionRecall.sample(false, sampleFraction).collect)\n                              .map{\n  p => RecallPrecisionPoint(p._1._1, p._1._2, p._2._1, p._2._2)}\n\ncase class ROCPoint(lrFPR: Double,\n                    lrTPR: Double,\n                    rfFPR: Double,\n                    rfTPR: Double)\nval rocPoints = lrROC\n                  .sample(false,0.2)\n                  .collect.zip(rfROC.sample(false, sampleFraction).collect)\n                  .map{\n  p => ROCPoint(p._1._1, p._1._2, p._2._1, p._2._2)}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined class RecallPrecisionPoint\nsampleFraction: Double = 0.2\nrecallPrecisionPoints: Array[RecallPrecisionPoint] = Array(RecallPrecisionPoint(0.01805869074492099,0.8888888888888888,0.0,1.0), RecallPrecisionPoint(0.02708803611738149,0.8571428571428571,0.01580135440180587,1.0), RecallPrecisionPoint(0.03160270880361174,0.875,0.029345372460496615,0.9285714285714286), RecallPrecisionPoint(0.03611738148984198,0.8888888888888888,0.03611738148984198,0.8888888888888888), RecallPrecisionPoint(0.040632054176072234,0.9,0.040632054176072234,0.9), RecallPrecisionPoint(0.1038374717832957,0.8363636363636363,0.045146726862302484,0.9090909090909091), RecallPrecisionPoint(0.11738148984198646,0.8524590163934426,0.04966139954853273,0.8461538461538461), RecallPrecisionPoint(0.11963882618510158,0.8548387096..."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 16
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab1745901744-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "F5F26B00E8C94D778C7C0A7590B5EB53"
    },
    "cell_type" : "code",
    "source" : "CustomC3Chart(recallPrecisionPoints,\n              \"\"\"{ data: { xs: {\n                            'lrPrecision': 'lrRecall',\n                            'rfPrecision': 'rfRecall',\n                         }\n                   },\n                   axis: {\n                      y: {\n                        label: 'precision'\n                      },\n                      x: {\n                         label: 'recall',\n                         tick: {\n                            count: 5\n                         }\n                      }\n                   },\n                   point: {\n                        show: false\n                   }\n                  }\"\"\")\n",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res26: notebook.front.widgets.CustomC3Chart[Array[RecallPrecisionPoint]] = <CustomC3Chart widget>\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon9e940993b2572e85757bf169a4892834&quot;,&quot;dataInit&quot;:[{&quot;lrRecall&quot;:0.01805869074492099,&quot;lrPrecision&quot;:0.8888888888888888,&quot;rfRecall&quot;:0.0,&quot;rfPrecision&quot;:1.0},{&quot;lrRecall&quot;:0.02708803611738149,&quot;lrPrecision&quot;:0.8571428571428571,&quot;rfRecall&quot;:0.01580135440180587,&quot;rfPrecision&quot;:1.0},{&quot;lrRecall&quot;:0.03160270880361174,&quot;lrPrecision&quot;:0.875,&quot;rfRecall&quot;:0.029345372460496615,&quot;rfPrecision&quot;:0.9285714285714286},{&quot;lrRecall&quot;:0.03611738148984198,&quot;lrPrecision&quot;:0.8888888888888888,&quot;rfRecall&quot;:0.03611738148984198,&quot;rfPrecision&quot;:0.8888888888888888},{&quot;lrRecall&quot;:0.040632054176072234,&quot;lrPrecision&quot;:0.9,&quot;rfRecall&quot;:0.040632054176072234,&quot;rfPrecision&quot;:0.9},{&quot;lrRecall&quot;:0.1038374717832957,&quot;lrPrecision&quot;:0.8363636363636363,&quot;rfRecall&quot;:0.045146726862302484,&quot;rfPrecision&quot;:0.9090909090909091},{&quot;lrRecall&quot;:0.11738148984198646,&quot;lrPrecision&quot;:0.8524590163934426,&quot;rfRecall&quot;:0.04966139954853273,&quot;rfPrecision&quot;:0.8461538461538461},{&quot;lrRecall&quot;:0.11963882618510158,&quot;lrPrecision&quot;:0.8548387096774194,&quot;rfRecall&quot;:0.05191873589164785,&quot;rfPrecision&quot;:0.8518518518518519},{&quot;lrRecall&quot;:0.13318284424379231,&quot;lrPrecision&quot;:0.8676470588235294,&quot;rfRecall&quot;:0.056433408577878104,&quot;rfPrecision&quot;:0.8620689655172413},{&quot;lrRecall&quot;:0.1399548532731377,&quot;lrPrecision&quot;:0.8732394366197183,&quot;rfRecall&quot;:0.0654627539503386,&quot;rfPrecision&quot;:0.8787878787878788},{&quot;lrRecall&quot;:0.16252821670428894,&quot;lrPrecision&quot;:0.8571428571428571,&quot;rfRecall&quot;:0.08126410835214447,&quot;rfPrecision&quot;:0.9},{&quot;lrRecall&quot;:0.18284424379232506,&quot;lrPrecision&quot;:0.8350515463917526,&quot;rfRecall&quot;:0.08803611738148984,&quot;rfPrecision&quot;:0.9069767441860465},{&quot;lrRecall&quot;:0.1873589164785553,&quot;lrPrecision&quot;:0.8383838383838383,&quot;rfRecall&quot;:0.1038374717832957,&quot;rfPrecision&quot;:0.9019607843137255},{&quot;lrRecall&quot;:0.20316027088036118,&quot;lrPrecision&quot;:0.8333333333333334,&quot;rfRecall&quot;:0.11060948081264109,&quot;rfPrecision&quot;:0.8909090909090909},{&quot;lrRecall&quot;:0.20993227990970656,&quot;lrPrecision&quot;:0.8378378378378378,&quot;rfRecall&quot;:0.13318284424379231,&quot;rfPrecision&quot;:0.9076923076923077},{&quot;lrRecall&quot;:0.22573363431151242,&quot;lrPrecision&quot;:0.8333333333333334,&quot;rfRecall&quot;:0.13769751693002258,&quot;rfPrecision&quot;:0.9104477611940298},{&quot;lrRecall&quot;:0.22799097065462753,&quot;lrPrecision&quot;:0.8278688524590164,&quot;rfRecall&quot;:0.17607223476297967,&quot;rfPrecision&quot;:0.9176470588235294},{&quot;lrRecall&quot;:0.23702031602708803,&quot;lrPrecision&quot;:0.813953488372093,&quot;rfRecall&quot;:0.1873589164785553,&quot;rfPrecision&quot;:0.9021739130434783},{&quot;lrRecall&quot;:0.24153498871331827,&quot;lrPrecision&quot;:0.816793893129771,&quot;rfRecall&quot;:0.18961625282167044,&quot;rfPrecision&quot;:0.9032258064516129},{&quot;lrRecall&quot;:0.2595936794582393,&quot;lrPrecision&quot;:0.7931034482758621,&quot;rfRecall&quot;:0.19187358916478556,&quot;rfPrecision&quot;:0.9042553191489362},{&quot;lrRecall&quot;:0.26636568848758463,&quot;lrPrecision&quot;:0.7972972972972973,&quot;rfRecall&quot;:0.19413092550790068,&quot;rfPrecision&quot;:0.9052631578947369},{&quot;lrRecall&quot;:0.28216704288939054,&quot;lrPrecision&quot;:0.8064516129032258,&quot;rfRecall&quot;:0.20090293453724606,&quot;rfPrecision&quot;:0.9081632653061225},{&quot;lrRecall&quot;:0.291196388261851,&quot;lrPrecision&quot;:0.8113207547169812,&quot;rfRecall&quot;:0.2234762979683973,&quot;rfPrecision&quot;:0.908256880733945},{&quot;lrRecall&quot;:0.29345372460496616,&quot;lrPrecision&quot;:0.8074534161490683,&quot;rfRecall&quot;:0.23024830699774265,&quot;rfPrecision&quot;:0.9026548672566371},{&quot;lrRecall&quot;:0.29571106094808125,&quot;lrPrecision&quot;:0.808641975308642,&quot;rfRecall&quot;:0.2325056433408578,&quot;rfPrecision&quot;:0.8879310344827587},{&quot;lrRecall&quot;:0.309255079006772,&quot;lrPrecision&quot;:0.8106508875739645,&quot;rfRecall&quot;:0.2505643340857788,&quot;rfPrecision&quot;:0.8809523809523809},{&quot;lrRecall&quot;:0.3115124153498871,&quot;lrPrecision&quot;:0.8117647058823529,&quot;rfRecall&quot;:0.2618510158013544,&quot;rfPrecision&quot;:0.8787878787878788},{&quot;lrRecall&quot;:0.3295711060948081,&quot;lrPrecision&quot;:0.8202247191011236,&quot;rfRecall&quot;:0.2618510158013544,&quot;rfPrecision&quot;:0.8721804511278195},{&quot;lrRecall&quot;:0.3340857787810384,&quot;lrPrecision&quot;:0.8222222222222222,&quot;rfRecall&quot;:0.26636568848758463,&quot;rfPrecision&quot;:0.8676470588235294},{&quot;lrRecall&quot;:0.34085778781038373,&quot;lrPrecision&quot;:0.8206521739130435,&quot;rfRecall&quot;:0.27539503386004516,&quot;rfPrecision&quot;:0.8531468531468531},{&quot;lrRecall&quot;:0.3431151241534989,&quot;lrPrecision&quot;:0.8172043010752689,&quot;rfRecall&quot;:0.2799097065462754,&quot;rfPrecision&quot;:0.8493150684931506},{&quot;lrRecall&quot;:0.3476297968397291,&quot;lrPrecision&quot;:0.806282722513089,&quot;rfRecall&quot;:0.2866817155756208,&quot;rfPrecision&quot;:0.8466666666666667},{&quot;lrRecall&quot;:0.34988713318284426,&quot;lrPrecision&quot;:0.8031088082901554,&quot;rfRecall&quot;:0.2866817155756208,&quot;rfPrecision&quot;:0.8410596026490066},{&quot;lrRecall&quot;:0.3544018058690745,&quot;lrPrecision&quot;:0.7969543147208121,&quot;rfRecall&quot;:0.29345372460496616,&quot;rfPrecision&quot;:0.8333333333333334},{&quot;lrRecall&quot;:0.36343115124153497,&quot;lrPrecision&quot;:0.7931034482758621,&quot;rfRecall&quot;:0.29571106094808125,&quot;rfPrecision&quot;:0.8136645962732919},{&quot;lrRecall&quot;:0.37020316027088035,&quot;lrPrecision&quot;:0.784688995215311,&quot;rfRecall&quot;:0.29571106094808125,&quot;rfPrecision&quot;:0.808641975308642},{&quot;lrRecall&quot;:0.37020316027088035,&quot;lrPrecision&quot;:0.780952380952381,&quot;rfRecall&quot;:0.2979683972911964,&quot;rfPrecision&quot;:0.8048780487804879},{&quot;lrRecall&quot;:0.3747178329571106,&quot;lrPrecision&quot;:0.7757009345794392,&quot;rfRecall&quot;:0.31376975169300225,&quot;rfPrecision&quot;:0.7897727272727273},{&quot;lrRecall&quot;:0.3792325056433409,&quot;lrPrecision&quot;:0.7706422018348624,&quot;rfRecall&quot;:0.3182844243792325,&quot;rfPrecision&quot;:0.7921348314606742},{&quot;lrRecall&quot;:0.3837471783295711,&quot;lrPrecision&quot;:0.7727272727272727,&quot;rfRecall&quot;:0.33182844243792325,&quot;rfPrecision&quot;:0.7777777777777778},{&quot;lrRecall&quot;:0.39503386004514673,&quot;lrPrecision&quot;:0.7709251101321586,&quot;rfRecall&quot;:0.34085778781038373,&quot;rfPrecision&quot;:0.7823834196891192},{&quot;lrRecall&quot;:0.3972911963882618,&quot;lrPrecision&quot;:0.7719298245614035,&quot;rfRecall&quot;:0.36343115124153497,&quot;rfPrecision&quot;:0.7703349282296651},{&quot;lrRecall&quot;:0.4018058690744921,&quot;lrPrecision&quot;:0.7672413793103449,&quot;rfRecall&quot;:0.36794582392776526,&quot;rfPrecision&quot;:0.7652582159624414},{&quot;lrRecall&quot;:0.4198645598194131,&quot;lrPrecision&quot;:0.7654320987654321,&quot;rfRecall&quot;:0.39954853273137697,&quot;rfPrecision&quot;:0.7531914893617021},{&quot;lrRecall&quot;:0.43340857787810383,&quot;lrPrecision&quot;:0.7710843373493976,&quot;rfRecall&quot;:0.4018058690744921,&quot;rfPrecision&quot;:0.7510548523206751},{&quot;lrRecall&quot;:0.4582392776523702,&quot;lrPrecision&quot;:0.7602996254681648,&quot;rfRecall&quot;:0.40857787810383744,&quot;rfPrecision&quot;:0.7541666666666667},{&quot;lrRecall&quot;:0.4582392776523702,&quot;lrPrecision&quot;:0.7574626865671642,&quot;rfRecall&quot;:0.417607223476298,&quot;rfPrecision&quot;:0.7551020408163265},{&quot;lrRecall&quot;:0.4604966139954853,&quot;lrPrecision&quot;:0.758364312267658,&quot;rfRecall&quot;:0.4198645598194131,&quot;rfPrecision&quot;:0.7560975609756098},{&quot;lrRecall&quot;:0.4672686230248307,&quot;lrPrecision&quot;:0.7554744525547445,&quot;rfRecall&quot;:0.42437923250564336,&quot;rfPrecision&quot;:0.752},{&quot;lrRecall&quot;:0.4762979683972912,&quot;lrPrecision&quot;:0.7589928057553957,&quot;rfRecall&quot;:0.43115124153498874,&quot;rfPrecision&quot;:0.7490196078431373},{&quot;lrRecall&quot;:0.4853273137697517,&quot;lrPrecision&quot;:0.7543859649122807,&quot;rfRecall&quot;:0.43792325056433407,&quot;rfPrecision&quot;:0.7432950191570882},{&quot;lrRecall&quot;:0.48758465011286684,&quot;lrPrecision&quot;:0.7474048442906575,&quot;rfRecall&quot;:0.44243792325056436,&quot;rfPrecision&quot;:0.7452471482889734},{&quot;lrRecall&quot;:0.49435665914221216,&quot;lrPrecision&quot;:0.7423728813559322,&quot;rfRecall&quot;:0.44469525959367945,&quot;rfPrecision&quot;:0.7433962264150943},{&quot;lrRecall&quot;:0.5056433408577878,&quot;lrPrecision&quot;:0.7441860465116279,&quot;rfRecall&quot;:0.4492099322799097,&quot;rfPrecision&quot;:0.737037037037037},{&quot;lrRecall&quot;:0.5079006772009029,&quot;lrPrecision&quot;:0.7352941176470589,&quot;rfRecall&quot;:0.4492099322799097,&quot;rfPrecision&quot;:0.7343173431734318},{&quot;lrRecall&quot;:0.5079006772009029,&quot;lrPrecision&quot;:0.7281553398058253,&quot;rfRecall&quot;:0.4672686230248307,&quot;rfPrecision&quot;:0.7314487632508834},{&quot;lrRecall&quot;:0.510158013544018,&quot;lrPrecision&quot;:0.7220447284345048,&quot;rfRecall&quot;:0.4785553047404063,&quot;rfPrecision&quot;:0.7335640138408305},{&quot;lrRecall&quot;:0.5146726862302483,&quot;lrPrecision&quot;:0.7238095238095238,&quot;rfRecall&quot;:0.48306997742663654,&quot;rfPrecision&quot;:0.7353951890034365},{&quot;lrRecall&quot;:0.5146726862302483,&quot;lrPrecision&quot;:0.7215189873417721,&quot;rfRecall&quot;:0.48758465011286684,&quot;rfPrecision&quot;:0.7346938775510204},{&quot;lrRecall&quot;:0.5146726862302483,&quot;lrPrecision&quot;:0.7192429022082019,&quot;rfRecall&quot;:0.4898419864559819,&quot;rfPrecision&quot;:0.7306397306397306},{&quot;lrRecall&quot;:0.5146726862302483,&quot;lrPrecision&quot;:0.7169811320754716,&quot;rfRecall&quot;:0.49209932279909707,&quot;rfPrecision&quot;:0.7315436241610739},{&quot;lrRecall&quot;:0.5169300225733634,&quot;lrPrecision&quot;:0.715625,&quot;rfRecall&quot;:0.5304740406320542,&quot;rfPrecision&quot;:0.7186544342507645},{&quot;lrRecall&quot;:0.5169300225733634,&quot;lrPrecision&quot;:0.7111801242236024,&quot;rfRecall&quot;:0.5417607223476298,&quot;rfPrecision&quot;:0.718562874251497},{&quot;lrRecall&quot;:0.5169300225733634,&quot;lrPrecision&quot;:0.7089783281733746,&quot;rfRecall&quot;:0.5417607223476298,&quot;rfPrecision&quot;:0.7164179104477612},{&quot;lrRecall&quot;:0.5191873589164786,&quot;lrPrecision&quot;:0.7098765432098766,&quot;rfRecall&quot;:0.5440180586907449,&quot;rfPrecision&quot;:0.7172619047619048},{&quot;lrRecall&quot;:0.5327313769751693,&quot;lrPrecision&quot;:0.7023809523809523,&quot;rfRecall&quot;:0.54627539503386,&quot;rfPrecision&quot;:0.711764705882353},{&quot;lrRecall&quot;:0.5395033860045146,&quot;lrPrecision&quot;:0.6988304093567251,&quot;rfRecall&quot;:0.5485327313769752,&quot;rfPrecision&quot;:0.7043478260869566},{&quot;lrRecall&quot;:0.5440180586907449,&quot;lrPrecision&quot;:0.6985507246376812,&quot;rfRecall&quot;:0.5507900677200903,&quot;rfPrecision&quot;:0.6991404011461319},{&quot;lrRecall&quot;:0.5507900677200903,&quot;lrPrecision&quot;:0.7011494252873564,&quot;rfRecall&quot;:0.5507900677200903,&quot;rfPrecision&quot;:0.6971428571428572},{&quot;lrRecall&quot;:0.5507900677200903,&quot;lrPrecision&quot;:0.6991404011461319,&quot;rfRecall&quot;:0.5530474040632054,&quot;rfPrecision&quot;:0.698005698005698},{&quot;lrRecall&quot;:0.5507900677200903,&quot;lrPrecision&quot;:0.6873239436619718,&quot;rfRecall&quot;:0.5643340857787811,&quot;rfPrecision&quot;:0.6983240223463687},{&quot;lrRecall&quot;:0.5507900677200903,&quot;lrPrecision&quot;:0.6777777777777778,&quot;rfRecall&quot;:0.5665914221218962,&quot;rfPrecision&quot;:0.6952908587257618},{&quot;lrRecall&quot;:0.5507900677200903,&quot;lrPrecision&quot;:0.6759002770083102,&quot;rfRecall&quot;:0.5711060948081265,&quot;rfPrecision&quot;:0.6912568306010929},{&quot;lrRecall&quot;:0.5530474040632054,&quot;lrPrecision&quot;:0.6749311294765841,&quot;rfRecall&quot;:0.5711060948081265,&quot;rfPrecision&quot;:0.6837837837837838},{&quot;lrRecall&quot;:0.5575620767494357,&quot;lrPrecision&quot;:0.6693766937669376,&quot;rfRecall&quot;:0.5711060948081265,&quot;rfPrecision&quot;:0.6746666666666666},{&quot;lrRecall&quot;:0.5598194130925508,&quot;lrPrecision&quot;:0.6666666666666666,&quot;rfRecall&quot;:0.5959367945823928,&quot;rfPrecision&quot;:0.6666666666666666},{&quot;lrRecall&quot;:0.5598194130925508,&quot;lrPrecision&quot;:0.6648793565683646,&quot;rfRecall&quot;:0.5959367945823928,&quot;rfPrecision&quot;:0.6649874055415617},{&quot;lrRecall&quot;:0.5711060948081265,&quot;lrPrecision&quot;:0.6640419947506562,&quot;rfRecall&quot;:0.600451467268623,&quot;rfPrecision&quot;:0.6666666666666666},{&quot;lrRecall&quot;:0.5733634311512416,&quot;lrPrecision&quot;:0.6649214659685864,&quot;rfRecall&quot;:0.6027088036117382,&quot;rfPrecision&quot;:0.6675},{&quot;lrRecall&quot;:0.5733634311512416,&quot;lrPrecision&quot;:0.6614583333333334,&quot;rfRecall&quot;:0.6117381489841986,&quot;rfPrecision&quot;:0.6625916870415648},{&quot;lrRecall&quot;:0.5778781038374717,&quot;lrPrecision&quot;:0.661498708010336,&quot;rfRecall&quot;:0.6139954853273137,&quot;rfPrecision&quot;:0.6585956416464891},{&quot;lrRecall&quot;:0.5891647855530474,&quot;lrPrecision&quot;:0.6557788944723618,&quot;rfRecall&quot;:0.6139954853273137,&quot;rfPrecision&quot;:0.655421686746988},{&quot;lrRecall&quot;:0.600451467268623,&quot;lrPrecision&quot;:0.6348448687350835,&quot;rfRecall&quot;:0.6343115124153499,&quot;rfPrecision&quot;:0.655011655011655},{&quot;lrRecall&quot;:0.6049661399548533,&quot;lrPrecision&quot;:0.6305882352941177,&quot;rfRecall&quot;:0.6343115124153499,&quot;rfPrecision&quot;:0.6534883720930232},{&quot;lrRecall&quot;:0.6139954853273137,&quot;lrPrecision&quot;:0.628175519630485,&quot;rfRecall&quot;:0.6343115124153499,&quot;rfPrecision&quot;:0.6519721577726219},{&quot;lrRecall&quot;:0.6139954853273137,&quot;lrPrecision&quot;:0.6267281105990783,&quot;rfRecall&quot;:0.6343115124153499,&quot;rfPrecision&quot;:0.6474654377880185},{&quot;lrRecall&quot;:0.6162528216704289,&quot;lrPrecision&quot;:0.6247139588100686,&quot;rfRecall&quot;:0.6343115124153499,&quot;rfPrecision&quot;:0.6459770114942529},{&quot;lrRecall&quot;:0.6162528216704289,&quot;lrPrecision&quot;:0.621867881548975,&quot;rfRecall&quot;:0.636568848758465,&quot;rfPrecision&quot;:0.6453089244851259},{&quot;lrRecall&quot;:0.6162528216704289,&quot;lrPrecision&quot;:0.6204545454545455,&quot;rfRecall&quot;:0.6388261851015802,&quot;rfPrecision&quot;:0.6359550561797753},{&quot;lrRecall&quot;:0.618510158013544,&quot;lrPrecision&quot;:0.6213151927437641,&quot;rfRecall&quot;:0.6501128668171557,&quot;rfPrecision&quot;:0.6329670329670329},{&quot;lrRecall&quot;:0.618510158013544,&quot;lrPrecision&quot;:0.6199095022624435,&quot;rfRecall&quot;:0.6501128668171557,&quot;rfPrecision&quot;:0.631578947368421},{&quot;lrRecall&quot;:0.618510158013544,&quot;lrPrecision&quot;:0.618510158013544,&quot;rfRecall&quot;:0.654627539503386,&quot;rfPrecision&quot;:0.6277056277056277},{&quot;lrRecall&quot;:0.618510158013544,&quot;lrPrecision&quot;:0.6129753914988815,&quot;rfRecall&quot;:0.6613995485327314,&quot;rfPrecision&quot;:0.628755364806867},{&quot;lrRecall&quot;:0.6275395033860045,&quot;lrPrecision&quot;:0.6004319654427646,&quot;rfRecall&quot;:0.6613995485327314,&quot;rfPrecision&quot;:0.6274089935760171},{&quot;lrRecall&quot;:0.636568848758465,&quot;lrPrecision&quot;:0.5987261146496815,&quot;rfRecall&quot;:0.6613995485327314,&quot;rfPrecision&quot;:0.6260683760683761},{&quot;lrRecall&quot;:0.636568848758465,&quot;lrPrecision&quot;:0.5961945031712473,&quot;rfRecall&quot;:0.6636568848758465,&quot;rfPrecision&quot;:0.6268656716417911},{&quot;lrRecall&quot;:0.6388261851015802,&quot;lrPrecision&quot;:0.5945378151260504,&quot;rfRecall&quot;:0.6704288939051919,&quot;rfPrecision&quot;:0.6226415094339622},{&quot;lrRecall&quot;:0.6433408577878104,&quot;lrPrecision&quot;:0.5962343096234309,&quot;rfRecall&quot;:0.6794582392776524,&quot;rfPrecision&quot;:0.6130346232179226},{&quot;lrRecall&quot;:0.6433408577878104,&quot;lrPrecision&quot;:0.5900621118012422,&quot;rfRecall&quot;:0.6862302483069977,&quot;rfPrecision&quot;:0.6104417670682731},{&quot;lrRecall&quot;:0.6523702031602708,&quot;lrPrecision&quot;:0.5922131147540983,&quot;rfRecall&quot;:0.690744920993228,&quot;rfPrecision&quot;:0.6011787819253438},{&quot;lrRecall&quot;:0.6636568848758465,&quot;lrPrecision&quot;:0.5730994152046783,&quot;rfRecall&quot;:0.690744920993228,&quot;rfPrecision&quot;:0.598825831702544},{&quot;lrRecall&quot;:0.6817155756207675,&quot;lrPrecision&quot;:0.5708884688090737,&quot;rfRecall&quot;:0.690744920993228,&quot;rfPrecision&quot;:0.5964912280701754},{&quot;lrRecall&quot;:0.690744920993228,&quot;lrPrecision&quot;:0.5666666666666667,&quot;rfRecall&quot;:0.690744920993228,&quot;rfPrecision&quot;:0.5953307392996109},{&quot;lrRecall&quot;:0.6975169300225733,&quot;lrPrecision&quot;:0.5597826086956522,&quot;rfRecall&quot;:0.690744920993228,&quot;rfPrecision&quot;:0.5918762088974855},{&quot;lrRecall&quot;:0.7110609480812641,&quot;lrPrecision&quot;:0.5595026642984015,&quot;rfRecall&quot;:0.6930022573363431,&quot;rfPrecision&quot;:0.5892514395393474},{&quot;lrRecall&quot;:0.7178329571106095,&quot;lrPrecision&quot;:0.5588752196836555,&quot;rfRecall&quot;:0.6975169300225733,&quot;rfPrecision&quot;:0.5874524714828897},{&quot;lrRecall&quot;:0.7178329571106095,&quot;lrPrecision&quot;:0.5520833333333334,&quot;rfRecall&quot;:0.6997742663656885,&quot;rfPrecision&quot;:0.5849056603773585},{&quot;lrRecall&quot;:0.7200902934537246,&quot;lrPrecision&quot;:0.5519031141868512,&quot;rfRecall&quot;:0.7020316027088036,&quot;rfPrecision&quot;:0.5823970037453183},{&quot;lrRecall&quot;:0.7200902934537246,&quot;lrPrecision&quot;:0.5509499136442142,&quot;rfRecall&quot;:0.708803611738149,&quot;rfPrecision&quot;:0.5825602968460112},{&quot;lrRecall&quot;:0.7223476297968398,&quot;lrPrecision&quot;:0.5517241379310345,&quot;rfRecall&quot;:0.708803611738149,&quot;rfPrecision&quot;:0.5804066543438078},{&quot;lrRecall&quot;:0.7223476297968398,&quot;lrPrecision&quot;:0.548885077186964,&quot;rfRecall&quot;:0.7110609480812641,&quot;rfPrecision&quot;:0.580110497237569},{&quot;lrRecall&quot;:0.7246049661399548,&quot;lrPrecision&quot;:0.5496575342465754,&quot;rfRecall&quot;:0.7133182844243793,&quot;rfPrecision&quot;:0.5798165137614679},{&quot;lrRecall&quot;:0.7313769751693002,&quot;lrPrecision&quot;:0.5454545454545454,&quot;rfRecall&quot;:0.7133182844243793,&quot;rfPrecision&quot;:0.5776965265082267},{&quot;lrRecall&quot;:0.7381489841986456,&quot;lrPrecision&quot;:0.5440931780366056,&quot;rfRecall&quot;:0.7155756207674944,&quot;rfPrecision&quot;:0.5774134790528234},{&quot;lrRecall&quot;:0.7381489841986456,&quot;lrPrecision&quot;:0.5431893687707641,&quot;rfRecall&quot;:0.7313769751693002,&quot;rfPrecision&quot;:0.5754884547069272},{&quot;lrRecall&quot;:0.7381489841986456,&quot;lrPrecision&quot;:0.5413907284768212,&quot;rfRecall&quot;:0.7313769751693002,&quot;rfPrecision&quot;:0.574468085106383},{&quot;lrRecall&quot;:0.7426636568848759,&quot;lrPrecision&quot;:0.5411184210526315,&quot;rfRecall&quot;:0.7358916478555305,&quot;rfPrecision&quot;:0.5729349736379613},{&quot;lrRecall&quot;:0.7426636568848759,&quot;lrPrecision&quot;:0.5384615384615384,&quot;rfRecall&quot;:0.7381489841986456,&quot;rfPrecision&quot;:0.5736842105263158},{&quot;lrRecall&quot;:0.7426636568848759,&quot;lrPrecision&quot;:0.5375816993464052,&quot;rfRecall&quot;:0.7404063205417607,&quot;rfPrecision&quot;:0.574430823117338},{&quot;lrRecall&quot;:0.7494356659142212,&quot;lrPrecision&quot;:0.5329052969502408,&quot;rfRecall&quot;:0.7404063205417607,&quot;rfPrecision&quot;:0.5724258289703316},{&quot;lrRecall&quot;:0.7516930022573364,&quot;lrPrecision&quot;:0.5311004784688995,&quot;rfRecall&quot;:0.7426636568848759,&quot;rfPrecision&quot;:0.573170731707317},{&quot;lrRecall&quot;:0.7539503386004515,&quot;lrPrecision&quot;:0.5318471337579618,&quot;rfRecall&quot;:0.7494356659142212,&quot;rfPrecision&quot;:0.565587734241908},{&quot;lrRecall&quot;:0.7539503386004515,&quot;lrPrecision&quot;:0.5310015898251192,&quot;rfRecall&quot;:0.7516930022573364,&quot;rfPrecision&quot;:0.5634517766497462},{&quot;lrRecall&quot;:0.7562076749435666,&quot;lrPrecision&quot;:0.5309033280507132,&quot;rfRecall&quot;:0.7584650112866818,&quot;rfPrecision&quot;:0.5618729096989966},{&quot;lrRecall&quot;:0.7697516930022573,&quot;lrPrecision&quot;:0.5230061349693251,&quot;rfRecall&quot;:0.7629796839729119,&quot;rfPrecision&quot;:0.5633333333333334},{&quot;lrRecall&quot;:0.7720090293453724,&quot;lrPrecision&quot;:0.5221374045801527,&quot;rfRecall&quot;:0.7652370203160271,&quot;rfPrecision&quot;:0.5612582781456954},{&quot;lrRecall&quot;:0.7720090293453724,&quot;lrPrecision&quot;:0.5213414634146342,&quot;rfRecall&quot;:0.7720090293453724,&quot;rfPrecision&quot;:0.5615763546798029},{&quot;lrRecall&quot;:0.7720090293453724,&quot;lrPrecision&quot;:0.5205479452054794,&quot;rfRecall&quot;:0.7742663656884876,&quot;rfPrecision&quot;:0.5622950819672131},{&quot;lrRecall&quot;:0.7832957110609481,&quot;lrPrecision&quot;:0.5087976539589443,&quot;rfRecall&quot;:0.7742663656884876,&quot;rfPrecision&quot;:0.5613747954173486},{&quot;lrRecall&quot;:0.7855530474040632,&quot;lrPrecision&quot;:0.5087719298245614,&quot;rfRecall&quot;:0.7878103837471784,&quot;rfPrecision&quot;:0.553968253968254},{&quot;lrRecall&quot;:0.7945823927765236,&quot;lrPrecision&quot;:0.5064748201438849,&quot;rfRecall&quot;:0.7900677200902935,&quot;rfPrecision&quot;:0.5520504731861199},{&quot;lrRecall&quot;:0.7968397291196389,&quot;lrPrecision&quot;:0.5064562410329986,&quot;rfRecall&quot;:0.7945823927765236,&quot;rfPrecision&quot;:0.5474339035769828},{&quot;lrRecall&quot;:0.7968397291196389,&quot;lrPrecision&quot;:0.5021337126600285,&quot;rfRecall&quot;:0.7945823927765236,&quot;rfPrecision&quot;:0.544891640866873},{&quot;lrRecall&quot;:0.7990970654627539,&quot;lrPrecision&quot;:0.4978902953586498,&quot;rfRecall&quot;:0.7968397291196389,&quot;rfPrecision&quot;:0.5447530864197531},{&quot;lrRecall&quot;:0.801354401805869,&quot;lrPrecision&quot;:0.49859550561797755,&quot;rfRecall&quot;:0.7968397291196389,&quot;rfPrecision&quot;:0.5430769230769231},{&quot;lrRecall&quot;:0.8036117381489842,&quot;lrPrecision&quot;:0.4958217270194986,&quot;rfRecall&quot;:0.7968397291196389,&quot;rfPrecision&quot;:0.5397553516819572},{&quot;lrRecall&quot;:0.8036117381489842,&quot;lrPrecision&quot;:0.49375866851595007,&quot;rfRecall&quot;:0.801354401805869,&quot;rfPrecision&quot;:0.5395136778115501},{&quot;lrRecall&quot;:0.8036117381489842,&quot;lrPrecision&quot;:0.49239280774550487,&quot;rfRecall&quot;:0.8058690744920993,&quot;rfPrecision&quot;:0.5352323838080959},{&quot;lrRecall&quot;:0.8036117381489842,&quot;lrPrecision&quot;:0.4910344827586207,&quot;rfRecall&quot;:0.8058690744920993,&quot;rfPrecision&quot;:0.5328358208955224},{&quot;lrRecall&quot;:0.8036117381489842,&quot;lrPrecision&quot;:0.48700410396716826,&quot;rfRecall&quot;:0.8081264108352144,&quot;rfPrecision&quot;:0.5303703703703704},{&quot;lrRecall&quot;:0.8081264108352144,&quot;lrPrecision&quot;:0.48575305291723203,&quot;rfRecall&quot;:0.8081264108352144,&quot;rfPrecision&quot;:0.5295857988165681},{&quot;lrRecall&quot;:0.8081264108352144,&quot;lrPrecision&quot;:0.48247978436657685,&quot;rfRecall&quot;:0.8081264108352144,&quot;rfPrecision&quot;:0.5203488372093024},{&quot;lrRecall&quot;:0.8081264108352144,&quot;lrPrecision&quot;:0.48183041722745623,&quot;rfRecall&quot;:0.8081264108352144,&quot;rfPrecision&quot;:0.518840579710145},{&quot;lrRecall&quot;:0.8103837471783296,&quot;lrPrecision&quot;:0.4812332439678284,&quot;rfRecall&quot;:0.8081264108352144,&quot;rfPrecision&quot;:0.5180897250361794},{&quot;lrRecall&quot;:0.8126410835214447,&quot;lrPrecision&quot;:0.48128342245989303,&quot;rfRecall&quot;:0.8126410835214447,&quot;rfPrecision&quot;:0.5164992826398852},{&quot;lrRecall&quot;:0.8126410835214447,&quot;lrPrecision&quot;:0.48064085447263016,&quot;rfRecall&quot;:0.8239277652370203,&quot;rfPrecision&quot;:0.511921458625526},{&quot;lrRecall&quot;:0.8148984198645598,&quot;lrPrecision&quot;:0.47941567065073043,&quot;rfRecall&quot;:0.8261851015801355,&quot;rfPrecision&quot;:0.5041322314049587},{&quot;lrRecall&quot;:0.8148984198645598,&quot;lrPrecision&quot;:0.47688243064729197,&quot;rfRecall&quot;:0.835214446952596,&quot;rfPrecision&quot;:0.5013550135501355},{&quot;lrRecall&quot;:0.8171557562076749,&quot;lrPrecision&quot;:0.4769433465085639,&quot;rfRecall&quot;:0.835214446952596,&quot;rfPrecision&quot;:0.5006765899864682},{&quot;lrRecall&quot;:0.8239277652370203,&quot;lrPrecision&quot;:0.47464239271781533,&quot;rfRecall&quot;:0.835214446952596,&quot;rfPrecision&quot;:0.4939919893190921},{&quot;lrRecall&quot;:0.8239277652370203,&quot;lrPrecision&quot;:0.47096774193548385,&quot;rfRecall&quot;:0.837471783295711,&quot;rfPrecision&quot;:0.49269588313413015},{&quot;lrRecall&quot;:0.8239277652370203,&quot;lrPrecision&quot;:0.4697554697554698,&quot;rfRecall&quot;:0.8510158013544018,&quot;rfPrecision&quot;:0.4928104575163399},{&quot;lrRecall&quot;:0.8239277652370203,&quot;lrPrecision&quot;:0.4685494223363286,&quot;rfRecall&quot;:0.8510158013544018,&quot;rfPrecision&quot;:0.4915254237288136},{&quot;lrRecall&quot;:0.8261851015801355,&quot;lrPrecision&quot;:0.4680306905370844,&quot;rfRecall&quot;:0.8532731376975169,&quot;rfPrecision&quot;:0.4896373056994819},{&quot;lrRecall&quot;:0.8284424379232506,&quot;lrPrecision&quot;:0.46455696202531643,&quot;rfRecall&quot;:0.8532731376975169,&quot;rfPrecision&quot;:0.4890038809831824},{&quot;lrRecall&quot;:0.8284424379232506,&quot;lrPrecision&quot;:0.45760598503740646,&quot;rfRecall&quot;:0.8555304740406321,&quot;rfPrecision&quot;:0.4884020618556701},{&quot;lrRecall&quot;:0.8284424379232506,&quot;lrPrecision&quot;:0.45703611457036114,&quot;rfRecall&quot;:0.8645598194130926,&quot;rfPrecision&quot;:0.48481012658227846},{&quot;lrRecall&quot;:0.835214446952596,&quot;lrPrecision&quot;:0.4539877300613497,&quot;rfRecall&quot;:0.8645598194130926,&quot;rfPrecision&quot;:0.48419721871049304},{&quot;lrRecall&quot;:0.835214446952596,&quot;lrPrecision&quot;:0.45232273838630804,&quot;rfRecall&quot;:0.8668171557562077,&quot;rfPrecision&quot;:0.4830188679245283},{&quot;lrRecall&quot;:0.8397291196388262,&quot;lrPrecision&quot;:0.45255474452554745,&quot;rfRecall&quot;:0.871331828442438,&quot;rfPrecision&quot;:0.4825},{&quot;lrRecall&quot;:0.8442437923250564,&quot;lrPrecision&quot;:0.45223700120918986,&quot;rfRecall&quot;:0.871331828442438,&quot;rfPrecision&quot;:0.48129675810473815},{&quot;lrRecall&quot;:0.8442437923250564,&quot;lrPrecision&quot;:0.45169082125603865,&quot;rfRecall&quot;:0.871331828442438,&quot;rfPrecision&quot;:0.4806973848069738},{&quot;lrRecall&quot;:0.8465011286681715,&quot;lrPrecision&quot;:0.45235223160434257,&quot;rfRecall&quot;:0.8781038374717833,&quot;rfPrecision&quot;:0.47613219094247244},{&quot;lrRecall&quot;:0.8510158013544018,&quot;lrPrecision&quot;:0.4498806682577566,&quot;rfRecall&quot;:0.8803611738148984,&quot;rfPrecision&quot;:0.47619047619047616},{&quot;lrRecall&quot;:0.8510158013544018,&quot;lrPrecision&quot;:0.4488095238095238,&quot;rfRecall&quot;:0.8803611738148984,&quot;rfPrecision&quot;:0.47560975609756095},{&quot;lrRecall&quot;:0.8510158013544018,&quot;lrPrecision&quot;:0.4477434679334917,&quot;rfRecall&quot;:0.8803611738148984,&quot;rfPrecision&quot;:0.47503045066991473},{&quot;lrRecall&quot;:0.8510158013544018,&quot;lrPrecision&quot;:0.4466824644549763,&quot;rfRecall&quot;:0.8826185101580135,&quot;rfPrecision&quot;:0.47451456310679613},{&quot;lrRecall&quot;:0.8555304740406321,&quot;lrPrecision&quot;:0.44588235294117645,&quot;rfRecall&quot;:0.8826185101580135,&quot;rfPrecision&quot;:0.47336561743341404},{&quot;lrRecall&quot;:0.8555304740406321,&quot;lrPrecision&quot;:0.44535840188014103,&quot;rfRecall&quot;:0.8826185101580135,&quot;rfPrecision&quot;:0.47165259348612787},{&quot;lrRecall&quot;:0.8555304740406321,&quot;lrPrecision&quot;:0.44431418522860494,&quot;rfRecall&quot;:0.8826185101580135,&quot;rfPrecision&quot;:0.4710843373493976},{&quot;lrRecall&quot;:0.8555304740406321,&quot;lrPrecision&quot;:0.4417249417249417,&quot;rfRecall&quot;:0.8848758465011287,&quot;rfPrecision&quot;:0.463905325443787},{&quot;lrRecall&quot;:0.8555304740406321,&quot;lrPrecision&quot;:0.44069767441860463,&quot;rfRecall&quot;:0.8871331828442438,&quot;rfPrecision&quot;:0.45857642940490084},{&quot;lrRecall&quot;:0.8577878103837472,&quot;lrPrecision&quot;:0.440324449594438,&quot;rfRecall&quot;:0.8871331828442438,&quot;rfPrecision&quot;:0.4569767441860465},{&quot;lrRecall&quot;:0.8600451467268623,&quot;lrPrecision&quot;:0.4399538106235566,&quot;rfRecall&quot;:0.8893905191873589,&quot;rfPrecision&quot;:0.4544405997693195},{&quot;lrRecall&quot;:0.8600451467268623,&quot;lrPrecision&quot;:0.43944636678200694,&quot;rfRecall&quot;:0.891647855530474,&quot;rfPrecision&quot;:0.4540229885057471},{&quot;lrRecall&quot;:0.8668171557562077,&quot;lrPrecision&quot;:0.43686006825938567,&quot;rfRecall&quot;:0.891647855530474,&quot;rfPrecision&quot;:0.45298165137614677},{&quot;lrRecall&quot;:0.8803611738148984,&quot;lrPrecision&quot;:0.4234527687296417,&quot;rfRecall&quot;:0.8961625282167043,&quot;rfPrecision&quot;:0.44808126410835214},{&quot;lrRecall&quot;:0.8826185101580135,&quot;lrPrecision&quot;:0.4236186348862405,&quot;rfRecall&quot;:0.8961625282167043,&quot;rfPrecision&quot;:0.447576099210823},{&quot;lrRecall&quot;:0.8826185101580135,&quot;lrPrecision&quot;:0.4204301075268817,&quot;rfRecall&quot;:0.9006772009029346,&quot;rfPrecision&quot;:0.44680851063829785},{&quot;lrRecall&quot;:0.8826185101580135,&quot;lrPrecision&quot;:0.41862955032119914,&quot;rfRecall&quot;:0.90744920993228,&quot;rfPrecision&quot;:0.4407894736842105},{&quot;lrRecall&quot;:0.8826185101580135,&quot;lrPrecision&quot;:0.4168443496801706,&quot;rfRecall&quot;:0.90744920993228,&quot;rfPrecision&quot;:0.43982494529540483},{&quot;lrRecall&quot;:0.8826185101580135,&quot;lrPrecision&quot;:0.41595744680851066,&quot;rfRecall&quot;:0.90744920993228,&quot;rfPrecision&quot;:0.43790849673202614},{&quot;lrRecall&quot;:0.8826185101580135,&quot;lrPrecision&quot;:0.41375661375661377,&quot;rfRecall&quot;:0.909706546275395,&quot;rfPrecision&quot;:0.4380434782608696},{&quot;lrRecall&quot;:0.8826185101580135,&quot;lrPrecision&quot;:0.41157894736842104,&quot;rfRecall&quot;:0.909706546275395,&quot;rfPrecision&quot;:0.43567567567567567},{&quot;lrRecall&quot;:0.8826185101580135,&quot;lrPrecision&quot;:0.4107142857142857,&quot;rfRecall&quot;:0.9142212189616253,&quot;rfPrecision&quot;:0.43501611170784105},{&quot;lrRecall&quot;:0.8848758465011287,&quot;lrPrecision&quot;:0.40790842872008326,&quot;rfRecall&quot;:0.9142212189616253,&quot;rfPrecision&quot;:0.4340836012861736},{&quot;lrRecall&quot;:0.8848758465011287,&quot;lrPrecision&quot;:0.4074844074844075,&quot;rfRecall&quot;:0.9142212189616253,&quot;rfPrecision&quot;:0.4336188436830835},{&quot;lrRecall&quot;:0.891647855530474,&quot;lrPrecision&quot;:0.40512820512820513,&quot;rfRecall&quot;:0.9142212189616253,&quot;rfPrecision&quot;:0.4290254237288136},{&quot;lrRecall&quot;:0.891647855530474,&quot;lrPrecision&quot;:0.4047131147540984,&quot;rfRecall&quot;:0.9142212189616253,&quot;rfPrecision&quot;:0.42857142857142855},{&quot;lrRecall&quot;:0.8939051918735892,&quot;lrPrecision&quot;:0.39919354838709675,&quot;rfRecall&quot;:0.9164785553047404,&quot;rfPrecision&quot;:0.4282700421940928},{&quot;lrRecall&quot;:0.8984198645598194,&quot;lrPrecision&quot;:0.39601990049751246,&quot;rfRecall&quot;:0.9164785553047404,&quot;rfPrecision&quot;:0.4260230849947534},{&quot;lrRecall&quot;:0.9006772009029346,&quot;lrPrecision&quot;:0.3966202783300199,&quot;rfRecall&quot;:0.9164785553047404,&quot;rfPrecision&quot;:0.42203742203742206},{&quot;lrRecall&quot;:0.9006772009029346,&quot;lrPrecision&quot;:0.39622641509433965,&quot;rfRecall&quot;:0.9187358916478555,&quot;rfPrecision&quot;:0.4200206398348813},{&quot;lrRecall&quot;:0.9006772009029346,&quot;lrPrecision&quot;:0.3958333333333333,&quot;rfRecall&quot;:0.9232505643340858,&quot;rfPrecision&quot;:0.419917864476386},{&quot;lrRecall&quot;:0.9051918735891648,&quot;lrPrecision&quot;:0.39352306182531893,&quot;rfRecall&quot;:0.927765237020316,&quot;rfPrecision&quot;:0.4176829268292683},{&quot;lrRecall&quot;:0.90744920993228,&quot;lrPrecision&quot;:0.3933463796477495,&quot;rfRecall&quot;:0.927765237020316,&quot;rfPrecision&quot;:0.4159919028340081},{&quot;lrRecall&quot;:0.90744920993228,&quot;lrPrecision&quot;:0.392578125,&quot;rfRecall&quot;:0.9300225733634312,&quot;rfPrecision&quot;:0.4099502487562189},{&quot;lrRecall&quot;:0.9119638826185101,&quot;lrPrecision&quot;:0.3918525703200776,&quot;rfRecall&quot;:0.9300225733634312,&quot;rfPrecision&quot;:0.40913604766633566},{&quot;lrRecall&quot;:0.9142212189616253,&quot;lrPrecision&quot;:0.3920619554695063,&quot;rfRecall&quot;:0.9322799097065463,&quot;rfPrecision&quot;:0.40810276679841895},{&quot;lrRecall&quot;:0.9142212189616253,&quot;lrPrecision&quot;:0.3916827852998066,&quot;rfRecall&quot;:0.9367945823927766,&quot;rfPrecision&quot;:0.408062930186824},{&quot;lrRecall&quot;:0.9142212189616253,&quot;lrPrecision&quot;:0.3886756238003839,&quot;rfRecall&quot;:0.9367945823927766,&quot;rfPrecision&quot;:0.4072620215897939},{&quot;lrRecall&quot;:0.9142212189616253,&quot;lrPrecision&quot;:0.3883029721955896,&quot;rfRecall&quot;:0.9390519187358917,&quot;rfPrecision&quot;:0.40784313725490196},{&quot;lrRecall&quot;:0.9164785553047404,&quot;lrPrecision&quot;:0.38519924098671726,&quot;rfRecall&quot;:0.9413092550790068,&quot;rfPrecision&quot;:0.40406976744186046},{&quot;lrRecall&quot;:0.9164785553047404,&quot;lrPrecision&quot;:0.38446969696969696,&quot;rfRecall&quot;:0.9435665914221218,&quot;rfPrecision&quot;:0.40425531914893614},{&quot;lrRecall&quot;:0.9164785553047404,&quot;lrPrecision&quot;:0.3841059602649007,&quot;rfRecall&quot;:0.9435665914221218,&quot;rfPrecision&quot;:0.40192307692307694},{&quot;lrRecall&quot;:0.9187358916478555,&quot;lrPrecision&quot;:0.3846880907372401,&quot;rfRecall&quot;:0.945823927765237,&quot;rfPrecision&quot;:0.39866793529971456},{&quot;lrRecall&quot;:0.9187358916478555,&quot;lrPrecision&quot;:0.3839622641509434,&quot;rfRecall&quot;:0.945823927765237,&quot;rfPrecision&quot;:0.39791073124406456},{&quot;lrRecall&quot;:0.9209932279909706,&quot;lrPrecision&quot;:0.38381937911571024,&quot;rfRecall&quot;:0.945823927765237,&quot;rfPrecision&quot;:0.39753320683111953},{&quot;lrRecall&quot;:0.9209932279909706,&quot;lrPrecision&quot;:0.38345864661654133,&quot;rfRecall&quot;:0.945823927765237,&quot;rfPrecision&quot;:0.39678030303030304},{&quot;lrRecall&quot;:0.9209932279909706,&quot;lrPrecision&quot;:0.38202247191011235,&quot;rfRecall&quot;:0.945823927765237,&quot;rfPrecision&quot;:0.3960302457466919},{&quot;lrRecall&quot;:0.9209932279909706,&quot;lrPrecision&quot;:0.3816651075771749,&quot;rfRecall&quot;:0.9480812641083521,&quot;rfPrecision&quot;:0.3954802259887006},{&quot;lrRecall&quot;:0.9209932279909706,&quot;lrPrecision&quot;:0.3805970149253731,&quot;rfRecall&quot;:0.9525959367945824,&quot;rfPrecision&quot;:0.3932898415657036},{&quot;lrRecall&quot;:0.9209932279909706,&quot;lrPrecision&quot;:0.37988826815642457,&quot;rfRecall&quot;:0.9525959367945824,&quot;rfPrecision&quot;:0.3925581395348837},{&quot;lrRecall&quot;:0.9232505643340858,&quot;lrPrecision&quot;:0.37765466297322253,&quot;rfRecall&quot;:0.9525959367945824,&quot;rfPrecision&quot;:0.3914656771799629},{&quot;lrRecall&quot;:0.9232505643340858,&quot;lrPrecision&quot;:0.3759191176470588,&quot;rfRecall&quot;:0.9548532731376975,&quot;rfPrecision&quot;:0.39202965708989806},{&quot;lrRecall&quot;:0.9255079006772009,&quot;lrPrecision&quot;:0.37272727272727274,&quot;rfRecall&quot;:0.9548532731376975,&quot;rfPrecision&quot;:0.39022140221402213},{&quot;lrRecall&quot;:0.9255079006772009,&quot;lrPrecision&quot;:0.371713508612874,&quot;rfRecall&quot;:0.9571106094808126,&quot;rfPrecision&quot;:0.3830171635049684},{&quot;lrRecall&quot;:0.9255079006772009,&quot;lrPrecision&quot;:0.37037037037037035,&quot;rfRecall&quot;:0.9571106094808126,&quot;rfPrecision&quot;:0.3823264201983769},{&quot;lrRecall&quot;:0.927765237020316,&quot;lrPrecision&quot;:0.3676207513416816,&quot;rfRecall&quot;:0.9571106094808126,&quot;rfPrecision&quot;:0.38198198198198197},{&quot;lrRecall&quot;:0.9300225733634312,&quot;lrPrecision&quot;:0.3617208077260755,&quot;rfRecall&quot;:0.9571106094808126,&quot;rfPrecision&quot;:0.381294964028777},{&quot;lrRecall&quot;:0.9300225733634312,&quot;lrPrecision&quot;:0.3607705779334501,&quot;rfRecall&quot;:0.9571106094808126,&quot;rfPrecision&quot;:0.38061041292639136},{&quot;lrRecall&quot;:0.9345372460496614,&quot;lrPrecision&quot;:0.3618881118881119,&quot;rfRecall&quot;:0.9593679458239278,&quot;rfPrecision&quot;:0.3787878787878788},{&quot;lrRecall&quot;:0.9345372460496614,&quot;lrPrecision&quot;:0.3615720524017467,&quot;rfRecall&quot;:0.9593679458239278,&quot;rfPrecision&quot;:0.3784505788067676},{&quot;lrRecall&quot;:0.9345372460496614,&quot;lrPrecision&quot;:0.3612565445026178,&quot;rfRecall&quot;:0.9593679458239278,&quot;rfPrecision&quot;:0.37511032656663723},{&quot;lrRecall&quot;:0.9345372460496614,&quot;lrPrecision&quot;:0.360313315926893,&quot;rfRecall&quot;:0.9593679458239278,&quot;rfPrecision&quot;:0.3737906772207564},{&quot;lrRecall&quot;:0.9367945823927766,&quot;lrPrecision&quot;:0.3599306157849089,&quot;rfRecall&quot;:0.9593679458239278,&quot;rfPrecision&quot;:0.37280701754385964},{&quot;lrRecall&quot;:0.9367945823927766,&quot;lrPrecision&quot;:0.3596187175043328,&quot;rfRecall&quot;:0.9593679458239278,&quot;rfPrecision&quot;:0.3654342218400688},{&quot;lrRecall&quot;:0.9367945823927766,&quot;lrPrecision&quot;:0.35899653979238755,&quot;rfRecall&quot;:0.9593679458239278,&quot;rfPrecision&quot;:0.3651202749140893},{&quot;lrRecall&quot;:0.9390519187358917,&quot;lrPrecision&quot;:0.35344095157179267,&quot;rfRecall&quot;:0.9593679458239278,&quot;rfPrecision&quot;:0.36231884057971014},{&quot;lrRecall&quot;:0.9390519187358917,&quot;lrPrecision&quot;:0.35075885328836426,&quot;rfRecall&quot;:0.963882618510158,&quot;rfPrecision&quot;:0.3630952380952381},{&quot;lrRecall&quot;:0.9390519187358917,&quot;lrPrecision&quot;:0.3501683501683502,&quot;rfRecall&quot;:0.9661399548532731,&quot;rfPrecision&quot;:0.36209813874788493},{&quot;lrRecall&quot;:0.9390519187358917,&quot;lrPrecision&quot;:0.34987384356602186,&quot;rfRecall&quot;:0.9661399548532731,&quot;rfPrecision&quot;:0.36118143459915614},{&quot;lrRecall&quot;:0.9413092550790068,&quot;lrPrecision&quot;:0.3486622073578595,&quot;rfRecall&quot;:0.9683972911963883,&quot;rfPrecision&quot;:0.3602015113350126},{&quot;lrRecall&quot;:0.9413092550790068,&quot;lrPrecision&quot;:0.347210657785179,&quot;rfRecall&quot;:0.9683972911963883,&quot;rfPrecision&quot;:0.35899581589958157},{&quot;lrRecall&quot;:0.9413092550790068,&quot;lrPrecision&quot;:0.3469217970049917,&quot;rfRecall&quot;:0.9683972911963883,&quot;rfPrecision&quot;:0.358695652173913},{&quot;lrRecall&quot;:0.9413092550790068,&quot;lrPrecision&quot;:0.34577114427860695,&quot;rfRecall&quot;:0.9683972911963883,&quot;rfPrecision&quot;:0.35631229235880396},{&quot;lrRecall&quot;:0.9435665914221218,&quot;lrPrecision&quot;:0.3446001648804617,&quot;rfRecall&quot;:0.9706546275395034,&quot;rfPrecision&quot;:0.35625517812758906},{&quot;lrRecall&quot;:0.9435665914221218,&quot;lrPrecision&quot;:0.34346754313886607,&quot;rfRecall&quot;:0.9706546275395034,&quot;rfPrecision&quot;:0.3550784475639967},{&quot;lrRecall&quot;:0.9435665914221218,&quot;lrPrecision&quot;:0.34206219312602293,&quot;rfRecall&quot;:0.9751693002257337,&quot;rfPrecision&quot;:0.3540983606557377},{&quot;lrRecall&quot;:0.9435665914221218,&quot;lrPrecision&quot;:0.34039087947882735,&quot;rfRecall&quot;:0.9751693002257337,&quot;rfPrecision&quot;:0.3538083538083538},{&quot;lrRecall&quot;:0.9435665914221218,&quot;lrPrecision&quot;:0.33983739837398375,&quot;rfRecall&quot;:0.9751693002257337,&quot;rfPrecision&quot;:0.35322976287816843},{&quot;lrRecall&quot;:0.9435665914221218,&quot;lrPrecision&quot;:0.33901054339010545,&quot;rfRecall&quot;:0.9751693002257337,&quot;rfPrecision&quot;:0.35294117647058826},{&quot;lrRecall&quot;:0.9435665914221218,&quot;lrPrecision&quot;:0.33736884584342214,&quot;rfRecall&quot;:0.9751693002257337,&quot;rfPrecision&quot;:0.3523654159869494},{&quot;lrRecall&quot;:0.9435665914221218,&quot;lrPrecision&quot;:0.3352044907778669,&quot;rfRecall&quot;:0.9751693002257337,&quot;rfPrecision&quot;:0.35121951219512193},{&quot;lrRecall&quot;:0.945823927765237,&quot;lrPrecision&quot;:0.33466453674121405,&quot;rfRecall&quot;:0.9751693002257337,&quot;rfPrecision&quot;:0.34810636583400484},{&quot;lrRecall&quot;:0.945823927765237,&quot;lrPrecision&quot;:0.33413078149920256,&quot;rfRecall&quot;:0.9774266365688488,&quot;rfPrecision&quot;:0.3464},{&quot;lrRecall&quot;:0.9480812641083521,&quot;lrPrecision&quot;:0.3330689928628073,&quot;rfRecall&quot;:0.9774266365688488,&quot;rfPrecision&quot;:0.34612310151878495},{&quot;lrRecall&quot;:0.9480812641083521,&quot;lrPrecision&quot;:0.332541567695962,&quot;rfRecall&quot;:0.9774266365688488,&quot;rfPrecision&quot;:0.3447452229299363},{&quot;lrRecall&quot;:0.9480812641083521,&quot;lrPrecision&quot;:0.32967032967032966,&quot;rfRecall&quot;:0.9774266365688488,&quot;rfPrecision&quot;:0.34337827121332276},{&quot;lrRecall&quot;:0.9503386004514672,&quot;lrPrecision&quot;:0.3299373040752351,&quot;rfRecall&quot;:0.9774266365688488,&quot;rfPrecision&quot;:0.33987441130298274},{&quot;lrRecall&quot;:0.9503386004514672,&quot;lrPrecision&quot;:0.32967893500391543,&quot;rfRecall&quot;:0.9774266365688488,&quot;rfPrecision&quot;:0.33828125},{&quot;lrRecall&quot;:0.9503386004514672,&quot;lrPrecision&quot;:0.328393135725429,&quot;rfRecall&quot;:0.9774266365688488,&quot;rfPrecision&quot;:0.33801717408274784},{&quot;lrRecall&quot;:0.9503386004514672,&quot;lrPrecision&quot;:0.3273716951788491,&quot;rfRecall&quot;:0.9774266365688488,&quot;rfPrecision&quot;:0.3369649805447471},{&quot;lrRecall&quot;:0.9503386004514672,&quot;lrPrecision&quot;:0.3271173271173271,&quot;rfRecall&quot;:0.9774266365688488,&quot;rfPrecision&quot;:0.3351393188854489},{&quot;lrRecall&quot;:0.9503386004514672,&quot;lrPrecision&quot;:0.3268633540372671,&quot;rfRecall&quot;:0.9774266365688488,&quot;rfPrecision&quot;:0.33462132921174653},{&quot;lrRecall&quot;:0.9503386004514672,&quot;lrPrecision&quot;:0.32610379550735863,&quot;rfRecall&quot;:0.9774266365688488,&quot;rfPrecision&quot;:0.3330769230769231},{&quot;lrRecall&quot;:0.9503386004514672,&quot;lrPrecision&quot;:0.3235972328977709,&quot;rfRecall&quot;:0.9774266365688488,&quot;rfPrecision&quot;:0.3318007662835249},{&quot;lrRecall&quot;:0.9503386004514672,&quot;lrPrecision&quot;:0.3226053639846743,&quot;rfRecall&quot;:0.9774266365688488,&quot;rfPrecision&quot;:0.33003048780487804},{&quot;lrRecall&quot;:0.9503386004514672,&quot;lrPrecision&quot;:0.32186544342507645,&quot;rfRecall&quot;:0.9796839729119639,&quot;rfPrecision&quot;:0.32978723404255317},{&quot;lrRecall&quot;:0.9503386004514672,&quot;lrPrecision&quot;:0.3191811978771797,&quot;rfRecall&quot;:0.9796839729119639,&quot;rfPrecision&quot;:0.3290371493555724},{&quot;lrRecall&quot;:0.9503386004514672,&quot;lrPrecision&quot;:0.3170180722891566,&quot;rfRecall&quot;:0.9796839729119639,&quot;rfPrecision&quot;:0.32558139534883723},{&quot;lrRecall&quot;:0.9525959367945824,&quot;lrPrecision&quot;:0.31753197893152746,&quot;rfRecall&quot;:0.9796839729119639,&quot;rfPrecision&quot;:0.3250936329588015},{&quot;lrRecall&quot;:0.9525959367945824,&quot;lrPrecision&quot;:0.31516056758775207,&quot;rfRecall&quot;:0.9796839729119639,&quot;rfPrecision&quot;:0.32363907531692765},{&quot;lrRecall&quot;:0.9525959367945824,&quot;lrPrecision&quot;:0.3137546468401487,&quot;rfRecall&quot;:0.9796839729119639,&quot;rfPrecision&quot;:0.3219584569732938},{&quot;lrRecall&quot;:0.9525959367945824,&quot;lrPrecision&quot;:0.3135215453194651,&quot;rfRecall&quot;:0.9796839729119639,&quot;rfPrecision&quot;:0.3205317577548006},{&quot;lrRecall&quot;:0.9525959367945824,&quot;lrPrecision&quot;:0.31328878990348924,&quot;rfRecall&quot;:0.9796839729119639,&quot;rfPrecision&quot;:0.31935246504782927},{&quot;lrRecall&quot;:0.9548532731376975,&quot;lrPrecision&quot;:0.3131014063656551,&quot;rfRecall&quot;:0.9796839729119639,&quot;rfPrecision&quot;:0.31655725747629465},{&quot;lrRecall&quot;:0.9571106094808126,&quot;lrPrecision&quot;:0.31268436578171094,&quot;rfRecall&quot;:0.9796839729119639,&quot;rfPrecision&quot;:0.3160961398397669},{&quot;lrRecall&quot;:0.9571106094808126,&quot;lrPrecision&quot;:0.3124539425202653,&quot;rfRecall&quot;:0.9796839729119639,&quot;rfPrecision&quot;:0.3158660844250364},{&quot;lrRecall&quot;:0.9571106094808126,&quot;lrPrecision&quot;:0.31062271062271063,&quot;rfRecall&quot;:0.9796839729119639,&quot;rfPrecision&quot;:0.3151779230210603},{&quot;lrRecall&quot;:0.9571106094808126,&quot;lrPrecision&quot;:0.3076923076923077,&quot;rfRecall&quot;:0.981941309255079,&quot;rfPrecision&quot;:0.3140794223826715},{&quot;lrRecall&quot;:0.9571106094808126,&quot;lrPrecision&quot;:0.3074691805656273,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.31457431457431456},{&quot;lrRecall&quot;:0.9593679458239278,&quot;lrPrecision&quot;:0.30774800868935553,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.3143475126171593},{&quot;lrRecall&quot;:0.9593679458239278,&quot;lrPrecision&quot;:0.3057553956834532,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.31366906474820144},{&quot;lrRecall&quot;:0.9593679458239278,&quot;lrPrecision&quot;:0.3050969131371141,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.31344356578001437},{&quot;lrRecall&quot;:0.9593679458239278,&quot;lrPrecision&quot;:0.3042233357193987,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.31299353912419237},{&quot;lrRecall&quot;:0.9593679458239278,&quot;lrPrecision&quot;:0.3037884203002144,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.31187410586552217},{&quot;lrRecall&quot;:0.9593679458239278,&quot;lrPrecision&quot;:0.3027065527065527,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.31054131054131057},{&quot;lrRecall&quot;:0.9616252821670429,&quot;lrPrecision&quot;:0.30191353649893693,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.3103202846975089},{&quot;lrRecall&quot;:0.9616252821670429,&quot;lrPrecision&quot;:0.3012729844413013,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.310099573257468},{&quot;lrRecall&quot;:0.9616252821670429,&quot;lrPrecision&quot;:0.30021141649048627,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.3096590909090909},{&quot;lrRecall&quot;:0.9616252821670429,&quot;lrPrecision&quot;:0.29936753338018274,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.3085633404104742},{&quot;lrRecall&quot;:0.9616252821670429,&quot;lrPrecision&quot;:0.296038915913829,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.30834512022630833},{&quot;lrRecall&quot;:0.9616252821670429,&quot;lrPrecision&quot;:0.29521829521829523,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.30575035063113604},{&quot;lrRecall&quot;:0.9616252821670429,&quot;lrPrecision&quot;:0.2948096885813149,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.30468204053109715},{&quot;lrRecall&quot;:0.9616252821670429,&quot;lrPrecision&quot;:0.29440221147201107,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.30404463040446306},{&quot;lrRecall&quot;:0.963882618510158,&quot;lrPrecision&quot;:0.29427980702963474,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.30383275261324044},{&quot;lrRecall&quot;:0.963882618510158,&quot;lrPrecision&quot;:0.2934707903780069,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.30214830214830213},{&quot;lrRecall&quot;:0.963882618510158,&quot;lrPrecision&quot;:0.291268758526603,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.3017301038062284},{&quot;lrRecall&quot;:0.963882618510158,&quot;lrPrecision&quot;:0.2904761904761905,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.301521438450899},{&quot;lrRecall&quot;:0.963882618510158,&quot;lrPrecision&quot;:0.28968792401628224,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.3002754820936639},{&quot;lrRecall&quot;:0.963882618510158,&quot;lrPrecision&quot;:0.2894915254237288,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.29965635738831614},{&quot;lrRecall&quot;:0.963882618510158,&quot;lrPrecision&quot;:0.2890995260663507,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.29924502402196296},{&quot;lrRecall&quot;:0.9661399548532731,&quot;lrPrecision&quot;:0.2882154882154882,&quot;rfRecall&quot;:0.9841986455981941,&quot;rfPrecision&quot;:0.29842573579739906},{&quot;lrRecall&quot;:0.9661399548532731,&quot;lrPrecision&quot;:0.288021534320323,&quot;rfRecall&quot;:0.9864559819413092,&quot;rfPrecision&quot;:0.2987012987012987},{&quot;lrRecall&quot;:0.9661399548532731,&quot;lrPrecision&quot;:0.2878278412911903,&quot;rfRecall&quot;:0.9864559819413092,&quot;rfPrecision&quot;:0.296472184531886},{&quot;lrRecall&quot;:0.9661399548532731,&quot;lrPrecision&quot;:0.28763440860215056,&quot;rfRecall&quot;:0.9864559819413092,&quot;rfPrecision&quot;:0.2954699121027721},{&quot;lrRecall&quot;:0.9683972911963883,&quot;lrPrecision&quot;:0.2867647058823529,&quot;rfRecall&quot;:0.9864559819413092,&quot;rfPrecision&quot;:0.2928954423592493},{&quot;lrRecall&quot;:0.9683972911963883,&quot;lrPrecision&quot;:0.28619079386257507,&quot;rfRecall&quot;:0.9864559819413092,&quot;rfPrecision&quot;:0.29133333333333333},{&quot;lrRecall&quot;:0.9683972911963883,&quot;lrPrecision&quot;:0.286,&quot;rfRecall&quot;:0.9864559819413092,&quot;rfPrecision&quot;:0.29094540612516645},{&quot;lrRecall&quot;:0.9683972911963883,&quot;lrPrecision&quot;:0.28542914171656686,&quot;rfRecall&quot;:0.9864559819413092,&quot;rfPrecision&quot;:0.29055851063829785},{&quot;lrRecall&quot;:0.9683972911963883,&quot;lrPrecision&quot;:0.28448275862068967,&quot;rfRecall&quot;:0.9887133182844243,&quot;rfPrecision&quot;:0.2896825396825397},{&quot;lrRecall&quot;:0.9683972911963883,&quot;lrPrecision&quot;:0.28429423459244535,&quot;rfRecall&quot;:0.9887133182844243,&quot;rfPrecision&quot;:0.28949107732980833},{&quot;lrRecall&quot;:0.9683972911963883,&quot;lrPrecision&quot;:0.281127129750983,&quot;rfRecall&quot;:0.9887133182844243,&quot;rfPrecision&quot;:0.2879684418145957},{&quot;lrRecall&quot;:0.9683972911963883,&quot;lrPrecision&quot;:0.28094302554027506,&quot;rfRecall&quot;:0.9887133182844243,&quot;rfPrecision&quot;:0.28777923784494086},{&quot;lrRecall&quot;:0.9683972911963883,&quot;lrPrecision&quot;:0.28075916230366493,&quot;rfRecall&quot;:0.9887133182844243,&quot;rfPrecision&quot;:0.2875902823374918},{&quot;lrRecall&quot;:0.9683972911963883,&quot;lrPrecision&quot;:0.2803921568627451,&quot;rfRecall&quot;:0.9887133182844243,&quot;rfPrecision&quot;:0.2870249017038008},{&quot;lrRecall&quot;:0.9683972911963883,&quot;lrPrecision&quot;:0.27984344422700586,&quot;rfRecall&quot;:0.9887133182844243,&quot;rfPrecision&quot;:0.2868369351669941},{&quot;lrRecall&quot;:0.9683972911963883,&quot;lrPrecision&quot;:0.27947882736156354,&quot;rfRecall&quot;:0.9909706546275395,&quot;rfPrecision&quot;:0.2845106934543098},{&quot;lrRecall&quot;:0.9683972911963883,&quot;lrPrecision&quot;:0.2785714285714286,&quot;rfRecall&quot;:0.9932279909706546,&quot;rfPrecision&quot;:0.2844214608920491},{&quot;lrRecall&quot;:0.9706546275395034,&quot;lrPrecision&quot;:0.278137128072445,&quot;rfRecall&quot;:0.9932279909706546,&quot;rfPrecision&quot;:0.2825947334617855},{&quot;lrRecall&quot;:0.9706546275395034,&quot;lrPrecision&quot;:0.2779573367808662,&quot;rfRecall&quot;:0.9932279909706546,&quot;rfPrecision&quot;:0.28223220012828737},{&quot;lrRecall&quot;:0.9706546275395034,&quot;lrPrecision&quot;:0.2770618556701031,&quot;rfRecall&quot;:0.9932279909706546,&quot;rfPrecision&quot;:0.28187059577194107},{&quot;lrRecall&quot;:0.9706546275395034,&quot;lrPrecision&quot;:0.2767052767052767,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.28107074569789675},{&quot;lrRecall&quot;:0.9729119638826185,&quot;lrPrecision&quot;:0.2764592687620269,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.2808917197452229},{&quot;lrRecall&quot;:0.9751693002257337,&quot;lrPrecision&quot;:0.27533460803059273,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.2796448953709575},{&quot;lrRecall&quot;:0.9751693002257337,&quot;lrPrecision&quot;:0.2751592356687898,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.2791139240506329},{&quot;lrRecall&quot;:0.9751693002257337,&quot;lrPrecision&quot;:0.2744599745870394,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.27876106194690264},{&quot;lrRecall&quot;:0.9751693002257337,&quot;lrPrecision&quot;:0.2732447817836812,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.2784090909090909},{&quot;lrRecall&quot;:0.9751693002257337,&quot;lrPrecision&quot;:0.2722117202268431,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.2780580075662043},{&quot;lrRecall&quot;:0.9751693002257337,&quot;lrPrecision&quot;:0.271356783919598,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.2770100502512563},{&quot;lrRecall&quot;:0.9751693002257337,&quot;lrPrecision&quot;:0.270846394984326,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.27631578947368424},{&quot;lrRecall&quot;:0.9774266365688488,&quot;lrPrecision&quot;:0.2699501246882793,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.2759699624530663},{&quot;lrRecall&quot;:0.9774266365688488,&quot;lrPrecision&quot;:0.26927860696517414,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.27391304347826084},{&quot;lrRecall&quot;:0.9774266365688488,&quot;lrPrecision&quot;:0.2686104218362283,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.2727272727272727},{&quot;lrRecall&quot;:0.9796839729119639,&quot;lrPrecision&quot;:0.2667486170866626,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.272390364422483},{&quot;lrRecall&quot;:0.9796839729119639,&quot;lrPrecision&quot;:0.2654434250764526,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.27121771217712176},{&quot;lrRecall&quot;:0.9796839729119639,&quot;lrPrecision&quot;:0.2646341463414634,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.2702205882352941},{&quot;lrRecall&quot;:0.9796839729119639,&quot;lrPrecision&quot;:0.2644728823887873,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.2692307692307692},{&quot;lrRecall&quot;:0.9796839729119639,&quot;lrPrecision&quot;:0.26431181485992694,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.2690665039658328},{&quot;lrRecall&quot;:0.9796839729119639,&quot;lrPrecision&quot;:0.2641509433962264,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.26890243902439026},{&quot;lrRecall&quot;:0.9796839729119639,&quot;lrPrecision&quot;:0.26366950182260024,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.26678765880217786},{&quot;lrRecall&quot;:0.9796839729119639,&quot;lrPrecision&quot;:0.2633495145631068,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.266304347826087},{&quot;lrRecall&quot;:0.981941309255079,&quot;lrPrecision&quot;:0.2634766807995155,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.26502403846153844},{&quot;lrRecall&quot;:0.981941309255079,&quot;lrPrecision&quot;:0.26331719128329295,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.26454709058188364},{&quot;lrRecall&quot;:0.9841986455981941,&quot;lrPrecision&quot;:0.2628089210367691,&quot;rfRecall&quot;:0.9954853273137697,&quot;rfPrecision&quot;:0.26063829787234044},{&quot;lrRecall&quot;:0.9841986455981941,&quot;lrPrecision&quot;:0.26092160383004187,&quot;rfRecall&quot;:0.9977426636568849,&quot;rfPrecision&quot;:0.2595419847328244},{&quot;lrRecall&quot;:0.9841986455981941,&quot;lrPrecision&quot;:0.2607655502392344,&quot;rfRecall&quot;:0.9977426636568849,&quot;rfPrecision&quot;:0.2580268534734384},{&quot;lrRecall&quot;:0.9841986455981941,&quot;lrPrecision&quot;:0.26014319809069214,&quot;rfRecall&quot;:0.9977426636568849,&quot;rfPrecision&quot;:0.2577259475218659},{&quot;lrRecall&quot;:0.9841986455981941,&quot;lrPrecision&quot;:0.25921521997621877,&quot;rfRecall&quot;:0.9977426636568849,&quot;rfPrecision&quot;:0.2572759022118743},{&quot;lrRecall&quot;:0.9841986455981941,&quot;lrPrecision&quot;:0.25844694724362777,&quot;rfRecall&quot;:0.9977426636568849,&quot;rfPrecision&quot;:0.2569767441860465},{&quot;lrRecall&quot;:0.9841986455981941,&quot;lrPrecision&quot;:0.25707547169811323,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.25372279495990835},{&quot;lrRecall&quot;:0.9841986455981941,&quot;lrPrecision&quot;:0.25631981187536745,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.25357756153405836},{&quot;lrRecall&quot;:0.9841986455981941,&quot;lrPrecision&quot;:0.25616921269095183,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2527096406160867},{&quot;lrRecall&quot;:0.9841986455981941,&quot;lrPrecision&quot;:0.2557184750733138,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.25170454545454546},{&quot;lrRecall&quot;:0.9841986455981941,&quot;lrPrecision&quot;:0.2548217416715371,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2507074136955291},{&quot;lrRecall&quot;:0.9841986455981941,&quot;lrPrecision&quot;:0.2543757292882147,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24873666479505896},{&quot;lrRecall&quot;:0.9841986455981941,&quot;lrPrecision&quot;:0.2542274052478134,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2483183856502242},{&quot;lrRecall&quot;:0.9841986455981941,&quot;lrPrecision&quot;:0.2540792540792541,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24748603351955306},{&quot;lrRecall&quot;:0.9841986455981941,&quot;lrPrecision&quot;:0.2539312754804892,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24734785036292575},{&quot;lrRecall&quot;:0.9841986455981941,&quot;lrPrecision&quot;:0.25216888374783114,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2461111111111111},{&quot;lrRecall&quot;:0.9841986455981941,&quot;lrPrecision&quot;:0.2512968299711816,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2457016084303938},{&quot;lrRecall&quot;:0.9841986455981941,&quot;lrPrecision&quot;:0.2510074841681059,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2444812362030905},{&quot;lrRecall&quot;:0.9864559819413092,&quot;lrPrecision&quot;:0.25114942528735634,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2440771349862259},{&quot;lrRecall&quot;:0.9864559819413092,&quot;lrPrecision&quot;:0.2504297994269341,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24394273127753305},{&quot;lrRecall&quot;:0.9864559819413092,&quot;lrPrecision&quot;:0.2502863688430699,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2438084755090809},{&quot;lrRecall&quot;:0.9864559819413092,&quot;lrPrecision&quot;:0.24957167332952598,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24327292696320704},{&quot;lrRecall&quot;:0.9864559819413092,&quot;lrPrecision&quot;:0.24942922374429224,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24313940724478594},{&quot;lrRecall&quot;:0.9864559819413092,&quot;lrPrecision&quot;:0.24759206798866856,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24300603400987383},{&quot;lrRecall&quot;:0.9864559819413092,&quot;lrPrecision&quot;:0.24717194570135748,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24260679079956188},{&quot;lrRecall&quot;:0.9864559819413092,&quot;lrPrecision&quot;:0.24605855855855857,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24247400109469075},{&quot;lrRecall&quot;:0.9864559819413092,&quot;lrPrecision&quot;:0.24564362001124226,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24049945711183496},{&quot;lrRecall&quot;:0.9864559819413092,&quot;lrPrecision&quot;:0.24536777091521617,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24036896364622898},{&quot;lrRecall&quot;:0.9864559819413092,&quot;lrPrecision&quot;:0.24386160714285715,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2370251471375067},{&quot;lrRecall&quot;:0.9864559819413092,&quot;lrPrecision&quot;:0.2434540389972145,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23677177979690006},{&quot;lrRecall&quot;:0.9864559819413092,&quot;lrPrecision&quot;:0.2433184855233853,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23601491742141714},{&quot;lrRecall&quot;:0.9887133182844243,&quot;lrPrecision&quot;:0.2434685936631462,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23563829787234042},{&quot;lrRecall&quot;:0.9887133182844243,&quot;lrPrecision&quot;:0.24306326304106549,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23476417594064652},{&quot;lrRecall&quot;:0.9887133182844243,&quot;lrPrecision&quot;:0.2419889502762431,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23340358271865122},{&quot;lrRecall&quot;:0.9887133182844243,&quot;lrPrecision&quot;:0.24172185430463577,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23328067403896788},{&quot;lrRecall&quot;:0.9887133182844243,&quot;lrPrecision&quot;:0.2413223140495868,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2324239244491081},{&quot;lrRecall&quot;:0.9887133182844243,&quot;lrPrecision&quot;:0.24118942731277532,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23096976016684045},{&quot;lrRecall&quot;:0.9887133182844243,&quot;lrPrecision&quot;:0.24092409240924093,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23072916666666668},{&quot;lrRecall&quot;:0.9887133182844243,&quot;lrPrecision&quot;:0.24079164376030787,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.230609057782405},{&quot;lrRecall&quot;:0.9887133182844243,&quot;lrPrecision&quot;:0.24052718286655683,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23036921476859074},{&quot;lrRecall&quot;:0.9887133182844243,&quot;lrPrecision&quot;:0.24039517014270034,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22977178423236513},{&quot;lrRecall&quot;:0.9887133182844243,&quot;lrPrecision&quot;:0.24,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22965266977708657},{&quot;lrRecall&quot;:0.9887133182844243,&quot;lrPrecision&quot;:0.23986856516976998,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22953367875647668},{&quot;lrRecall&quot;:0.9932279909706546,&quot;lrPrecision&quot;:0.23758099352051837,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22941481097876748},{&quot;lrRecall&quot;:0.9932279909706546,&quot;lrPrecision&quot;:0.23681377825618946,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22917744438696327},{&quot;lrRecall&quot;:0.9932279909706546,&quot;lrPrecision&quot;:0.23529411764705882,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22882231404958678},{&quot;lrRecall&quot;:0.9932279909706546,&quot;lrPrecision&quot;:0.23516835916622128,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.227880658436214},{&quot;lrRecall&quot;:0.9932279909706546,&quot;lrPrecision&quot;:0.23466666666666666,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2268305171530978},{&quot;lrRecall&quot;:0.9932279909706546,&quot;lrPrecision&quot;:0.23391812865497075,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22671443193449334},{&quot;lrRecall&quot;:0.9932279909706546,&quot;lrPrecision&quot;:0.23354564755838642,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22636688809402147},{&quot;lrRecall&quot;:0.9932279909706546,&quot;lrPrecision&quot;:0.23342175066312998,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22613578356304237},{&quot;lrRecall&quot;:0.9932279909706546,&quot;lrPrecision&quot;:0.2324352879027998,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22567498726439122},{&quot;lrRecall&quot;:0.9932279909706546,&quot;lrPrecision&quot;:0.23194517659462308,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22544529262086513},{&quot;lrRecall&quot;:0.9932279909706546,&quot;lrPrecision&quot;:0.23182297154899895,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22521606507371633},{&quot;lrRecall&quot;:0.9932279909706546,&quot;lrPrecision&quot;:0.23170089520800422,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22510162601626016},{&quot;lrRecall&quot;:0.9932279909706546,&quot;lrPrecision&quot;:0.23157894736842105,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2249873031995937},{&quot;lrRecall&quot;:0.9932279909706546,&quot;lrPrecision&quot;:0.23121387283236994,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22475900558092338},{&quot;lrRecall&quot;:0.9932279909706546,&quot;lrPrecision&quot;:0.2301255230125523,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2241902834008097},{&quot;lrRecall&quot;:0.9932279909706546,&quot;lrPrecision&quot;:0.22964509394572025,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2240768841679312},{&quot;lrRecall&quot;:0.9932279909706546,&quot;lrPrecision&quot;:0.22892819979188345,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22396359959555107},{&quot;lrRecall&quot;:0.9932279909706546,&quot;lrPrecision&quot;:0.2284527518172378,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22385042950985345},{&quot;lrRecall&quot;:0.9932279909706546,&quot;lrPrecision&quot;:0.22762545266425246,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2229491696024157},{&quot;lrRecall&quot;:0.9954853273137697,&quot;lrPrecision&quot;:0.22731958762886598,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2207274539113104},{&quot;lrRecall&quot;:0.9954853273137697,&quot;lrPrecision&quot;:0.22638603696098564,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.21985111662531018},{&quot;lrRecall&quot;:0.9954853273137697,&quot;lrPrecision&quot;:0.22603792926704255,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2196331184928111},{&quot;lrRecall&quot;:0.9977426636568849,&quot;lrPrecision&quot;:0.22597137014314927,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2195242814667988},{&quot;lrRecall&quot;:0.9977426636568849,&quot;lrPrecision&quot;:0.22551020408163266,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.21919841662543296},{&quot;lrRecall&quot;:0.9977426636568849,&quot;lrPrecision&quot;:0.2251655629139073,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2175834970530452},{&quot;lrRecall&quot;:0.9977426636568849,&quot;lrPrecision&quot;:0.22278225806451613,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.21726336439431093},{&quot;lrRecall&quot;:0.9977426636568849,&quot;lrPrecision&quot;:0.22255790533736153,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2169441723800196},{&quot;lrRecall&quot;:0.9977426636568849,&quot;lrPrecision&quot;:0.22244589833920483,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.21673189823874756},{&quot;lrRecall&quot;:0.9977426636568849,&quot;lrPrecision&quot;:0.22199899547965846,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.21599219892735252},{&quot;lrRecall&quot;:0.9977426636568849,&quot;lrPrecision&quot;:0.22111055527763882,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2142166344294004},{&quot;lrRecall&quot;:0.9977426636568849,&quot;lrPrecision&quot;:0.221,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.21390632544664415}],&quot;genId&quot;:&quot;2106086707&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/customC3Chart'], \n      function(playground, _magiccustomC3Chart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magiccustomC3Chart,\n    \"o\": {\"js\":\"var chartOptions = { data: { xs: {\\n                            'lrPrecision': 'lrRecall',\\n                            'rfPrecision': 'rfRecall',\\n                         }\\n                   },\\n                   axis: {\\n                      y: {\\n                        label: 'precision'\\n                      },\\n                      x: {\\n                         label: 'recall',\\n                         tick: {\\n                            count: 5\\n                         }\\n                      }\\n                   },\\n                   point: {\\n                        show: false\\n                   }\\n                  };\",\"headers\":[\"lrRecall\",\"lrPrecision\",\"rfRecall\",\"rfPrecision\"],\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon656a0ee0730fdd47eb8390c0367a7326&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon9b634d4f008e5d9aaee579ab052e27a7&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 17
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "1DB5EE44335249928B897FF2D0C98977"
    },
    "cell_type" : "code",
    "source" : "CustomC3Chart(rocPoints,\n              \"\"\"{ data: { xs: {\n                            'lrTPR': 'lrFPR',\n                            'rfTPR': 'rfFPR',\n                         }\n                   },\n                   axis: {\n                      y: {\n                        label: 'TPR'\n                      },\n                      x: {\n                         label: 'FPR',\n                         tick: {\n                            count: 5\n                         }\n                      }\n                   },\n                   point: {\n                        show: false\n                   }\n                  }\"\"\")\n",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res28: notebook.front.widgets.CustomC3Chart[Array[ROCPoint]] = <CustomC3Chart widget>\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anond129430e4f12470aa0f8fa9c748fe051&quot;,&quot;dataInit&quot;:[{&quot;lrFPR&quot;:0.0,&quot;lrTPR&quot;:0.0,&quot;rfFPR&quot;:0.0,&quot;rfTPR&quot;:0.006772009029345372},{&quot;lrFPR&quot;:0.0,&quot;lrTPR&quot;:0.002257336343115124,&quot;rfFPR&quot;:0.0,&quot;rfTPR&quot;:0.01580135440180587},{&quot;lrFPR&quot;:0.0,&quot;lrTPR&quot;:0.004514672686230248,&quot;rfFPR&quot;:0.0006134969325153375,&quot;rfTPR&quot;:0.029345372460496615},{&quot;lrFPR&quot;:0.0,&quot;lrTPR&quot;:0.011286681715575621,&quot;rfFPR&quot;:0.00245398773006135,&quot;rfTPR&quot;:0.04740406320541761},{&quot;lrFPR&quot;:0.0006134969325153375,&quot;lrTPR&quot;:0.011286681715575621,&quot;rfFPR&quot;:0.00245398773006135,&quot;rfTPR&quot;:0.04966139954853273},{&quot;lrFPR&quot;:0.001226993865030675,&quot;lrTPR&quot;:0.03837471783295711,&quot;rfFPR&quot;:0.00245398773006135,&quot;rfTPR&quot;:0.05417607223476298},{&quot;lrFPR&quot;:0.001226993865030675,&quot;lrTPR&quot;:0.04740406320541761,&quot;rfFPR&quot;:0.00245398773006135,&quot;rfTPR&quot;:0.056433408577878104},{&quot;lrFPR&quot;:0.0018404907975460123,&quot;lrTPR&quot;:0.056433408577878104,&quot;rfFPR&quot;:0.00245398773006135,&quot;rfTPR&quot;:0.0744920993227991},{&quot;lrFPR&quot;:0.0018404907975460123,&quot;lrTPR&quot;:0.06772009029345373,&quot;rfFPR&quot;:0.0036809815950920245,&quot;rfTPR&quot;:0.11060948081264109},{&quot;lrFPR&quot;:0.0018404907975460123,&quot;lrTPR&quot;:0.06997742663656885,&quot;rfFPR&quot;:0.0036809815950920245,&quot;rfTPR&quot;:0.11512415349887133},{&quot;lrFPR&quot;:0.0018404907975460123,&quot;lrTPR&quot;:0.07900677200902935,&quot;rfFPR&quot;:0.0036809815950920245,&quot;rfTPR&quot;:0.12641083521444696},{&quot;lrFPR&quot;:0.0036809815950920245,&quot;lrTPR&quot;:0.09255079006772009,&quot;rfFPR&quot;:0.0036809815950920245,&quot;rfTPR&quot;:0.12866817155756208},{&quot;lrFPR&quot;:0.004294478527607362,&quot;lrTPR&quot;:0.09932279909706546,&quot;rfFPR&quot;:0.004294478527607362,&quot;rfTPR&quot;:0.1399548532731377},{&quot;lrFPR&quot;:0.0049079754601227,&quot;lrTPR&quot;:0.10158013544018059,&quot;rfFPR&quot;:0.004294478527607362,&quot;rfTPR&quot;:0.1580135440180587},{&quot;lrFPR&quot;:0.005521472392638037,&quot;lrTPR&quot;:0.10835214446952596,&quot;rfFPR&quot;:0.004294478527607362,&quot;rfTPR&quot;:0.16027088036117382},{&quot;lrFPR&quot;:0.005521472392638037,&quot;lrTPR&quot;:0.11512415349887133,&quot;rfFPR&quot;:0.004294478527607362,&quot;rfTPR&quot;:0.16252821670428894},{&quot;lrFPR&quot;:0.005521472392638037,&quot;lrTPR&quot;:0.12415349887133183,&quot;rfFPR&quot;:0.005521472392638037,&quot;rfTPR&quot;:0.1873589164785553},{&quot;lrFPR&quot;:0.005521472392638037,&quot;lrTPR&quot;:0.12866817155756208,&quot;rfFPR&quot;:0.006134969325153374,&quot;rfTPR&quot;:0.2054176072234763},{&quot;lrFPR&quot;:0.005521472392638037,&quot;lrTPR&quot;:0.14221218961625282,&quot;rfFPR&quot;:0.006134969325153374,&quot;rfTPR&quot;:0.21670428893905191},{&quot;lrFPR&quot;:0.007361963190184049,&quot;lrTPR&quot;:0.16252821670428894,&quot;rfFPR&quot;:0.006134969325153374,&quot;rfTPR&quot;:0.2234762979683973},{&quot;lrFPR&quot;:0.007361963190184049,&quot;lrTPR&quot;:0.16478555304740405,&quot;rfFPR&quot;:0.006134969325153374,&quot;rfTPR&quot;:0.22573363431151242},{&quot;lrFPR&quot;:0.008588957055214725,&quot;lrTPR&quot;:0.16478555304740405,&quot;rfFPR&quot;:0.007975460122699387,&quot;rfTPR&quot;:0.2325056433408578},{&quot;lrFPR&quot;:0.0098159509202454,&quot;lrTPR&quot;:0.18961625282167044,&quot;rfFPR&quot;:0.007975460122699387,&quot;rfTPR&quot;:0.23476297968397292},{&quot;lrFPR&quot;:0.010429447852760737,&quot;lrTPR&quot;:0.19413092550790068,&quot;rfFPR&quot;:0.008588957055214725,&quot;rfTPR&quot;:0.23476297968397292},{&quot;lrFPR&quot;:0.011042944785276074,&quot;lrTPR&quot;:0.1986455981941309,&quot;rfFPR&quot;:0.009202453987730062,&quot;rfTPR&quot;:0.24379232505643342},{&quot;lrFPR&quot;:0.011042944785276074,&quot;lrTPR&quot;:0.20316027088036118,&quot;rfFPR&quot;:0.010429447852760737,&quot;rfTPR&quot;:0.26410835214446954},{&quot;lrFPR&quot;:0.011042944785276074,&quot;lrTPR&quot;:0.22121896162528218,&quot;rfFPR&quot;:0.010429447852760737,&quot;rfTPR&quot;:0.26636568848758463},{&quot;lrFPR&quot;:0.011042944785276074,&quot;lrTPR&quot;:0.2234762979683973,&quot;rfFPR&quot;:0.011042944785276074,&quot;rfTPR&quot;:0.26636568848758463},{&quot;lrFPR&quot;:0.011656441717791411,&quot;lrTPR&quot;:0.2234762979683973,&quot;rfFPR&quot;:0.011656441717791411,&quot;rfTPR&quot;:0.2686230248306998},{&quot;lrFPR&quot;:0.012269938650306749,&quot;lrTPR&quot;:0.22573363431151242,&quot;rfFPR&quot;:0.011656441717791411,&quot;rfTPR&quot;:0.2708803611738149},{&quot;lrFPR&quot;:0.01411042944785276,&quot;lrTPR&quot;:0.22799097065462753,&quot;rfFPR&quot;:0.012883435582822086,&quot;rfTPR&quot;:0.2799097065462754},{&quot;lrFPR&quot;:0.015337423312883436,&quot;lrTPR&quot;:0.25733634311512416,&quot;rfFPR&quot;:0.013496932515337423,&quot;rfTPR&quot;:0.28216704288939054},{&quot;lrFPR&quot;:0.018404907975460124,&quot;lrTPR&quot;:0.26410835214446954,&quot;rfFPR&quot;:0.01411042944785276,&quot;rfTPR&quot;:0.2866817155756208},{&quot;lrFPR&quot;:0.018404907975460124,&quot;lrTPR&quot;:0.28442437923250563,&quot;rfFPR&quot;:0.014723926380368098,&quot;rfTPR&quot;:0.2866817155756208},{&quot;lrFPR&quot;:0.018404907975460124,&quot;lrTPR&quot;:0.2866817155756208,&quot;rfFPR&quot;:0.014723926380368098,&quot;rfTPR&quot;:0.291196388261851},{&quot;lrFPR&quot;:0.01901840490797546,&quot;lrTPR&quot;:0.29571106094808125,&quot;rfFPR&quot;:0.016564417177914112,&quot;rfTPR&quot;:0.29345372460496616},{&quot;lrFPR&quot;:0.0196319018404908,&quot;lrTPR&quot;:0.309255079006772,&quot;rfFPR&quot;:0.01901840490797546,&quot;rfTPR&quot;:0.29571106094808125},{&quot;lrFPR&quot;:0.0196319018404908,&quot;lrTPR&quot;:0.3160270880361174,&quot;rfFPR&quot;:0.0196319018404908,&quot;rfTPR&quot;:0.3047404063205418},{&quot;lrFPR&quot;:0.0196319018404908,&quot;lrTPR&quot;:0.3227990970654628,&quot;rfFPR&quot;:0.020245398773006136,&quot;rfTPR&quot;:0.3047404063205418},{&quot;lrFPR&quot;:0.022085889570552148,&quot;lrTPR&quot;:0.345372460496614,&quot;rfFPR&quot;:0.022085889570552148,&quot;rfTPR&quot;:0.31376975169300225},{&quot;lrFPR&quot;:0.022085889570552148,&quot;lrTPR&quot;:0.3476297968397291,&quot;rfFPR&quot;:0.022699386503067485,&quot;rfTPR&quot;:0.3182844243792325},{&quot;lrFPR&quot;:0.022699386503067485,&quot;lrTPR&quot;:0.3476297968397291,&quot;rfFPR&quot;:0.023312883435582823,&quot;rfTPR&quot;:0.32054176072234764},{&quot;lrFPR&quot;:0.023312883435582823,&quot;lrTPR&quot;:0.3476297968397291,&quot;rfFPR&quot;:0.023312883435582823,&quot;rfTPR&quot;:0.3227990970654628},{&quot;lrFPR&quot;:0.023312883435582823,&quot;lrTPR&quot;:0.34988713318284426,&quot;rfFPR&quot;:0.02392638036809816,&quot;rfTPR&quot;:0.3227990970654628},{&quot;lrFPR&quot;:0.02392638036809816,&quot;lrTPR&quot;:0.34988713318284426,&quot;rfFPR&quot;:0.024539877300613498,&quot;rfTPR&quot;:0.327313769751693},{&quot;lrFPR&quot;:0.025153374233128835,&quot;lrTPR&quot;:0.36343115124153497,&quot;rfFPR&quot;:0.025766871165644172,&quot;rfTPR&quot;:0.3363431151241535},{&quot;lrFPR&quot;:0.02638036809815951,&quot;lrTPR&quot;:0.36343115124153497,&quot;rfFPR&quot;:0.025766871165644172,&quot;rfTPR&quot;:0.3431151241534989},{&quot;lrFPR&quot;:0.03067484662576687,&quot;lrTPR&quot;:0.3747178329571106,&quot;rfFPR&quot;:0.02638036809815951,&quot;rfTPR&quot;:0.3544018058690745},{&quot;lrFPR&quot;:0.03067484662576687,&quot;lrTPR&quot;:0.38148984198645597,&quot;rfFPR&quot;:0.02822085889570552,&quot;rfTPR&quot;:0.35891647855530473},{&quot;lrFPR&quot;:0.03190184049079755,&quot;lrTPR&quot;:0.39503386004514673,&quot;rfFPR&quot;:0.03067484662576687,&quot;rfTPR&quot;:0.36794582392776526},{&quot;lrFPR&quot;:0.03374233128834356,&quot;lrTPR&quot;:0.4040632054176072,&quot;rfFPR&quot;:0.03128834355828221,&quot;rfTPR&quot;:0.37020316027088035},{&quot;lrFPR&quot;:0.03374233128834356,&quot;lrTPR&quot;:0.40857787810383744,&quot;rfFPR&quot;:0.03128834355828221,&quot;rfTPR&quot;:0.37697516930022573},{&quot;lrFPR&quot;:0.03496932515337423,&quot;lrTPR&quot;:0.4198645598194131,&quot;rfFPR&quot;:0.03128834355828221,&quot;rfTPR&quot;:0.3792325056433409},{&quot;lrFPR&quot;:0.03496932515337423,&quot;lrTPR&quot;:0.43792325056433407,&quot;rfFPR&quot;:0.033128834355828224,&quot;rfTPR&quot;:0.3837471783295711},{&quot;lrFPR&quot;:0.03558282208588957,&quot;lrTPR&quot;:0.43792325056433407,&quot;rfFPR&quot;:0.03374233128834356,&quot;rfTPR&quot;:0.38826185101580135},{&quot;lrFPR&quot;:0.03558282208588957,&quot;lrTPR&quot;:0.4469525959367946,&quot;rfFPR&quot;:0.03374233128834356,&quot;rfTPR&quot;:0.3905191873589165},{&quot;lrFPR&quot;:0.0392638036809816,&quot;lrTPR&quot;:0.4582392776523702,&quot;rfFPR&quot;:0.03496932515337423,&quot;rfTPR&quot;:0.39954853273137697},{&quot;lrFPR&quot;:0.041104294478527606,&quot;lrTPR&quot;:0.4785553047404063,&quot;rfFPR&quot;:0.03619631901840491,&quot;rfTPR&quot;:0.4108352144469526},{&quot;lrFPR&quot;:0.04478527607361963,&quot;lrTPR&quot;:0.48758465011286684,&quot;rfFPR&quot;:0.03680981595092025,&quot;rfTPR&quot;:0.4198645598194131},{&quot;lrFPR&quot;:0.046012269938650305,&quot;lrTPR&quot;:0.48758465011286684,&quot;rfFPR&quot;:0.03803680981595092,&quot;rfTPR&quot;:0.42437923250564336},{&quot;lrFPR&quot;:0.046625766871165646,&quot;lrTPR&quot;:0.49887133182844245,&quot;rfFPR&quot;:0.04049079754601227,&quot;rfTPR&quot;:0.435665914221219},{&quot;lrFPR&quot;:0.049079754601226995,&quot;lrTPR&quot;:0.5079006772009029,&quot;rfFPR&quot;:0.041104294478527606,&quot;rfTPR&quot;:0.44243792325056436},{&quot;lrFPR&quot;:0.05276073619631902,&quot;lrTPR&quot;:0.5079006772009029,&quot;rfFPR&quot;:0.04171779141104295,&quot;rfTPR&quot;:0.44469525959367945},{&quot;lrFPR&quot;:0.05337423312883435,&quot;lrTPR&quot;:0.5124153498871332,&quot;rfFPR&quot;:0.044171779141104296,&quot;rfTPR&quot;:0.45146726862302483},{&quot;lrFPR&quot;:0.05521472392638037,&quot;lrTPR&quot;:0.5146726862302483,&quot;rfFPR&quot;:0.04539877300613497,&quot;rfTPR&quot;:0.46275395033860045},{&quot;lrFPR&quot;:0.05521472392638037,&quot;lrTPR&quot;:0.5169300225733634,&quot;rfFPR&quot;:0.046012269938650305,&quot;rfTPR&quot;:0.46275395033860045},{&quot;lrFPR&quot;:0.06319018404907975,&quot;lrTPR&quot;:0.5327313769751693,&quot;rfFPR&quot;:0.046012269938650305,&quot;rfTPR&quot;:0.4650112866817156},{&quot;lrFPR&quot;:0.06319018404907975,&quot;lrTPR&quot;:0.5395033860045146,&quot;rfFPR&quot;:0.04723926380368098,&quot;rfTPR&quot;:0.4853273137697517},{&quot;lrFPR&quot;:0.0638036809815951,&quot;lrTPR&quot;:0.5440180586907449,&quot;rfFPR&quot;:0.050920245398773004,&quot;rfTPR&quot;:0.5079006772009029},{&quot;lrFPR&quot;:0.06748466257668712,&quot;lrTPR&quot;:0.5507900677200903,&quot;rfFPR&quot;:0.051533742331288344,&quot;rfTPR&quot;:0.5079006772009029},{&quot;lrFPR&quot;:0.0705521472392638,&quot;lrTPR&quot;:0.5507900677200903,&quot;rfFPR&quot;:0.05214723926380368,&quot;rfTPR&quot;:0.5079006772009029},{&quot;lrFPR&quot;:0.0754601226993865,&quot;lrTPR&quot;:0.5575620767494357,&quot;rfFPR&quot;:0.05276073619631902,&quot;rfTPR&quot;:0.5079006772009029},{&quot;lrFPR&quot;:0.07791411042944785,&quot;lrTPR&quot;:0.5665914221218962,&quot;rfFPR&quot;:0.053987730061349694,&quot;rfTPR&quot;:0.5079006772009029},{&quot;lrFPR&quot;:0.0785276073619632,&quot;lrTPR&quot;:0.5665914221218962,&quot;rfFPR&quot;:0.05521472392638037,&quot;rfTPR&quot;:0.5169300225733634},{&quot;lrFPR&quot;:0.07914110429447853,&quot;lrTPR&quot;:0.5733634311512416,&quot;rfFPR&quot;:0.05521472392638037,&quot;rfTPR&quot;:0.5191873589164786},{&quot;lrFPR&quot;:0.0803680981595092,&quot;lrTPR&quot;:0.5778781038374717,&quot;rfFPR&quot;:0.0558282208588957,&quot;rfTPR&quot;:0.5282167042889391},{&quot;lrFPR&quot;:0.08098159509202454,&quot;lrTPR&quot;:0.5778781038374717,&quot;rfFPR&quot;:0.05644171779141104,&quot;rfTPR&quot;:0.5304740406320542},{&quot;lrFPR&quot;:0.08159509202453988,&quot;lrTPR&quot;:0.5778781038374717,&quot;rfFPR&quot;:0.05644171779141104,&quot;rfTPR&quot;:0.5327313769751693},{&quot;lrFPR&quot;:0.08159509202453988,&quot;lrTPR&quot;:0.5801354401805869,&quot;rfFPR&quot;:0.05705521472392638,&quot;rfTPR&quot;:0.5327313769751693},{&quot;lrFPR&quot;:0.08220858895705521,&quot;lrTPR&quot;:0.582392776523702,&quot;rfFPR&quot;:0.05705521472392638,&quot;rfTPR&quot;:0.5372460496613995},{&quot;lrFPR&quot;:0.09079754601226994,&quot;lrTPR&quot;:0.5959367945823928,&quot;rfFPR&quot;:0.05950920245398773,&quot;rfTPR&quot;:0.5440180586907449},{&quot;lrFPR&quot;:0.09815950920245399,&quot;lrTPR&quot;:0.6117381489841986,&quot;rfFPR&quot;:0.06503067484662577,&quot;rfTPR&quot;:0.5530474040632054},{&quot;lrFPR&quot;:0.09815950920245399,&quot;lrTPR&quot;:0.6139954853273137,&quot;rfFPR&quot;:0.06503067484662577,&quot;rfTPR&quot;:0.5575620767494357},{&quot;lrFPR&quot;:0.1,&quot;lrTPR&quot;:0.6162528216704289,&quot;rfFPR&quot;:0.06625766871165645,&quot;rfTPR&quot;:0.5620767494356659},{&quot;lrFPR&quot;:0.10245398773006135,&quot;lrTPR&quot;:0.6162528216704289,&quot;rfFPR&quot;:0.06625766871165645,&quot;rfTPR&quot;:0.5643340857787811},{&quot;lrFPR&quot;:0.10245398773006135,&quot;lrTPR&quot;:0.618510158013544,&quot;rfFPR&quot;:0.06625766871165645,&quot;rfTPR&quot;:0.5665914221218962},{&quot;lrFPR&quot;:0.1067484662576687,&quot;lrTPR&quot;:0.618510158013544,&quot;rfFPR&quot;:0.06748466257668712,&quot;rfTPR&quot;:0.5711060948081265},{&quot;lrFPR&quot;:0.10858895705521472,&quot;lrTPR&quot;:0.6207674943566591,&quot;rfFPR&quot;:0.07914110429447853,&quot;rfTPR&quot;:0.5846501128668171},{&quot;lrFPR&quot;:0.11349693251533742,&quot;lrTPR&quot;:0.6297968397291196,&quot;rfFPR&quot;:0.07914110429447853,&quot;rfTPR&quot;:0.5891647855530474},{&quot;lrFPR&quot;:0.11411042944785275,&quot;lrTPR&quot;:0.6343115124153499,&quot;rfFPR&quot;:0.08159509202453988,&quot;rfTPR&quot;:0.5959367945823928},{&quot;lrFPR&quot;:0.11840490797546012,&quot;lrTPR&quot;:0.6410835214446953,&quot;rfFPR&quot;:0.08159509202453988,&quot;rfTPR&quot;:0.5981941309255079},{&quot;lrFPR&quot;:0.11901840490797547,&quot;lrTPR&quot;:0.6433408577878104,&quot;rfFPR&quot;:0.08159509202453988,&quot;rfTPR&quot;:0.6027088036117382},{&quot;lrFPR&quot;:0.12085889570552147,&quot;lrTPR&quot;:0.6433408577878104,&quot;rfFPR&quot;:0.08282208588957055,&quot;rfTPR&quot;:0.6027088036117382},{&quot;lrFPR&quot;:0.12208588957055215,&quot;lrTPR&quot;:0.6433408577878104,&quot;rfFPR&quot;:0.08404907975460123,&quot;rfTPR&quot;:0.6049661399548533},{&quot;lrFPR&quot;:0.12331288343558282,&quot;lrTPR&quot;:0.6523702031602708,&quot;rfFPR&quot;:0.08588957055214724,&quot;rfTPR&quot;:0.6139954853273137},{&quot;lrFPR&quot;:0.12392638036809817,&quot;lrTPR&quot;:0.6523702031602708,&quot;rfFPR&quot;:0.08773006134969324,&quot;rfTPR&quot;:0.6139954853273137},{&quot;lrFPR&quot;:0.12699386503067484,&quot;lrTPR&quot;:0.6591422121896162,&quot;rfFPR&quot;:0.08773006134969324,&quot;rfTPR&quot;:0.618510158013544},{&quot;lrFPR&quot;:0.1276073619631902,&quot;lrTPR&quot;:0.6591422121896162,&quot;rfFPR&quot;:0.08834355828220859,&quot;rfTPR&quot;:0.618510158013544},{&quot;lrFPR&quot;:0.1312883435582822,&quot;lrTPR&quot;:0.6613995485327314,&quot;rfFPR&quot;:0.08957055214723926,&quot;rfTPR&quot;:0.6230248306997742},{&quot;lrFPR&quot;:0.13190184049079753,&quot;lrTPR&quot;:0.6636568848758465,&quot;rfFPR&quot;:0.09202453987730061,&quot;rfTPR&quot;:0.6343115124153499},{&quot;lrFPR&quot;:0.1343558282208589,&quot;lrTPR&quot;:0.6636568848758465,&quot;rfFPR&quot;:0.09325153374233129,&quot;rfTPR&quot;:0.6343115124153499},{&quot;lrFPR&quot;:0.13680981595092023,&quot;lrTPR&quot;:0.672686230248307,&quot;rfFPR&quot;:0.1,&quot;rfTPR&quot;:0.6410835214446953},{&quot;lrFPR&quot;:0.1374233128834356,&quot;lrTPR&quot;:0.6749435665914221,&quot;rfFPR&quot;:0.1,&quot;rfTPR&quot;:0.6455981941309256},{&quot;lrFPR&quot;:0.1392638036809816,&quot;lrTPR&quot;:0.6817155756207675,&quot;rfFPR&quot;:0.10184049079754601,&quot;rfTPR&quot;:0.6501128668171557},{&quot;lrFPR&quot;:0.14539877300613496,&quot;lrTPR&quot;:0.6952595936794582,&quot;rfFPR&quot;:0.10306748466257669,&quot;rfTPR&quot;:0.6523702031602708},{&quot;lrFPR&quot;:0.14662576687116563,&quot;lrTPR&quot;:0.6952595936794582,&quot;rfFPR&quot;:0.10368098159509202,&quot;rfTPR&quot;:0.6523702031602708},{&quot;lrFPR&quot;:0.15153374233128836,&quot;lrTPR&quot;:0.7020316027088036,&quot;rfFPR&quot;:0.1049079754601227,&quot;rfTPR&quot;:0.6523702031602708},{&quot;lrFPR&quot;:0.1521472392638037,&quot;lrTPR&quot;:0.7042889390519187,&quot;rfFPR&quot;:0.1067484662576687,&quot;rfTPR&quot;:0.6613995485327314},{&quot;lrFPR&quot;:0.1521472392638037,&quot;lrTPR&quot;:0.708803611738149,&quot;rfFPR&quot;:0.11042944785276074,&quot;rfTPR&quot;:0.6704288939051919},{&quot;lrFPR&quot;:0.15276073619631902,&quot;lrTPR&quot;:0.7110609480812641,&quot;rfFPR&quot;:0.11104294478527607,&quot;rfTPR&quot;:0.6704288939051919},{&quot;lrFPR&quot;:0.15337423312883436,&quot;lrTPR&quot;:0.7133182844243793,&quot;rfFPR&quot;:0.11226993865030675,&quot;rfTPR&quot;:0.672686230248307},{&quot;lrFPR&quot;:0.15337423312883436,&quot;lrTPR&quot;:0.7155756207674944,&quot;rfFPR&quot;:0.11349693251533742,&quot;rfTPR&quot;:0.6749435665914221},{&quot;lrFPR&quot;:0.1558282208588957,&quot;lrTPR&quot;:0.7178329571106095,&quot;rfFPR&quot;:0.11717791411042945,&quot;rfTPR&quot;:0.6817155756207675},{&quot;lrFPR&quot;:0.15828220858895706,&quot;lrTPR&quot;:0.7178329571106095,&quot;rfFPR&quot;:0.11901840490797547,&quot;rfTPR&quot;:0.6884875846501128},{&quot;lrFPR&quot;:0.15828220858895706,&quot;lrTPR&quot;:0.7200902934537246,&quot;rfFPR&quot;:0.12147239263803682,&quot;rfTPR&quot;:0.6884875846501128},{&quot;lrFPR&quot;:0.16748466257668712,&quot;lrTPR&quot;:0.7381489841986456,&quot;rfFPR&quot;:0.13190184049079753,&quot;rfTPR&quot;:0.6930022573363431},{&quot;lrFPR&quot;:0.16993865030674846,&quot;lrTPR&quot;:0.7404063205417607,&quot;rfFPR&quot;:0.13312883435582823,&quot;rfTPR&quot;:0.6997742663656885},{&quot;lrFPR&quot;:0.17116564417177915,&quot;lrTPR&quot;:0.7426636568848759,&quot;rfFPR&quot;:0.13558282208588956,&quot;rfTPR&quot;:0.7020316027088036},{&quot;lrFPR&quot;:0.17300613496932515,&quot;lrTPR&quot;:0.7426636568848759,&quot;rfFPR&quot;:0.1411042944785276,&quot;rfTPR&quot;:0.7133182844243793},{&quot;lrFPR&quot;:0.17607361963190185,&quot;lrTPR&quot;:0.744920993227991,&quot;rfFPR&quot;:0.1423312883435583,&quot;rfTPR&quot;:0.7200902934537246},{&quot;lrFPR&quot;:0.17730061349693252,&quot;lrTPR&quot;:0.7471783295711061,&quot;rfFPR&quot;:0.14294478527607363,&quot;rfTPR&quot;:0.7246049661399548},{&quot;lrFPR&quot;:0.18036809815950922,&quot;lrTPR&quot;:0.7539503386004515,&quot;rfFPR&quot;:0.14478527607361963,&quot;rfTPR&quot;:0.7291196388261851},{&quot;lrFPR&quot;:0.18098159509202455,&quot;lrTPR&quot;:0.7562076749435666,&quot;rfFPR&quot;:0.1460122699386503,&quot;rfTPR&quot;:0.7313769751693002},{&quot;lrFPR&quot;:0.18159509202453988,&quot;lrTPR&quot;:0.7584650112866818,&quot;rfFPR&quot;:0.147239263803681,&quot;rfTPR&quot;:0.7313769751693002},{&quot;lrFPR&quot;:0.18220858895705522,&quot;lrTPR&quot;:0.7607223476297968,&quot;rfFPR&quot;:0.14846625766871166,&quot;rfTPR&quot;:0.7336343115124153},{&quot;lrFPR&quot;:0.18282208588957055,&quot;lrTPR&quot;:0.7607223476297968,&quot;rfFPR&quot;:0.149079754601227,&quot;rfTPR&quot;:0.7381489841986456},{&quot;lrFPR&quot;:0.18466257668711655,&quot;lrTPR&quot;:0.7629796839729119,&quot;rfFPR&quot;:0.15030674846625766,&quot;rfTPR&quot;:0.7426636568848759},{&quot;lrFPR&quot;:0.18466257668711655,&quot;lrTPR&quot;:0.7652370203160271,&quot;rfFPR&quot;:0.15337423312883436,&quot;rfTPR&quot;:0.7471783295711061},{&quot;lrFPR&quot;:0.18711656441717792,&quot;lrTPR&quot;:0.7652370203160271,&quot;rfFPR&quot;:0.1558282208588957,&quot;rfTPR&quot;:0.7494356659142212},{&quot;lrFPR&quot;:0.1901840490797546,&quot;lrTPR&quot;:0.7652370203160271,&quot;rfFPR&quot;:0.1588957055214724,&quot;rfTPR&quot;:0.7516930022573364},{&quot;lrFPR&quot;:0.19202453987730062,&quot;lrTPR&quot;:0.7720090293453724,&quot;rfFPR&quot;:0.1607361963190184,&quot;rfTPR&quot;:0.7584650112866818},{&quot;lrFPR&quot;:0.19693251533742331,&quot;lrTPR&quot;:0.7742663656884876,&quot;rfFPR&quot;:0.1638036809815951,&quot;rfTPR&quot;:0.7720090293453724},{&quot;lrFPR&quot;:0.19754601226993865,&quot;lrTPR&quot;:0.7742663656884876,&quot;rfFPR&quot;:0.17116564417177915,&quot;rfTPR&quot;:0.7832957110609481},{&quot;lrFPR&quot;:0.19754601226993865,&quot;lrTPR&quot;:0.7765237020316027,&quot;rfFPR&quot;:0.17177914110429449,&quot;rfTPR&quot;:0.7832957110609481},{&quot;lrFPR&quot;:0.20552147239263804,&quot;lrTPR&quot;:0.7855530474040632,&quot;rfFPR&quot;:0.17239263803680982,&quot;rfTPR&quot;:0.7832957110609481},{&quot;lrFPR&quot;:0.20736196319018405,&quot;lrTPR&quot;:0.7923250564334086,&quot;rfFPR&quot;:0.1736196319018405,&quot;rfTPR&quot;:0.7878103837471784},{&quot;lrFPR&quot;:0.20797546012269938,&quot;lrTPR&quot;:0.7945823927765236,&quot;rfFPR&quot;:0.17730061349693252,&quot;rfTPR&quot;:0.7923250564334086},{&quot;lrFPR&quot;:0.20920245398773007,&quot;lrTPR&quot;:0.7945823927765236,&quot;rfFPR&quot;:0.18036809815950922,&quot;rfTPR&quot;:0.7945823927765236},{&quot;lrFPR&quot;:0.2098159509202454,&quot;lrTPR&quot;:0.7945823927765236,&quot;rfFPR&quot;:0.18466257668711655,&quot;rfTPR&quot;:0.7968397291196389},{&quot;lrFPR&quot;:0.21226993865030674,&quot;lrTPR&quot;:0.7968397291196389,&quot;rfFPR&quot;:0.18650306748466258,&quot;rfTPR&quot;:0.801354401805869},{&quot;lrFPR&quot;:0.2134969325153374,&quot;lrTPR&quot;:0.7968397291196389,&quot;rfFPR&quot;:0.19079754601226995,&quot;rfTPR&quot;:0.8058690744920993},{&quot;lrFPR&quot;:0.21411042944785277,&quot;lrTPR&quot;:0.7968397291196389,&quot;rfFPR&quot;:0.19325153374233128,&quot;rfTPR&quot;:0.8081264108352144},{&quot;lrFPR&quot;:0.21717791411042944,&quot;lrTPR&quot;:0.7968397291196389,&quot;rfFPR&quot;:0.19570552147239265,&quot;rfTPR&quot;:0.8081264108352144},{&quot;lrFPR&quot;:0.2196319018404908,&quot;lrTPR&quot;:0.801354401805869,&quot;rfFPR&quot;:0.19693251533742331,&quot;rfTPR&quot;:0.8081264108352144},{&quot;lrFPR&quot;:0.22085889570552147,&quot;lrTPR&quot;:0.8036117381489842,&quot;rfFPR&quot;:0.20245398773006135,&quot;rfTPR&quot;:0.8081264108352144},{&quot;lrFPR&quot;:0.22576687116564417,&quot;lrTPR&quot;:0.8036117381489842,&quot;rfFPR&quot;:0.2049079754601227,&quot;rfTPR&quot;:0.8103837471783296},{&quot;lrFPR&quot;:0.2282208588957055,&quot;lrTPR&quot;:0.8036117381489842,&quot;rfFPR&quot;:0.2049079754601227,&quot;rfTPR&quot;:0.8126410835214447},{&quot;lrFPR&quot;:0.22883435582822087,&quot;lrTPR&quot;:0.8036117381489842,&quot;rfFPR&quot;:0.2098159509202454,&quot;rfTPR&quot;:0.8216704288939052},{&quot;lrFPR&quot;:0.23067484662576687,&quot;lrTPR&quot;:0.8058690744920993,&quot;rfFPR&quot;:0.21411042944785277,&quot;rfTPR&quot;:0.8239277652370203},{&quot;lrFPR&quot;:0.23374233128834357,&quot;lrTPR&quot;:0.8081264108352144,&quot;rfFPR&quot;:0.21533742331288344,&quot;rfTPR&quot;:0.8239277652370203},{&quot;lrFPR&quot;:0.23680981595092024,&quot;lrTPR&quot;:0.8081264108352144,&quot;rfFPR&quot;:0.2165644171779141,&quot;rfTPR&quot;:0.8239277652370203},{&quot;lrFPR&quot;:0.23987730061349694,&quot;lrTPR&quot;:0.8126410835214447,&quot;rfFPR&quot;:0.2196319018404908,&quot;rfTPR&quot;:0.8261851015801355},{&quot;lrFPR&quot;:0.24233128834355827,&quot;lrTPR&quot;:0.8148984198645598,&quot;rfFPR&quot;:0.22208588957055214,&quot;rfTPR&quot;:0.8284424379232506},{&quot;lrFPR&quot;:0.24355828220858897,&quot;lrTPR&quot;:0.8148984198645598,&quot;rfFPR&quot;:0.22760736196319017,&quot;rfTPR&quot;:0.835214446952596},{&quot;lrFPR&quot;:0.24355828220858897,&quot;lrTPR&quot;:0.8171557562076749,&quot;rfFPR&quot;:0.2294478527607362,&quot;rfTPR&quot;:0.835214446952596},{&quot;lrFPR&quot;:0.24478527607361963,&quot;lrTPR&quot;:0.8194130925507901,&quot;rfFPR&quot;:0.2361963190184049,&quot;rfTPR&quot;:0.8465011286681715},{&quot;lrFPR&quot;:0.24662576687116564,&quot;lrTPR&quot;:0.8194130925507901,&quot;rfFPR&quot;:0.23680981595092024,&quot;rfTPR&quot;:0.8487584650112867},{&quot;lrFPR&quot;:0.24846625766871167,&quot;lrTPR&quot;:0.8239277652370203,&quot;rfFPR&quot;:0.2392638036809816,&quot;rfTPR&quot;:0.8510158013544018},{&quot;lrFPR&quot;:0.25153374233128833,&quot;lrTPR&quot;:0.8239277652370203,&quot;rfFPR&quot;:0.23987730061349694,&quot;rfTPR&quot;:0.8510158013544018},{&quot;lrFPR&quot;:0.25644171779141106,&quot;lrTPR&quot;:0.8261851015801355,&quot;rfFPR&quot;:0.2411042944785276,&quot;rfTPR&quot;:0.8510158013544018},{&quot;lrFPR&quot;:0.26380368098159507,&quot;lrTPR&quot;:0.8284424379232506,&quot;rfFPR&quot;:0.2411042944785276,&quot;rfTPR&quot;:0.8532731376975169},{&quot;lrFPR&quot;:0.2644171779141104,&quot;lrTPR&quot;:0.8284424379232506,&quot;rfFPR&quot;:0.24171779141104294,&quot;rfTPR&quot;:0.8532731376975169},{&quot;lrFPR&quot;:0.2656441717791411,&quot;lrTPR&quot;:0.8284424379232506,&quot;rfFPR&quot;:0.24539877300613497,&quot;rfTPR&quot;:0.8555304740406321},{&quot;lrFPR&quot;:0.2668711656441718,&quot;lrTPR&quot;:0.8284424379232506,&quot;rfFPR&quot;:0.24969325153374233,&quot;rfTPR&quot;:0.8645598194130926},{&quot;lrFPR&quot;:0.2705521472392638,&quot;lrTPR&quot;:0.8329571106094809,&quot;rfFPR&quot;:0.25214723926380367,&quot;rfTPR&quot;:0.8690744920993227},{&quot;lrFPR&quot;:0.27177914110429446,&quot;lrTPR&quot;:0.8329571106094809,&quot;rfFPR&quot;:0.252760736196319,&quot;rfTPR&quot;:0.871331828442438},{&quot;lrFPR&quot;:0.27300613496932513,&quot;lrTPR&quot;:0.835214446952596,&quot;rfFPR&quot;:0.2570552147239264,&quot;rfTPR&quot;:0.873589164785553},{&quot;lrFPR&quot;:0.27975460122699386,&quot;lrTPR&quot;:0.8487584650112867,&quot;rfFPR&quot;:0.25828220858895706,&quot;rfTPR&quot;:0.8758465011286681},{&quot;lrFPR&quot;:0.28282208588957053,&quot;lrTPR&quot;:0.8510158013544018,&quot;rfFPR&quot;:0.2607361963190184,&quot;rfTPR&quot;:0.8758465011286681},{&quot;lrFPR&quot;:0.301840490797546,&quot;lrTPR&quot;:0.8668171557562077,&quot;rfFPR&quot;:0.26196319018404907,&quot;rfTPR&quot;:0.8758465011286681},{&quot;lrFPR&quot;:0.3079754601226994,&quot;lrTPR&quot;:0.873589164785553,&quot;rfFPR&quot;:0.26196319018404907,&quot;rfTPR&quot;:0.8781038374717833},{&quot;lrFPR&quot;:0.31104294478527605,&quot;lrTPR&quot;:0.873589164785553,&quot;rfFPR&quot;:0.2705521472392638,&quot;rfTPR&quot;:0.8826185101580135},{&quot;lrFPR&quot;:0.31349693251533745,&quot;lrTPR&quot;:0.873589164785553,&quot;rfFPR&quot;:0.27423312883435585,&quot;rfTPR&quot;:0.8848758465011287},{&quot;lrFPR&quot;:0.3147239263803681,&quot;lrTPR&quot;:0.873589164785553,&quot;rfFPR&quot;:0.2785276073619632,&quot;rfTPR&quot;:0.8848758465011287},{&quot;lrFPR&quot;:0.3159509202453988,&quot;lrTPR&quot;:0.8781038374717833,&quot;rfFPR&quot;:0.2803680981595092,&quot;rfTPR&quot;:0.8848758465011287},{&quot;lrFPR&quot;:0.3165644171779141,&quot;lrTPR&quot;:0.8803611738148984,&quot;rfFPR&quot;:0.28159509202453986,&quot;rfTPR&quot;:0.8871331828442438},{&quot;lrFPR&quot;:0.31717791411042945,&quot;lrTPR&quot;:0.8803611738148984,&quot;rfFPR&quot;:0.28343558282208586,&quot;rfTPR&quot;:0.8871331828442438},{&quot;lrFPR&quot;:0.32331288343558284,&quot;lrTPR&quot;:0.8803611738148984,&quot;rfFPR&quot;:0.2846625766871166,&quot;rfTPR&quot;:0.8871331828442438},{&quot;lrFPR&quot;:0.3239263803680982,&quot;lrTPR&quot;:0.8803611738148984,&quot;rfFPR&quot;:0.2852760736196319,&quot;rfTPR&quot;:0.8871331828442438},{&quot;lrFPR&quot;:0.32699386503067485,&quot;lrTPR&quot;:0.8826185101580135,&quot;rfFPR&quot;:0.28773006134969326,&quot;rfTPR&quot;:0.8871331828442438},{&quot;lrFPR&quot;:0.3325153374233129,&quot;lrTPR&quot;:0.8826185101580135,&quot;rfFPR&quot;:0.294478527607362,&quot;rfTPR&quot;:0.8939051918735892},{&quot;lrFPR&quot;:0.3361963190184049,&quot;lrTPR&quot;:0.8826185101580135,&quot;rfFPR&quot;:0.2950920245398773,&quot;rfTPR&quot;:0.8939051918735892},{&quot;lrFPR&quot;:0.3380368098159509,&quot;lrTPR&quot;:0.8826185101580135,&quot;rfFPR&quot;:0.29570552147239265,&quot;rfTPR&quot;:0.8939051918735892},{&quot;lrFPR&quot;:0.33865030674846625,&quot;lrTPR&quot;:0.8826185101580135,&quot;rfFPR&quot;:0.298159509202454,&quot;rfTPR&quot;:0.8961625282167043},{&quot;lrFPR&quot;:0.3392638036809816,&quot;lrTPR&quot;:0.8826185101580135,&quot;rfFPR&quot;:0.29938650306748466,&quot;rfTPR&quot;:0.8961625282167043},{&quot;lrFPR&quot;:0.34478527607361964,&quot;lrTPR&quot;:0.8826185101580135,&quot;rfFPR&quot;:0.3024539877300613,&quot;rfTPR&quot;:0.9006772009029346},{&quot;lrFPR&quot;:0.34662576687116564,&quot;lrTPR&quot;:0.8826185101580135,&quot;rfFPR&quot;:0.3030674846625767,&quot;rfTPR&quot;:0.9006772009029346},{&quot;lrFPR&quot;:0.347239263803681,&quot;lrTPR&quot;:0.8826185101580135,&quot;rfFPR&quot;:0.3128834355828221,&quot;rfTPR&quot;:0.90744920993228},{&quot;lrFPR&quot;:0.34846625766871164,&quot;lrTPR&quot;:0.8848758465011287,&quot;rfFPR&quot;:0.31717791411042945,&quot;rfTPR&quot;:0.909706546275395},{&quot;lrFPR&quot;:0.35030674846625764,&quot;lrTPR&quot;:0.8871331828442438,&quot;rfFPR&quot;:0.3202453987730061,&quot;rfTPR&quot;:0.9119638826185101},{&quot;lrFPR&quot;:0.35644171779141104,&quot;lrTPR&quot;:0.891647855530474,&quot;rfFPR&quot;:0.32515337423312884,&quot;rfTPR&quot;:0.9142212189616253},{&quot;lrFPR&quot;:0.36134969325153377,&quot;lrTPR&quot;:0.8939051918735892,&quot;rfFPR&quot;:0.3300613496932515,&quot;rfTPR&quot;:0.9142212189616253},{&quot;lrFPR&quot;:0.3619631901840491,&quot;lrTPR&quot;:0.8939051918735892,&quot;rfFPR&quot;:0.3319018404907976,&quot;rfTPR&quot;:0.9142212189616253},{&quot;lrFPR&quot;:0.36625766871165644,&quot;lrTPR&quot;:0.8939051918735892,&quot;rfFPR&quot;:0.3325153374233129,&quot;rfTPR&quot;:0.9164785553047404},{&quot;lrFPR&quot;:0.36625766871165644,&quot;lrTPR&quot;:0.8961625282167043,&quot;rfFPR&quot;:0.3355828220858896,&quot;rfTPR&quot;:0.9164785553047404},{&quot;lrFPR&quot;:0.3674846625766871,&quot;lrTPR&quot;:0.8984198645598194,&quot;rfFPR&quot;:0.3361963190184049,&quot;rfTPR&quot;:0.9164785553047404},{&quot;lrFPR&quot;:0.36871165644171777,&quot;lrTPR&quot;:0.8984198645598194,&quot;rfFPR&quot;:0.34662576687116564,&quot;rfTPR&quot;:0.9209932279909706},{&quot;lrFPR&quot;:0.3693251533742331,&quot;lrTPR&quot;:0.8984198645598194,&quot;rfFPR&quot;:0.350920245398773,&quot;rfTPR&quot;:0.927765237020316},{&quot;lrFPR&quot;:0.37116564417177916,&quot;lrTPR&quot;:0.8984198645598194,&quot;rfFPR&quot;:0.35521472392638037,&quot;rfTPR&quot;:0.927765237020316},{&quot;lrFPR&quot;:0.3717791411042945,&quot;lrTPR&quot;:0.8984198645598194,&quot;rfFPR&quot;:0.3588957055214724,&quot;rfTPR&quot;:0.927765237020316},{&quot;lrFPR&quot;:0.37239263803680983,&quot;lrTPR&quot;:0.8984198645598194,&quot;rfFPR&quot;:0.36441717791411044,&quot;rfTPR&quot;:0.9300225733634312},{&quot;lrFPR&quot;:0.37484662576687117,&quot;lrTPR&quot;:0.9029345372460497,&quot;rfFPR&quot;:0.36871165644171777,&quot;rfTPR&quot;:0.9322799097065463},{&quot;lrFPR&quot;:0.37607361963190183,&quot;lrTPR&quot;:0.9029345372460497,&quot;rfFPR&quot;:0.36871165644171777,&quot;rfTPR&quot;:0.9345372460496614},{&quot;lrFPR&quot;:0.38282208588957056,&quot;lrTPR&quot;:0.909706546275395,&quot;rfFPR&quot;:0.3717791411042945,&quot;rfTPR&quot;:0.9390519187358917},{&quot;lrFPR&quot;:0.38466257668711656,&quot;lrTPR&quot;:0.9119638826185101,&quot;rfFPR&quot;:0.37239263803680983,&quot;rfTPR&quot;:0.9390519187358917},{&quot;lrFPR&quot;:0.38588957055214723,&quot;lrTPR&quot;:0.9142212189616253,&quot;rfFPR&quot;:0.3736196319018405,&quot;rfTPR&quot;:0.9413092550790068},{&quot;lrFPR&quot;:0.3950920245398773,&quot;lrTPR&quot;:0.9142212189616253,&quot;rfFPR&quot;:0.37668711656441717,&quot;rfTPR&quot;:0.9413092550790068},{&quot;lrFPR&quot;:0.39754601226993863,&quot;lrTPR&quot;:0.9164785553047404,&quot;rfFPR&quot;:0.3773006134969325,&quot;rfTPR&quot;:0.9435665914221218},{&quot;lrFPR&quot;:0.39815950920245397,&quot;lrTPR&quot;:0.9164785553047404,&quot;rfFPR&quot;:0.37791411042944784,&quot;rfTPR&quot;:0.9435665914221218},{&quot;lrFPR&quot;:0.3993865030674847,&quot;lrTPR&quot;:0.9164785553047404,&quot;rfFPR&quot;:0.37852760736196317,&quot;rfTPR&quot;:0.9435665914221218},{&quot;lrFPR&quot;:0.405521472392638,&quot;lrTPR&quot;:0.9209932279909706,&quot;rfFPR&quot;:0.3852760736196319,&quot;rfTPR&quot;:0.945823927765237},{&quot;lrFPR&quot;:0.4134969325153374,&quot;lrTPR&quot;:0.9232505643340858,&quot;rfFPR&quot;:0.3871165644171779,&quot;rfTPR&quot;:0.945823927765237},{&quot;lrFPR&quot;:0.4165644171779141,&quot;lrTPR&quot;:0.9232505643340858,&quot;rfFPR&quot;:0.3920245398773006,&quot;rfTPR&quot;:0.9480812641083521},{&quot;lrFPR&quot;:0.42024539877300615,&quot;lrTPR&quot;:0.9232505643340858,&quot;rfFPR&quot;:0.39263803680981596,&quot;rfTPR&quot;:0.9480812641083521},{&quot;lrFPR&quot;:0.4288343558282209,&quot;lrTPR&quot;:0.9255079006772009,&quot;rfFPR&quot;:0.39386503067484663,&quot;rfTPR&quot;:0.9480812641083521},{&quot;lrFPR&quot;:0.43190184049079755,&quot;lrTPR&quot;:0.9255079006772009,&quot;rfFPR&quot;:0.39570552147239263,&quot;rfTPR&quot;:0.9480812641083521},{&quot;lrFPR&quot;:0.4361963190184049,&quot;lrTPR&quot;:0.927765237020316,&quot;rfFPR&quot;:0.3993865030674847,&quot;rfTPR&quot;:0.9503386004514672},{&quot;lrFPR&quot;:0.4423312883435583,&quot;lrTPR&quot;:0.9300225733634312,&quot;rfFPR&quot;:0.401840490797546,&quot;rfTPR&quot;:0.9525959367945824},{&quot;lrFPR&quot;:0.44355828220858895,&quot;lrTPR&quot;:0.9300225733634312,&quot;rfFPR&quot;:0.41042944785276075,&quot;rfTPR&quot;:0.9548532731376975},{&quot;lrFPR&quot;:0.4447852760736196,&quot;lrTPR&quot;:0.9300225733634312,&quot;rfFPR&quot;:0.41411042944785276,&quot;rfTPR&quot;:0.9571106094808126},{&quot;lrFPR&quot;:0.4503067484662577,&quot;lrTPR&quot;:0.9345372460496614,&quot;rfFPR&quot;:0.41840490797546015,&quot;rfTPR&quot;:0.9571106094808126},{&quot;lrFPR&quot;:0.46503067484662575,&quot;lrTPR&quot;:0.9390519187358917,&quot;rfFPR&quot;:0.42024539877300615,&quot;rfTPR&quot;:0.9571106094808126},{&quot;lrFPR&quot;:0.4742331288343558,&quot;lrTPR&quot;:0.9390519187358917,&quot;rfFPR&quot;:0.4233128834355828,&quot;rfTPR&quot;:0.9571106094808126},{&quot;lrFPR&quot;:0.47975460122699387,&quot;lrTPR&quot;:0.9413092550790068,&quot;rfFPR&quot;:0.4251533742331288,&quot;rfTPR&quot;:0.9571106094808126},{&quot;lrFPR&quot;:0.48098159509202454,&quot;lrTPR&quot;:0.9413092550790068,&quot;rfFPR&quot;:0.4325153374233129,&quot;rfTPR&quot;:0.9593679458239278},{&quot;lrFPR&quot;:0.4865030674846626,&quot;lrTPR&quot;:0.9413092550790068,&quot;rfFPR&quot;:0.4361963190184049,&quot;rfTPR&quot;:0.9593679458239278},{&quot;lrFPR&quot;:0.48773006134969327,&quot;lrTPR&quot;:0.9435665914221218,&quot;rfFPR&quot;:0.4392638036809816,&quot;rfTPR&quot;:0.9593679458239278},{&quot;lrFPR&quot;:0.4901840490797546,&quot;lrTPR&quot;:0.9435665914221218,&quot;rfFPR&quot;:0.4441717791411043,&quot;rfTPR&quot;:0.9593679458239278},{&quot;lrFPR&quot;:0.49325153374233127,&quot;lrTPR&quot;:0.9435665914221218,&quot;rfFPR&quot;:0.4466257668711656,&quot;rfTPR&quot;:0.9593679458239278},{&quot;lrFPR&quot;:0.4938650306748466,&quot;lrTPR&quot;:0.9435665914221218,&quot;rfFPR&quot;:0.447239263803681,&quot;rfTPR&quot;:0.9593679458239278},{&quot;lrFPR&quot;:0.5012269938650307,&quot;lrTPR&quot;:0.9435665914221218,&quot;rfFPR&quot;:0.44969325153374234,&quot;rfTPR&quot;:0.9593679458239278},{&quot;lrFPR&quot;:0.503680981595092,&quot;lrTPR&quot;:0.9435665914221218,&quot;rfFPR&quot;:0.45521472392638035,&quot;rfTPR&quot;:0.9593679458239278},{&quot;lrFPR&quot;:0.5049079754601227,&quot;lrTPR&quot;:0.9435665914221218,&quot;rfFPR&quot;:0.4558282208588957,&quot;rfTPR&quot;:0.9593679458239278},{&quot;lrFPR&quot;:0.507361963190184,&quot;lrTPR&quot;:0.9435665914221218,&quot;rfFPR&quot;:0.4588957055214724,&quot;rfTPR&quot;:0.9616252821670429},{&quot;lrFPR&quot;:0.5116564417177915,&quot;lrTPR&quot;:0.945823927765237,&quot;rfFPR&quot;:0.46134969325153374,&quot;rfTPR&quot;:0.963882618510158},{&quot;lrFPR&quot;:0.5141104294478528,&quot;lrTPR&quot;:0.945823927765237,&quot;rfFPR&quot;:0.46319018404907975,&quot;rfTPR&quot;:0.9661399548532731},{&quot;lrFPR&quot;:0.5165644171779141,&quot;lrTPR&quot;:0.9480812641083521,&quot;rfFPR&quot;:0.4638036809815951,&quot;rfTPR&quot;:0.9661399548532731},{&quot;lrFPR&quot;:0.5251533742331288,&quot;lrTPR&quot;:0.9503386004514672,&quot;rfFPR&quot;:0.46503067484662575,&quot;rfTPR&quot;:0.9661399548532731},{&quot;lrFPR&quot;:0.5263803680981595,&quot;lrTPR&quot;:0.9503386004514672,&quot;rfFPR&quot;:0.4656441717791411,&quot;rfTPR&quot;:0.9683972911963883},{&quot;lrFPR&quot;:0.5325153374233129,&quot;lrTPR&quot;:0.9503386004514672,&quot;rfFPR&quot;:0.4687116564417178,&quot;rfTPR&quot;:0.9683972911963883},{&quot;lrFPR&quot;:0.5423312883435583,&quot;lrTPR&quot;:0.9503386004514672,&quot;rfFPR&quot;:0.46932515337423314,&quot;rfTPR&quot;:0.9683972911963883},{&quot;lrFPR&quot;:0.5429447852760736,&quot;lrTPR&quot;:0.9503386004514672,&quot;rfFPR&quot;:0.4736196319018405,&quot;rfTPR&quot;:0.9683972911963883},{&quot;lrFPR&quot;:0.5453987730061349,&quot;lrTPR&quot;:0.9503386004514672,&quot;rfFPR&quot;:0.47914110429447854,&quot;rfTPR&quot;:0.9706546275395034},{&quot;lrFPR&quot;:0.5460122699386503,&quot;lrTPR&quot;:0.9503386004514672,&quot;rfFPR&quot;:0.47975460122699387,&quot;rfTPR&quot;:0.9729119638826185},{&quot;lrFPR&quot;:0.5472392638036809,&quot;lrTPR&quot;:0.9503386004514672,&quot;rfFPR&quot;:0.4803680981595092,&quot;rfTPR&quot;:0.9729119638826185},{&quot;lrFPR&quot;:0.5484662576687117,&quot;lrTPR&quot;:0.9503386004514672,&quot;rfFPR&quot;:0.48282208588957054,&quot;rfTPR&quot;:0.9751693002257337},{&quot;lrFPR&quot;:0.5496932515337424,&quot;lrTPR&quot;:0.9503386004514672,&quot;rfFPR&quot;:0.48466257668711654,&quot;rfTPR&quot;:0.9751693002257337},{&quot;lrFPR&quot;:0.554601226993865,&quot;lrTPR&quot;:0.9503386004514672,&quot;rfFPR&quot;:0.49079754601226994,&quot;rfTPR&quot;:0.9751693002257337},{&quot;lrFPR&quot;:0.560122699386503,&quot;lrTPR&quot;:0.9525959367945824,&quot;rfFPR&quot;:0.4938650306748466,&quot;rfTPR&quot;:0.9751693002257337},{&quot;lrFPR&quot;:0.561963190184049,&quot;lrTPR&quot;:0.9525959367945824,&quot;rfFPR&quot;:0.49570552147239266,&quot;rfTPR&quot;:0.9751693002257337},{&quot;lrFPR&quot;:0.5705521472392638,&quot;lrTPR&quot;:0.9571106094808126,&quot;rfFPR&quot;:0.503680981595092,&quot;rfTPR&quot;:0.9774266365688488},{&quot;lrFPR&quot;:0.5711656441717792,&quot;lrTPR&quot;:0.9571106094808126,&quot;rfFPR&quot;:0.5049079754601227,&quot;rfTPR&quot;:0.9774266365688488},{&quot;lrFPR&quot;:0.5766871165644172,&quot;lrTPR&quot;:0.9571106094808126,&quot;rfFPR&quot;:0.505521472392638,&quot;rfTPR&quot;:0.9774266365688488},{&quot;lrFPR&quot;:0.5779141104294478,&quot;lrTPR&quot;:0.9571106094808126,&quot;rfFPR&quot;:0.50920245398773,&quot;rfTPR&quot;:0.9774266365688488},{&quot;lrFPR&quot;:0.5785276073619632,&quot;lrTPR&quot;:0.9571106094808126,&quot;rfFPR&quot;:0.5110429447852761,&quot;rfTPR&quot;:0.9774266365688488},{&quot;lrFPR&quot;:0.5797546012269938,&quot;lrTPR&quot;:0.9571106094808126,&quot;rfFPR&quot;:0.5153374233128835,&quot;rfTPR&quot;:0.9774266365688488},{&quot;lrFPR&quot;:0.5840490797546012,&quot;lrTPR&quot;:0.9571106094808126,&quot;rfFPR&quot;:0.5165644171779141,&quot;rfTPR&quot;:0.9774266365688488},{&quot;lrFPR&quot;:0.5846625766871165,&quot;lrTPR&quot;:0.9571106094808126,&quot;rfFPR&quot;:0.5177914110429448,&quot;rfTPR&quot;:0.9774266365688488},{&quot;lrFPR&quot;:0.5858895705521472,&quot;lrTPR&quot;:0.9571106094808126,&quot;rfFPR&quot;:0.5257668711656441,&quot;rfTPR&quot;:0.9774266365688488},{&quot;lrFPR&quot;:0.5877300613496933,&quot;lrTPR&quot;:0.9593679458239278,&quot;rfFPR&quot;:0.5269938650306748,&quot;rfTPR&quot;:0.9774266365688488},{&quot;lrFPR&quot;:0.5901840490797546,&quot;lrTPR&quot;:0.9593679458239278,&quot;rfFPR&quot;:0.5306748466257669,&quot;rfTPR&quot;:0.9774266365688488},{&quot;lrFPR&quot;:0.5914110429447853,&quot;lrTPR&quot;:0.9593679458239278,&quot;rfFPR&quot;:0.5331288343558283,&quot;rfTPR&quot;:0.9774266365688488},{&quot;lrFPR&quot;:0.5920245398773006,&quot;lrTPR&quot;:0.9593679458239278,&quot;rfFPR&quot;:0.5343558282208589,&quot;rfTPR&quot;:0.9774266365688488},{&quot;lrFPR&quot;:0.594478527607362,&quot;lrTPR&quot;:0.9593679458239278,&quot;rfFPR&quot;:0.5349693251533743,&quot;rfTPR&quot;:0.9774266365688488},{&quot;lrFPR&quot;:0.5957055214723926,&quot;lrTPR&quot;:0.9593679458239278,&quot;rfFPR&quot;:0.5374233128834356,&quot;rfTPR&quot;:0.9774266365688488},{&quot;lrFPR&quot;:0.596319018404908,&quot;lrTPR&quot;:0.9593679458239278,&quot;rfFPR&quot;:0.5380368098159509,&quot;rfTPR&quot;:0.9774266365688488},{&quot;lrFPR&quot;:0.5969325153374233,&quot;lrTPR&quot;:0.9593679458239278,&quot;rfFPR&quot;:0.5392638036809816,&quot;rfTPR&quot;:0.9774266365688488},{&quot;lrFPR&quot;:0.598159509202454,&quot;lrTPR&quot;:0.9593679458239278,&quot;rfFPR&quot;:0.5398773006134969,&quot;rfTPR&quot;:0.9774266365688488},{&quot;lrFPR&quot;:0.6006134969325153,&quot;lrTPR&quot;:0.9593679458239278,&quot;rfFPR&quot;:0.5429447852760736,&quot;rfTPR&quot;:0.9796839729119639},{&quot;lrFPR&quot;:0.6073619631901841,&quot;lrTPR&quot;:0.9616252821670429,&quot;rfFPR&quot;:0.5460122699386503,&quot;rfTPR&quot;:0.9796839729119639},{&quot;lrFPR&quot;:0.6128834355828221,&quot;lrTPR&quot;:0.9616252821670429,&quot;rfFPR&quot;:0.5484662576687117,&quot;rfTPR&quot;:0.9796839729119639},{&quot;lrFPR&quot;:0.6147239263803681,&quot;lrTPR&quot;:0.9616252821670429,&quot;rfFPR&quot;:0.5576687116564417,&quot;rfTPR&quot;:0.9796839729119639},{&quot;lrFPR&quot;:0.6171779141104294,&quot;lrTPR&quot;:0.9616252821670429,&quot;rfFPR&quot;:0.5625766871165644,&quot;rfTPR&quot;:0.9796839729119639},{&quot;lrFPR&quot;:0.6208588957055214,&quot;lrTPR&quot;:0.9616252821670429,&quot;rfFPR&quot;:0.5644171779141104,&quot;rfTPR&quot;:0.9796839729119639},{&quot;lrFPR&quot;:0.6239263803680981,&quot;lrTPR&quot;:0.9616252821670429,&quot;rfFPR&quot;:0.5650306748466257,&quot;rfTPR&quot;:0.9796839729119639},{&quot;lrFPR&quot;:0.6263803680981596,&quot;lrTPR&quot;:0.9616252821670429,&quot;rfFPR&quot;:0.5674846625766872,&quot;rfTPR&quot;:0.9796839729119639},{&quot;lrFPR&quot;:0.6325153374233129,&quot;lrTPR&quot;:0.963882618510158,&quot;rfFPR&quot;:0.5680981595092025,&quot;rfTPR&quot;:0.9796839729119639},{&quot;lrFPR&quot;:0.6343558282208589,&quot;lrTPR&quot;:0.963882618510158,&quot;rfFPR&quot;:0.5705521472392638,&quot;rfTPR&quot;:0.9796839729119639},{&quot;lrFPR&quot;:0.6361963190184049,&quot;lrTPR&quot;:0.963882618510158,&quot;rfFPR&quot;:0.5779141104294478,&quot;rfTPR&quot;:0.9796839729119639},{&quot;lrFPR&quot;:0.6386503067484662,&quot;lrTPR&quot;:0.963882618510158,&quot;rfFPR&quot;:0.5797546012269938,&quot;rfTPR&quot;:0.9796839729119639},{&quot;lrFPR&quot;:0.6392638036809816,&quot;lrTPR&quot;:0.963882618510158,&quot;rfFPR&quot;:0.5809815950920245,&quot;rfTPR&quot;:0.9796839729119639},{&quot;lrFPR&quot;:0.6423312883435582,&quot;lrTPR&quot;:0.963882618510158,&quot;rfFPR&quot;:0.5834355828220859,&quot;rfTPR&quot;:0.9841986455981941},{&quot;lrFPR&quot;:0.6429447852760736,&quot;lrTPR&quot;:0.963882618510158,&quot;rfFPR&quot;:0.5865030674846625,&quot;rfTPR&quot;:0.9841986455981941},{&quot;lrFPR&quot;:0.6484662576687117,&quot;lrTPR&quot;:0.963882618510158,&quot;rfFPR&quot;:0.5877300613496933,&quot;rfTPR&quot;:0.9841986455981941},{&quot;lrFPR&quot;:0.6515337423312884,&quot;lrTPR&quot;:0.9661399548532731,&quot;rfFPR&quot;:0.5883435582822086,&quot;rfTPR&quot;:0.9841986455981941},{&quot;lrFPR&quot;:0.6558282208588957,&quot;lrTPR&quot;:0.9683972911963883,&quot;rfFPR&quot;:0.588957055214724,&quot;rfTPR&quot;:0.9841986455981941},{&quot;lrFPR&quot;:0.6576687116564417,&quot;lrTPR&quot;:0.9683972911963883,&quot;rfFPR&quot;:0.5932515337423313,&quot;rfTPR&quot;:0.9841986455981941},{&quot;lrFPR&quot;:0.6674846625766871,&quot;lrTPR&quot;:0.9683972911963883,&quot;rfFPR&quot;:0.5987730061349693,&quot;rfTPR&quot;:0.9841986455981941},{&quot;lrFPR&quot;:0.6699386503067485,&quot;lrTPR&quot;:0.9683972911963883,&quot;rfFPR&quot;:0.6,&quot;rfTPR&quot;:0.9841986455981941},{&quot;lrFPR&quot;:0.6717791411042945,&quot;lrTPR&quot;:0.9683972911963883,&quot;rfFPR&quot;:0.6049079754601226,&quot;rfTPR&quot;:0.9841986455981941},{&quot;lrFPR&quot;:0.6736196319018405,&quot;lrTPR&quot;:0.9683972911963883,&quot;rfFPR&quot;:0.6061349693251534,&quot;rfTPR&quot;:0.9841986455981941},{&quot;lrFPR&quot;:0.6760736196319018,&quot;lrTPR&quot;:0.9683972911963883,&quot;rfFPR&quot;:0.6073619631901841,&quot;rfTPR&quot;:0.9841986455981941},{&quot;lrFPR&quot;:0.6791411042944785,&quot;lrTPR&quot;:0.9683972911963883,&quot;rfFPR&quot;:0.6085889570552148,&quot;rfTPR&quot;:0.9841986455981941},{&quot;lrFPR&quot;:0.6797546012269938,&quot;lrTPR&quot;:0.9683972911963883,&quot;rfFPR&quot;:0.6122699386503068,&quot;rfTPR&quot;:0.9841986455981941},{&quot;lrFPR&quot;:0.6822085889570552,&quot;lrTPR&quot;:0.9683972911963883,&quot;rfFPR&quot;:0.6190184049079754,&quot;rfTPR&quot;:0.9841986455981941},{&quot;lrFPR&quot;:0.6828220858895706,&quot;lrTPR&quot;:0.9683972911963883,&quot;rfFPR&quot;:0.6214723926380368,&quot;rfTPR&quot;:0.9841986455981941},{&quot;lrFPR&quot;:0.6846625766871166,&quot;lrTPR&quot;:0.9706546275395034,&quot;rfFPR&quot;:0.6220858895705521,&quot;rfTPR&quot;:0.9841986455981941},{&quot;lrFPR&quot;:0.6920245398773006,&quot;lrTPR&quot;:0.9706546275395034,&quot;rfFPR&quot;:0.6276073619631902,&quot;rfTPR&quot;:0.9841986455981941},{&quot;lrFPR&quot;:0.6920245398773006,&quot;lrTPR&quot;:0.9729119638826185,&quot;rfFPR&quot;:0.6325153374233129,&quot;rfTPR&quot;:0.9864559819413092},{&quot;lrFPR&quot;:0.692638036809816,&quot;lrTPR&quot;:0.9751693002257337,&quot;rfFPR&quot;:0.6337423312883436,&quot;rfTPR&quot;:0.9864559819413092},{&quot;lrFPR&quot;:0.6932515337423313,&quot;lrTPR&quot;:0.9751693002257337,&quot;rfFPR&quot;:0.6343558282208589,&quot;rfTPR&quot;:0.9864559819413092},{&quot;lrFPR&quot;:0.6938650306748466,&quot;lrTPR&quot;:0.9751693002257337,&quot;rfFPR&quot;:0.6398773006134969,&quot;rfTPR&quot;:0.9864559819413092},{&quot;lrFPR&quot;:0.6957055214723926,&quot;lrTPR&quot;:0.9751693002257337,&quot;rfFPR&quot;:0.6411042944785276,&quot;rfTPR&quot;:0.9864559819413092},{&quot;lrFPR&quot;:0.6969325153374233,&quot;lrTPR&quot;:0.9751693002257337,&quot;rfFPR&quot;:0.6417177914110429,&quot;rfTPR&quot;:0.9864559819413092},{&quot;lrFPR&quot;:0.7012269938650306,&quot;lrTPR&quot;:0.9751693002257337,&quot;rfFPR&quot;:0.6466257668711657,&quot;rfTPR&quot;:0.9864559819413092},{&quot;lrFPR&quot;:0.7055214723926381,&quot;lrTPR&quot;:0.9751693002257337,&quot;rfFPR&quot;:0.647239263803681,&quot;rfTPR&quot;:0.9864559819413092},{&quot;lrFPR&quot;:0.7085889570552147,&quot;lrTPR&quot;:0.9751693002257337,&quot;rfFPR&quot;:0.6478527607361964,&quot;rfTPR&quot;:0.9864559819413092},{&quot;lrFPR&quot;:0.7141104294478527,&quot;lrTPR&quot;:0.9751693002257337,&quot;rfFPR&quot;:0.6496932515337424,&quot;rfTPR&quot;:0.9864559819413092},{&quot;lrFPR&quot;:0.7233128834355829,&quot;lrTPR&quot;:0.9774266365688488,&quot;rfFPR&quot;:0.654601226993865,&quot;rfTPR&quot;:0.9887133182844243},{&quot;lrFPR&quot;:0.7343558282208589,&quot;lrTPR&quot;:0.9796839729119639,&quot;rfFPR&quot;:0.6570552147239264,&quot;rfTPR&quot;:0.9887133182844243},{&quot;lrFPR&quot;:0.7349693251533742,&quot;lrTPR&quot;:0.9796839729119639,&quot;rfFPR&quot;:0.6644171779141105,&quot;rfTPR&quot;:0.9887133182844243},{&quot;lrFPR&quot;:0.7368098159509202,&quot;lrTPR&quot;:0.9796839729119639,&quot;rfFPR&quot;:0.6699386503067485,&quot;rfTPR&quot;:0.9887133182844243},{&quot;lrFPR&quot;:0.745398773006135,&quot;lrTPR&quot;:0.981941309255079,&quot;rfFPR&quot;:0.6711656441717792,&quot;rfTPR&quot;:0.9887133182844243},{&quot;lrFPR&quot;:0.747239263803681,&quot;lrTPR&quot;:0.981941309255079,&quot;rfFPR&quot;:0.6742331288343558,&quot;rfTPR&quot;:0.9887133182844243},{&quot;lrFPR&quot;:0.749079754601227,&quot;lrTPR&quot;:0.9841986455981941,&quot;rfFPR&quot;:0.6754601226993865,&quot;rfTPR&quot;:0.9909706546275395},{&quot;lrFPR&quot;:0.7503067484662577,&quot;lrTPR&quot;:0.9841986455981941,&quot;rfFPR&quot;:0.6779141104294478,&quot;rfTPR&quot;:0.9932279909706546},{&quot;lrFPR&quot;:0.750920245398773,&quot;lrTPR&quot;:0.9841986455981941,&quot;rfFPR&quot;:0.6797546012269938,&quot;rfTPR&quot;:0.9932279909706546},{&quot;lrFPR&quot;:0.7552147239263803,&quot;lrTPR&quot;:0.9841986455981941,&quot;rfFPR&quot;:0.6871165644171779,&quot;rfTPR&quot;:0.9932279909706546},{&quot;lrFPR&quot;:0.758282208588957,&quot;lrTPR&quot;:0.9841986455981941,&quot;rfFPR&quot;:0.6914110429447853,&quot;rfTPR&quot;:0.9954853273137697},{&quot;lrFPR&quot;:0.7625766871165645,&quot;lrTPR&quot;:0.9841986455981941,&quot;rfFPR&quot;:0.694478527607362,&quot;rfTPR&quot;:0.9954853273137697},{&quot;lrFPR&quot;:0.7674846625766871,&quot;lrTPR&quot;:0.9841986455981941,&quot;rfFPR&quot;:0.6957055214723926,&quot;rfTPR&quot;:0.9954853273137697},{&quot;lrFPR&quot;:0.7717791411042945,&quot;lrTPR&quot;:0.9841986455981941,&quot;rfFPR&quot;:0.701840490797546,&quot;rfTPR&quot;:0.9954853273137697},{&quot;lrFPR&quot;:0.7723926380368098,&quot;lrTPR&quot;:0.9841986455981941,&quot;rfFPR&quot;:0.7024539877300614,&quot;rfTPR&quot;:0.9954853273137697},{&quot;lrFPR&quot;:0.7815950920245399,&quot;lrTPR&quot;:0.9841986455981941,&quot;rfFPR&quot;:0.7141104294478527,&quot;rfTPR&quot;:0.9954853273137697},{&quot;lrFPR&quot;:0.7822085889570553,&quot;lrTPR&quot;:0.9841986455981941,&quot;rfFPR&quot;:0.7184049079754601,&quot;rfTPR&quot;:0.9954853273137697},{&quot;lrFPR&quot;:0.7846625766871166,&quot;lrTPR&quot;:0.9841986455981941,&quot;rfFPR&quot;:0.7196319018404908,&quot;rfTPR&quot;:0.9954853273137697},{&quot;lrFPR&quot;:0.7914110429447853,&quot;lrTPR&quot;:0.9841986455981941,&quot;rfFPR&quot;:0.7202453987730061,&quot;rfTPR&quot;:0.9954853273137697},{&quot;lrFPR&quot;:0.7932515337423313,&quot;lrTPR&quot;:0.9841986455981941,&quot;rfFPR&quot;:0.7214723926380369,&quot;rfTPR&quot;:0.9954853273137697},{&quot;lrFPR&quot;:0.7963190184049079,&quot;lrTPR&quot;:0.9841986455981941,&quot;rfFPR&quot;:0.7220858895705522,&quot;rfTPR&quot;:0.9954853273137697},{&quot;lrFPR&quot;:0.7969325153374233,&quot;lrTPR&quot;:0.9841986455981941,&quot;rfFPR&quot;:0.7257668711656442,&quot;rfTPR&quot;:0.9954853273137697},{&quot;lrFPR&quot;:0.798159509202454,&quot;lrTPR&quot;:0.9841986455981941,&quot;rfFPR&quot;:0.7269938650306749,&quot;rfTPR&quot;:0.9954853273137697},{&quot;lrFPR&quot;:0.8024539877300614,&quot;lrTPR&quot;:0.9864559819413092,&quot;rfFPR&quot;:0.7288343558282209,&quot;rfTPR&quot;:0.9954853273137697},{&quot;lrFPR&quot;:0.8049079754601227,&quot;lrTPR&quot;:0.9864559819413092,&quot;rfFPR&quot;:0.7325153374233129,&quot;rfTPR&quot;:0.9954853273137697},{&quot;lrFPR&quot;:0.805521472392638,&quot;lrTPR&quot;:0.9864559819413092,&quot;rfFPR&quot;:0.7441717791411043,&quot;rfTPR&quot;:0.9954853273137697},{&quot;lrFPR&quot;:0.8116564417177914,&quot;lrTPR&quot;:0.9864559819413092,&quot;rfFPR&quot;:0.749079754601227,&quot;rfTPR&quot;:0.9954853273137697},{&quot;lrFPR&quot;:0.8147239263803681,&quot;lrTPR&quot;:0.9864559819413092,&quot;rfFPR&quot;:0.7625766871165645,&quot;rfTPR&quot;:0.9954853273137697},{&quot;lrFPR&quot;:0.8159509202453987,&quot;lrTPR&quot;:0.9864559819413092,&quot;rfFPR&quot;:0.7662576687116565,&quot;rfTPR&quot;:0.9954853273137697},{&quot;lrFPR&quot;:0.8165644171779141,&quot;lrTPR&quot;:0.9864559819413092,&quot;rfFPR&quot;:0.7680981595092025,&quot;rfTPR&quot;:0.9954853273137697},{&quot;lrFPR&quot;:0.8196319018404908,&quot;lrTPR&quot;:0.9864559819413092,&quot;rfFPR&quot;:0.7699386503067485,&quot;rfTPR&quot;:0.9977426636568849},{&quot;lrFPR&quot;:0.8226993865030675,&quot;lrTPR&quot;:0.9864559819413092,&quot;rfFPR&quot;:0.7730061349693251,&quot;rfTPR&quot;:0.9977426636568849},{&quot;lrFPR&quot;:0.8269938650306748,&quot;lrTPR&quot;:0.9864559819413092,&quot;rfFPR&quot;:0.7742331288343558,&quot;rfTPR&quot;:0.9977426636568849},{&quot;lrFPR&quot;:0.8294478527607362,&quot;lrTPR&quot;:0.9864559819413092,&quot;rfFPR&quot;:0.7791411042944786,&quot;rfTPR&quot;:0.9977426636568849},{&quot;lrFPR&quot;:0.8386503067484663,&quot;lrTPR&quot;:0.9887133182844243,&quot;rfFPR&quot;:0.7858895705521473,&quot;rfTPR&quot;:0.9977426636568849},{&quot;lrFPR&quot;:0.839877300613497,&quot;lrTPR&quot;:0.9887133182844243,&quot;rfFPR&quot;:0.7901840490797546,&quot;rfTPR&quot;:0.9977426636568849},{&quot;lrFPR&quot;:0.8429447852760736,&quot;lrTPR&quot;:0.9887133182844243,&quot;rfFPR&quot;:0.7932515337423313,&quot;rfTPR&quot;:0.9977426636568849},{&quot;lrFPR&quot;:0.850920245398773,&quot;lrTPR&quot;:0.9887133182844243,&quot;rfFPR&quot;:0.7957055214723926,&quot;rfTPR&quot;:0.9977426636568849},{&quot;lrFPR&quot;:0.8539877300613496,&quot;lrTPR&quot;:0.9887133182844243,&quot;rfFPR&quot;:0.8171779141104294,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8570552147239264,&quot;lrTPR&quot;:0.9909706546275395,&quot;rfFPR&quot;:0.8190184049079755,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8576687116564418,&quot;lrTPR&quot;:0.9909706546275395,&quot;rfFPR&quot;:0.8233128834355828,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8588957055214724,&quot;lrTPR&quot;:0.9909706546275395,&quot;rfFPR&quot;:0.8239263803680982,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8607361963190184,&quot;lrTPR&quot;:0.9909706546275395,&quot;rfFPR&quot;:0.8257668711656442,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8650306748466258,&quot;lrTPR&quot;:0.9932279909706546,&quot;rfFPR&quot;:0.8263803680981595,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8656441717791411,&quot;lrTPR&quot;:0.9932279909706546,&quot;rfFPR&quot;:0.8288343558282208,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8680981595092024,&quot;lrTPR&quot;:0.9932279909706546,&quot;rfFPR&quot;:0.8300613496932515,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8699386503067484,&quot;lrTPR&quot;:0.9932279909706546,&quot;rfFPR&quot;:0.8349693251533742,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8736196319018404,&quot;lrTPR&quot;:0.9932279909706546,&quot;rfFPR&quot;:0.8447852760736196,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8748466257668711,&quot;lrTPR&quot;:0.9932279909706546,&quot;rfFPR&quot;:0.8521472392638036,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8754601226993866,&quot;lrTPR&quot;:0.9932279909706546,&quot;rfFPR&quot;:0.8533742331288343,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8760736196319019,&quot;lrTPR&quot;:0.9932279909706546,&quot;rfFPR&quot;:0.8539877300613496,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8871165644171779,&quot;lrTPR&quot;:0.9932279909706546,&quot;rfFPR&quot;:0.854601226993865,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8883435582822086,&quot;lrTPR&quot;:0.9932279909706546,&quot;rfFPR&quot;:0.8570552147239264,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8901840490797546,&quot;lrTPR&quot;:0.9932279909706546,&quot;rfFPR&quot;:0.8662576687116564,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8950920245398774,&quot;lrTPR&quot;:0.9932279909706546,&quot;rfFPR&quot;:0.8742331288343558,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9042944785276074,&quot;lrTPR&quot;:0.9932279909706546,&quot;rfFPR&quot;:0.8754601226993866,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9147239263803681,&quot;lrTPR&quot;:0.9932279909706546,&quot;rfFPR&quot;:0.8766871165644172,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9177914110429448,&quot;lrTPR&quot;:0.9932279909706546,&quot;rfFPR&quot;:0.8773006134969326,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9184049079754601,&quot;lrTPR&quot;:0.9954853273137697,&quot;rfFPR&quot;:0.8809815950920246,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9190184049079755,&quot;lrTPR&quot;:0.9954853273137697,&quot;rfFPR&quot;:0.8889570552147239,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9269938650306748,&quot;lrTPR&quot;:0.9954853273137697,&quot;rfFPR&quot;:0.8975460122699387,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9312883435582822,&quot;lrTPR&quot;:0.9977426636568849,&quot;rfFPR&quot;:0.9006134969325154,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9325153374233128,&quot;lrTPR&quot;:0.9977426636568849,&quot;rfFPR&quot;:0.9012269938650307,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.938036809815951,&quot;lrTPR&quot;:0.9977426636568849,&quot;rfFPR&quot;:0.903680981595092,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.941717791411043,&quot;lrTPR&quot;:0.9977426636568849,&quot;rfFPR&quot;:0.9049079754601227,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9484662576687116,&quot;lrTPR&quot;:0.9977426636568849,&quot;rfFPR&quot;:0.9079754601226994,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.949079754601227,&quot;lrTPR&quot;:0.9977426636568849,&quot;rfFPR&quot;:0.90920245398773,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9533742331288344,&quot;lrTPR&quot;:0.9977426636568849,&quot;rfFPR&quot;:0.9153374233128835,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9539877300613497,&quot;lrTPR&quot;:0.9977426636568849,&quot;rfFPR&quot;:0.9177914110429448,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9564417177914111,&quot;lrTPR&quot;:0.9977426636568849,&quot;rfFPR&quot;:0.9190184049079755,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9570552147239264,&quot;lrTPR&quot;:0.9977426636568849,&quot;rfFPR&quot;:0.9251533742331288,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9576687116564417,&quot;lrTPR&quot;:0.9977426636568849,&quot;rfFPR&quot;:0.9263803680981595,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9582822085889571,&quot;lrTPR&quot;:0.9977426636568849,&quot;rfFPR&quot;:0.9288343558282208,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9650306748466257,&quot;lrTPR&quot;:0.9977426636568849,&quot;rfFPR&quot;:0.9294478527607362,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9699386503067484,&quot;lrTPR&quot;:0.9977426636568849,&quot;rfFPR&quot;:0.9343558282208589,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9736196319018405,&quot;lrTPR&quot;:0.9977426636568849,&quot;rfFPR&quot;:0.9392638036809816,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9791411042944785,&quot;lrTPR&quot;:0.9977426636568849,&quot;rfFPR&quot;:0.939877300613497,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9797546012269939,&quot;lrTPR&quot;:0.9977426636568849,&quot;rfFPR&quot;:0.9423312883435583,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9803680981595092,&quot;lrTPR&quot;:0.9977426636568849,&quot;rfFPR&quot;:0.9429447852760736,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9828220858895705,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.9503067484662576,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9858895705521472,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.9527607361963191,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9920245398773007,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.9576687116564417,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.992638036809816,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.9644171779141104,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9938650306748467,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.9656441717791411,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.994478527607362,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.9687116564417177,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9975460122699387,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.9705521472392638,&quot;rfTPR&quot;:1.0}],&quot;genId&quot;:&quot;628848542&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/customC3Chart'], \n      function(playground, _magiccustomC3Chart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magiccustomC3Chart,\n    \"o\": {\"js\":\"var chartOptions = { data: { xs: {\\n                            'lrTPR': 'lrFPR',\\n                            'rfTPR': 'rfFPR',\\n                         }\\n                   },\\n                   axis: {\\n                      y: {\\n                        label: 'TPR'\\n                      },\\n                      x: {\\n                         label: 'FPR',\\n                         tick: {\\n                            count: 5\\n                         }\\n                      }\\n                   },\\n                   point: {\\n                        show: false\\n                   }\\n                  };\",\"headers\":[\"lrFPR\",\"lrTPR\",\"rfFPR\",\"rfTPR\"],\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon9d3b43ffc83f1128a4cdfc33a67f5115&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon065008ed48e404c587e0176db8f2c1ac&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 18
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "07DE1126FF72485EADB6E42DA3A80F1B"
    },
    "cell_type" : "code",
    "source" : "println(\"Area under precision-recall lr curve = \" + lrMetrics.areaUnderPR)\nprintln(\"Area under precision-recall rf curve = \" + rfMetrics.areaUnderPR)\n\nprintln(\"Area under roc lr curve = \" + lrMetrics.areaUnderROC)\nprintln(\"Area under roc rf curve = \" + rfMetrics.areaUnderROC)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "Area under precision-recall lr curve = 0.6705753487889279\nArea under precision-recall rf curve = 0.6986274708296392\nArea under roc lr curve = 0.8675026658726761\nArea under roc rf curve = 0.8901999750723602\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 19
    } ]
  }, {
    "metadata" : {
      "id" : "17CD2D328D794AA6A5EA6D18374BFD4C"
    },
    "cell_type" : "markdown",
    "source" : "It's easy to see what it's hard to achieve good precision with high recall related to positive reviews. What's because of low fraction of positive reviews in our unbalanced dataset. The quality of classification would be different if we will calculate metrics relating to negative reviews.\n\n**Problem**. Find the maximum accuracy of each classifier at level of recall of at least 0.8:\n  - while predicting positive reviews\n  - while predicting negative reviews"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "208B7A15C29E47ED9DCF1AB78AF184B0"
    },
    "cell_type" : "code",
    "source" : "// measuring predictions of positive reviews\nval lrPosPredictionAndLabels = lrPredictions\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(1), r.getAs[Double](1)))\nval rfPosPredictionAndLabels = rfPredictions\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(1), r.getAs[Double](1)))\nval lrPosMetrics = new BinaryClassificationMetrics(lrPosPredictionAndLabels)\nval rfPosMetrics = new BinaryClassificationMetrics(rfPosPredictionAndLabels)\n\n// measuring predictions of negative reviews\nval lrNegPredictionAndLabels = lrPredictions\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(0), 1.0 - r.getAs[Double](1)))\nval rfNegPredictionAndLabels = rfPredictions\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(0), 1.0 - r.getAs[Double](1)))\nval lrNegMetrics = new BinaryClassificationMetrics(lrNegPredictionAndLabels)\nval rfNegMetrics = new BinaryClassificationMetrics(rfNegPredictionAndLabels)\n\n\n// Obtain precision-recall curves\nval lrPosPrecisionRecall = lrPosMetrics.pr\nval rfPosPrecisionRecall = rfPosMetrics.pr\nval lrNegPrecisionRecall = lrNegMetrics.pr\nval rfNegPrecisionRecall = rfNegMetrics.pr",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "lrPosPredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[524] at map at <console>:113\nrfPosPredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[545] at map at <console>:116\nlrPosMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@3b4c3f43\nrfPosMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@28b97574\nlrNegPredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[566] at map at <console>:123\nrfNegPredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[587] at map at <console>:126\nlrNegMetrics: org.apache.spark...."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 20
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9B6B404DDBBE46049D6CC47F1B78FB87"
    },
    "cell_type" : "code",
    "source" : "println(\"=== Positive reviews prediction ===\")\nprintln(\"Logistic regression max accuracy at recall >= 0.8: \" + \n        lrPosMetrics.pr.filter(_._1 >= 0.8).map(_._2).max)\nprintln(\"Random Forest max accuracy at recall >= 0.8: \" + \n        rfPosMetrics.pr.filter(_._1 >= 0.8).map(_._2).max)\n\nprintln(\"=== Negative reviews prediction ===\")\nprintln(\"Logistic regression max accuracy at recall >= 0.8: \" + \n        lrNegMetrics.pr.filter(_._1 >= 0.8).map(_._2).max)\nprintln(\"Random Forest max accuracy at recall >= 0.8: \" + \n        rfNegMetrics.pr.filter(_._1 >= 0.8).map(_._2).max)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "=== Positive reviews prediction ===\nLogistic regression max accuracy at recall >= 0.8: 0.49859550561797755\nRandom Forest max accuracy at recall >= 0.8: 0.5395136778115501\n=== Negative reviews prediction ===\nLogistic regression max accuracy at recall >= 0.8: 0.9309608540925267\nRandom Forest max accuracy at recall >= 0.8: 0.9393723252496433\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 21
    } ]
  }, {
    "metadata" : {
      "id" : "0FAC2E3D9E274994B48017C51C94B775"
    },
    "cell_type" : "markdown",
    "source" : "Also we can conclude what complex, slow and heavy Random Forest with 200 decision trees doesn't perform much better then easy and fast Logistic Regression. That's because decision tree based models don't suite well for *sparse features* (bag-of-words is an example of sparse features)."
  }, {
    "metadata" : {
      "id" : "C4A27F6381894D7A8867569B6A018F70"
    },
    "cell_type" : "markdown",
    "source" : "Up to this point we have not performed hyperparameters tuning. From now let's use only LogisticRegression model and perform cross-validation or train-validation split (it is less expensive, but will not produce as reliable results) to find optimal `regularization parameter (regParam)` for Logistic Regression with respect to 'roc_auc' metric. Also searching for optimal value of regularization parameter on a logarithmic scale is good idea."
  }, {
    "metadata" : {
      "id" : "609BDE23913740A181B92C5E1A73CCBD"
    },
    "cell_type" : "markdown",
    "source" : "## Feature selection and dimensionality reduction"
  }, {
    "metadata" : {
      "id" : "E56CEDCB27264AFFBB3DE3B73912BA13"
    },
    "cell_type" : "markdown",
    "source" : "At this stage it can be concluded that the proposed text encoding may not be the best. Not every algorithm can be applied in this problem due to the large feature space. In addition, there is a lot of noise in our encoded data, because all the words have been taken to build the vocabulary, i.e., were taken even those words which were found only in a single review (think about typos). So it seems that it would be nice to reduce the dimensionality of the data and to get rid of the noise. One can perform feature selection and dimensionality reduction in multiple ways.\n\n### Term frequency\nTry to create a sample that will consist of only the most \"important\" words. It seems that the occurrence of the most frequent words in the review, for example, *good*, *bad*, etc. are quite good indicators. This can be done by discarding the rare words by frequency. One can specify the minimum number (or fraction) of different reviews a word must appear in to be included in the vocabulary by setting `minDF` parameter of `CountVectorizer`.\n\n### Feature Importance\nUse trained random forest to obtain its importance estimation for each feature and select most important features (words) using this estimations.\n\n### Hashing trick\n\nA different approach from the above two is [hashing](https://en.wikipedia.org/wiki/Feature_hashing) or hashing trick: get the hash of each word and after that, for example, perform bag-of-words over the space of obtained hashes. This allows you to tune the size of the feature space: the lower the sapce, the higher the frequency of collisions. Also it allows to handle previously unseen words. This approach is implemented in [HashingTF](http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.ml.feature.HashingTF) `Transformer`.\n\nYou may notice that the last two approaches can be applied not only to textual data."
  }, {
    "metadata" : {
      "id" : "39607E3B18F2412188967877E482387C"
    },
    "cell_type" : "markdown",
    "source" : "**Problem** Create new features for our unbalanced data as follows:\n  - bag-of-words with `minDF` is equal to 4\n  - 15000 most important feature (according to trained random forest) from bag-of-words with `minDF` is equal to 1\n  - hashing trick with `numFeatures` is equal to 15000\n  \nTrain classifier and calculate the area under ROC curve for each of four samples (default bag-of-words and three new samples described above). What can you say about the quality of these approaches to reduce feature space dimension?"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9E362EC3159C41BA8BAA9F49C4E1F6B4"
    },
    "cell_type" : "code",
    "source" : "// Term frequency\nval tfCountVec = new CountVectorizer()\n  .setInputCol(\"filteredTokens\")\n  .setOutputCol(\"features\")\n  .setMinDF(4)\n\nval tfPipeline = new Pipeline()\n  .setStages(Array(regexTokenizer, \n                   remover, \n                   tfCountVec))\n\nval tfModel = tfPipeline.fit(unbalancedData)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "tfCountVec: org.apache.spark.ml.feature.CountVectorizer = cntVec_6023b61d89f8\ntfPipeline: org.apache.spark.ml.Pipeline = pipeline_d490d869f272\ntfModel: org.apache.spark.ml.PipelineModel = pipeline_d490d869f272\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 12
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "4D35426188E246C4B2B900F91B024AA5"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.ml.feature.VectorSlicer\n\n// Most important features\nval trainedRF = rf.fit(labelIndexer.transform(trainBagOfWords))\nval mostImportant =  trainedRF.featureImportances\n  .toArray\n  .zipWithIndex\n  .sortBy(- _._1)\n  .take(15000)\n  .map(_._2)\n\nval rfCountVec = new CountVectorizer()\n  .setInputCol(\"filteredTokens\")\n  .setOutputCol(\"allFeatures\")\n\nval mostImportantSelector = new VectorSlicer()\n  .setInputCol(rfCountVec.getOutputCol)\n  .setOutputCol(\"features\")\n  .setIndices(mostImportant)\n\nval mostImpPipeline = new Pipeline()\n  .setStages(Array(regexTokenizer, \n                   remover, \n                   rfCountVec,\n                   mostImportantSelector\n                  ))\n\nval mostImpModel = mostImpPipeline.fit(unbalancedData)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.ml.feature.VectorSlicer\ntrainedRF: org.apache.spark.ml.classification.RandomForestClassificationModel = RandomForestClassificationModel (uid=rfc_8ed5a80bcd9f) with 200 trees\nmostImportant: Array[Int] = Array(43, 50, 705, 24, 579, 118, 630, 95, 40, 435, 86, 4, 216, 361, 8, 177, 206, 1412, 10, 109, 134, 17, 231, 2, 143, 117, 1031, 866, 180, 209, 1059, 363, 61, 96, 7, 560, 303, 155, 297, 475, 1646, 276, 2157, 105, 36, 132, 3038, 357, 1442, 149, 244, 1831, 119, 260, 5756, 2530, 1501, 182, 1138, 1391, 493, 397, 42, 3565, 66, 731, 247, 116, 26, 1666, 1073, 352, 466, 4271, 70, 286, 10665, 325, 2814, 415, 2085, 88, 6152, 2455, 272, 5372, 517, 1684, 3553, 154, 590, 444, 329, 173, 2046, 8241, 1744, 3445, 6701, 278, 4164, 1658, 734, 7701, 169, 2493, 6589, 164, 108, 4843, 21..."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 13
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B82964C081F4440E8F97ADD69656DF89"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.ml.feature.HashingTF\n\n// Hashing trick\nval hashingTF = new HashingTF()\n  .setInputCol(regexTokenizer.getOutputCol)\n  .setOutputCol(\"features\")\n  .setNumFeatures(15000)\n\nval hashingTFPipeline = new Pipeline()\n  .setStages(Array(regexTokenizer, \n                   hashingTF\n                  ))\nval hashingTFModel = hashingTFPipeline.fit(unbalancedData)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.ml.feature.HashingTF\nhashingTF: org.apache.spark.ml.feature.HashingTF = hashingTF_0a917e59aa0b\nhashingTFPipeline: org.apache.spark.ml.Pipeline = pipeline_a83fede4a0e2\nhashingTFModel: org.apache.spark.ml.PipelineModel = pipeline_a83fede4a0e2\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 14
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "4C9B168256354305869DCF319694E1AF"
    },
    "cell_type" : "code",
    "source" : "// trainBagOfWords and testBagOfWords are obtained previously\n\nval trainTermFreqFeatures = tfModel.transform(trainingData).select(\"id\", \"sentiment\", \"features\")\nval testTermFreqFeatures = tfModel.transform(testData).select(\"id\", \"sentiment\", \"features\")\n\nval trainMostImpFeatures = mostImpModel.transform(trainingData).select(\"id\", \"sentiment\", \"features\")\nval testMostImpFeatures = mostImpModel.transform(testData).select(\"id\", \"sentiment\", \"features\")\n\nval trainHashingTFFeatures = hashingTFModel.transform(trainingData).select(\"id\", \"sentiment\", \"features\")\nval testHashingTFFeatures = hashingTFModel.transform(testData).select(\"id\", \"sentiment\", \"features\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "trainTermFreqFeatures: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector]\ntestTermFreqFeatures: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector]\ntrainMostImpFeatures: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector]\ntestMostImpFeatures: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector]\ntrainHashingTFFeatures: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector]\ntestHashingTFFeatures: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 15
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9067D409D95A4DAA916A03969B641C44"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.ml.evaluation.BinaryClassificationEvaluator\nimport org.apache.spark.ml.tuning.{ParamGridBuilder, TrainValidationSplit}\n// CrossValidator is another option\n// it produces more reliable results but it's more expensive to compute.\n\nval lrParamGrid = new ParamGridBuilder()\n  .addGrid(lr.regParam, Array(1e-3, 1e-2, 1e-1, 1e0))\n  .build()\n\nval lrValidator = new TrainValidationSplit()\n  .setEstimator(lrPipeline)\n  .setEvaluator(new BinaryClassificationEvaluator)\n  .setEstimatorParamMaps(lrParamGrid)\n  .setTrainRatio(0.7)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.ml.evaluation.BinaryClassificationEvaluator\nimport org.apache.spark.ml.tuning.{ParamGridBuilder, TrainValidationSplit}\nlrParamGrid: Array[org.apache.spark.ml.param.ParamMap] = \nArray({\n\tlogreg_6c340763a154-regParam: 0.001\n}, {\n\tlogreg_6c340763a154-regParam: 0.01\n}, {\n\tlogreg_6c340763a154-regParam: 0.1\n}, {\n\tlogreg_6c340763a154-regParam: 1.0\n})\nlrValidator: org.apache.spark.ml.tuning.TrainValidationSplit = tvs_f15535c5475a\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 16
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "D5397E5CB13A462982B28F44B00A8962"
    },
    "cell_type" : "code",
    "source" : "val bagOfWordsModel = lrValidator.fit(trainBagOfWords)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "bagOfWordsModel: org.apache.spark.ml.tuning.TrainValidationSplitModel = tvs_f15535c5475a\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 17
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "268275BF0265492FBF2D67B23719A994"
    },
    "cell_type" : "code",
    "source" : "val tfModel = lrValidator.fit(trainTermFreqFeatures)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "tfModel: org.apache.spark.ml.tuning.TrainValidationSplitModel = tvs_f15535c5475a\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 18
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "72F63CC500794D519C33E21C2BF0FC02"
    },
    "cell_type" : "code",
    "source" : "val mostImpModel = lrValidator.fit(trainMostImpFeatures)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "mostImpModel: org.apache.spark.ml.tuning.TrainValidationSplitModel = tvs_f15535c5475a\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 19
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "3E7C5082C3FF4B5D9DDACE684DF5C9B4"
    },
    "cell_type" : "code",
    "source" : "val hashingTFModel = lrValidator.fit(trainHashingTFFeatures)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "hashingTFModel: org.apache.spark.ml.tuning.TrainValidationSplitModel = tvs_f15535c5475a\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 20
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "111A56ECBFC64A3F8E7609E68AD5EF42"
    },
    "cell_type" : "code",
    "source" : "val predictions = bagOfWordsModel.transform(testBagOfWords)\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(1), r.getAs[Double](1)))\n\nval bagOfWordsMetrics = new BinaryClassificationMetrics(predictions)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "predictions: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[1945] at map at <console>:113\nbagOfWordsMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@5aa8ddb7\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 24
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "E6AA4161D94541608914EE8C2F8B87DE"
    },
    "cell_type" : "code",
    "source" : "val predictions = tfModel.transform(testTermFreqFeatures)\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(1), r.getAs[Double](1)))\n\nval tfMetrics = new BinaryClassificationMetrics(predictions)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "predictions: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[2008] at map at <console>:141\ntfMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@708960ca\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 27
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B60D292A10494A44A011B26C4EE8BA33"
    },
    "cell_type" : "code",
    "source" : "val predictions = mostImpModel.transform(testMostImpFeatures)\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(1), r.getAs[Double](1)))\n\nval mostImpMetrics = new BinaryClassificationMetrics(predictions)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "predictions: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[2029] at map at <console>:141\nmostImpMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@3f015eb6\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 28
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "821B9CDF3FFA49F282B0541204158B92"
    },
    "cell_type" : "code",
    "source" : "// prepare predictions for metric model\n\nval predictions = hashingTFModel.transform(testHashingTFFeatures)\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(1), r.getAs[Double](1)))\n\nval hashingTFMetrics = new BinaryClassificationMetrics(predictions)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "predictions: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[2050] at map at <console>:143\nhashingTFMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@1fcf2122\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 29
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "CC459266C0F3421DABA1D4478A0A17CB"
    },
    "cell_type" : "code",
    "source" : "println(\"Area under roc curve\")\nprintln(\"Simple bag-of-words: \" + bagOfWordsMetrics.areaUnderROC)\nprintln(\"Term Frequency: \" + tfMetrics.areaUnderROC)\nprintln(\"Most important features: \" + mostImpMetrics.areaUnderROC)\nprintln(\"Hahing trick: \" + hashingTFMetrics.areaUnderROC)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "Area under roc curve\nSimple bag-of-words: 0.9200235539000874\nTerm Frequency: 0.923929119193692\nMost important features: 0.9192607909728294\nHahing trick: 0.9127040425065749\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 30
    } ]
  }, {
    "metadata" : {
      "id" : "62862C06FFD44487880A36AEAA2BFF2E"
    },
    "cell_type" : "markdown",
    "source" : "Thus, we managed to reduce the dimension of more than three times without much loss in quality. But even 15000 features is quite a lot. Let's say we want to reduce the dimension to 2000 features, however, you notice that three of the previous method gave a small quality degradation.\n\n### PCA\nOne of the ways of dimensionality reduction is [PCA](https://en.wikipedia.org/wiki/Principal_component_analysis) (principal component analysis). PCA uses an orthogonal transformation to convert a set of observations of possibly correlated variables into a set of values of linearly uncorrelated variables called principal components.\n\n**Problem** Try to reduce the dimension of up to 2000:\n  - using one of above methods\n  - using PCA\n\nWhich approach works best?"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "ACBB44B42D50454A8997F420BCBD4972"
    },
    "cell_type" : "code",
    "source" : "val hashingTF = new HashingTF()\n  .setInputCol(regexTokenizer.getOutputCol)\n  .setOutputCol(\"features\")\n  .setNumFeatures(2000)\n\nval hashingTFPipeline = new Pipeline()\n  .setStages(Array(regexTokenizer, \n                   hashingTF\n                  ))\nval hashingTFModel = hashingTFPipeline.fit(unbalancedData)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "hashingTF: org.apache.spark.ml.feature.HashingTF = hashingTF_e3a930b6ce58\nhashingTFPipeline: org.apache.spark.ml.Pipeline = pipeline_a0a515dbe36b\nhashingTFModel: org.apache.spark.ml.PipelineModel = pipeline_a0a515dbe36b\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 41
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "14CED191AD5F423B86F984DF33C6EC83"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.ml.feature.PCA\n\nval pcaCountVec = new CountVectorizer()\n  .setInputCol(regexTokenizer.getOutputCol)\n  .setOutputCol(\"allFeatures\")\n\nval pca = new PCA()\n  .setInputCol(pcaCountVec.getOutputCol)\n  .setOutputCol(\"features\")\n  .setK(2000)\n\nval pcaPipeline = new Pipeline()\n  .setStages(Array(regexTokenizer, \n                   remover, \n                   pcaCountVec,\n                   pca\n                  ))\n\nval pcaModel = pcaPipeline.fit(unbalancedData.sample(false, 0.1))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 1126.0 failed 1 times, most recent failure: Lost task 0.0 in stage 1126.0 (TID 4754, localhost): java.lang.OutOfMemoryError: Java heap space\n\nDriver stacktrace:\n\tat org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1431)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1419)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1418)\n\tat scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)\n\tat scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)\n\tat org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1418)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:799)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:799)\n\tat scala.Option.foreach(Option.scala:236)\n\tat org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:799)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1640)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1599)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1588)\n\tat org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48)\n\tat org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:620)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1832)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1952)\n\tat org.apache.spark.rdd.RDD$$anonfun$reduce$1.apply(RDD.scala:1025)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:111)\n\tat org.apache.spark.rdd.RDD.withScope(RDD.scala:316)\n\tat org.apache.spark.rdd.RDD.reduce(RDD.scala:1007)\n\tat org.apache.spark.rdd.RDD$$anonfun$treeAggregate$1.apply(RDD.scala:1150)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:111)\n\tat org.apache.spark.rdd.RDD.withScope(RDD.scala:316)\n\tat org.apache.spark.rdd.RDD.treeAggregate(RDD.scala:1127)\n\tat org.apache.spark.mllib.linalg.distributed.RowMatrix.computeGramianMatrix(RowMatrix.scala:121)\n\tat org.apache.spark.mllib.linalg.distributed.RowMatrix.computeCovariance(RowMatrix.scala:349)\n\tat org.apache.spark.mllib.linalg.distributed.RowMatrix.computePrincipalComponents(RowMatrix.scala:389)\n\tat org.apache.spark.mllib.feature.PCA.fit(PCA.scala:46)\n\tat org.apache.spark.ml.feature.PCA.fit(PCA.scala:75)\n\tat org.apache.spark.ml.feature.PCA.fit(PCA.scala:54)\n\tat org.apache.spark.ml.Pipeline$$anonfun$fit$2.apply(Pipeline.scala:144)\n\tat org.apache.spark.ml.Pipeline$$anonfun$fit$2.apply(Pipeline.scala:140)\n\tat scala.collection.Iterator$class.foreach(Iterator.scala:727)\n\tat scala.collection.AbstractIterator.foreach(Iterator.scala:1157)\n\tat scala.collection.IterableViewLike$Transformed$class.foreach(IterableViewLike.scala:42)\n\tat scala.collection.SeqViewLike$AbstractTransformed.foreach(SeqViewLike.scala:43)\n\tat org.apache.spark.ml.Pipeline.fit(Pipeline.scala:140)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:112)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:123)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:125)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:127)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:129)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:131)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:133)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:135)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:137)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:139)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:141)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:143)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:145)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:147)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:149)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:151)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:153)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:155)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:157)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:159)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:161)\n\tat $iwC$$iwC$$iwC$$iwC.<init>(<console>:163)\n\tat $iwC$$iwC$$iwC.<init>(<console>:165)\n\tat $iwC$$iwC.<init>(<console>:167)\n\tat $iwC.<init>(<console>:169)\n\tat <init>(<console>:171)\n\tat .<init>(<console>:175)\n\tat .<clinit>(<console>)\n\tat .<init>(<console>:7)\n\tat .<clinit>(<console>)\n\tat $print(<console>)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:497)\n\tat org.apache.spark.repl.SparkIMain$ReadEvalPrint.call(SparkIMain.scala:1065)\n\tat org.apache.spark.repl.SparkIMain$Request.loadAndRun(SparkIMain.scala:1346)\n\tat org.apache.spark.repl.SparkIMain.loadAndRunReq$1(SparkIMain.scala:840)\n\tat org.apache.spark.repl.SparkIMain.interpret(SparkIMain.scala:871)\n\tat org.apache.spark.repl.SparkIMain.interpret(SparkIMain.scala:819)\n\tat notebook.kernel.Repl$$anonfun$6.apply(Repl.scala:200)\n\tat notebook.kernel.Repl$$anonfun$6.apply(Repl.scala:200)\n\tat scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)\n\tat scala.Console$.withOut(Console.scala:126)\n\tat notebook.kernel.Repl.evaluate(Repl.scala:199)\n\tat notebook.client.ReplCalculator$$anonfun$10$$anon$1$$anonfun$27.replEvaluate$1(ReplCalculator.scala:401)\n\tat notebook.client.ReplCalculator$$anonfun$10$$anon$1$$anonfun$27.apply(ReplCalculator.scala:414)\n\tat notebook.client.ReplCalculator$$anonfun$10$$anon$1$$anonfun$27.apply(ReplCalculator.scala:395)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24)\n\tat akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)\n\tat akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\nCaused by: java.lang.OutOfMemoryError: Java heap space\n\n"
    } ]
  }, {
    "metadata" : {
      "id" : "B2F1B9A20EBF437D853632C8B01FCF1C"
    },
    "cell_type" : "markdown",
    "source" : "### What are some other ways of processing text data?\n\nAs you can see, the approach with a bag of words is very naive, because it does not allow to take into account the information about word frequency across all documents (reviews). In this case, it may be useful to use [tf-idf](http://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.html).\n\nAnother disadvantage of the bag-of-words is using of absolute frequencies of words. Some words can have very large frequencies and at the same time some other words can have very low frequencies. To \"smooth out\" the difference between them one can apply a log transformation $x \\to log(x + 1)$ (we need to add `1` because `X` can be equal to `0` in bag-of-words encoding)"
  } ],
  "nbformat" : 4
}