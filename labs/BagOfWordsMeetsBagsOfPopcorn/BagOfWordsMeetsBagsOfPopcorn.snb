{
  "metadata" : {
    "name" : "BagOfWordsMeetsBagsOfPopcorn",
    "user_save_timestamp" : "1970-01-01T03:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T03:00:00.000Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "customLocalRepo" : null,
    "customRepos" : null,
    "customDeps" : null,
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : null
  },
  "cells" : [ {
    "metadata" : {
      "id" : "89D96E0BE5DB49F983ACCFA8DB52561D"
    },
    "cell_type" : "markdown",
    "source" : "# Bag of Words Meets Bags of Popcorn"
  }, {
    "metadata" : {
      "id" : "65DB30C3AEA742C4839566164BF1A058"
    },
    "cell_type" : "markdown",
    "source" : "In this lab we're going to work with IMDB Movies Reviews dataset from kaggle competition [Bag of Words Meets Bags of Popcorn](https://www.kaggle.com/c/word2vec-nlp-tutorial/data).\n\n<div style=\"text-align:center\">\n  <img src=\"http://i.imgur.com/QZgxFic.png\">\n</div>\n\nThe task is to determine whether the given movie review is positive or negative. This is one example of the problem of text [sentiment analysis](https://en.wikipedia.org/wiki/Sentiment_analysis). Here is one example of review from the dataset:\n\n    When I saw this film in the 1950s, I wanted to be a scientist too. There was something magical and useful in Science. I took a girl - friend along to see it a second time. I don't think she was as impressed as I was! This film was comical yet serious, at a time when synthetic fibres were rather new. Lessons from this film could be applied to issues relating to GM experimentation of today."
  }, {
    "metadata" : {
      "id" : "60FEC683FB4B4F429C9F8894A70F4C30"
    },
    "cell_type" : "markdown",
    "source" : "Load labeledTrainData.tsv dataset. To load data from csv file direct to Spark's Dataframe one can use [spark-csv](http://spark-packages.org/package/databricks/spark-csv) package.\nTo add spark-csv package to spark notebook one could add \"com.databricks:spark-csv_2.10:1.4.0\" (or \"com.databricks:spark-csv_2.11:1.4.0\" for Scala 2.11) dependency into customDeps conf section. Alternatively one could specify this dependency in `--packages` command line option while submiting spark application to a cluster (`spark-submit`) or launching spark shell (`spark-shell`).\nFor tsv format use appropriate value of `delimiter` option."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "7E6CFDCD51034DF989F86638D5846457"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.sql.SQLContext\n\nval sqlContext = new SQLContext(sc)\n\nval data = sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\")\n    .option(\"inferSchema\", \"true\")\n    .option(\"delimiter\", \"\\t\")\n    .load(\"notebooks/labs/BagOfWordsMeetsBagsOfPopcorn/labeledTrainData.tsv\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.sql.SQLContext\nsqlContext: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@d74453b\ndata: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, review: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 1
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "3492639D56FE4809AA62FE110B48158B"
    },
    "cell_type" : "code",
    "source" : "data.limit(5).show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+-------+---------+--------------------+\n|     id|sentiment|              review|\n+-------+---------+--------------------+\n| 5814_8|        1|With all this stu...|\n| 7759_3|        0|The film starts w...|\n| 8196_8|        1|I dont know why p...|\n| 7166_2|        0|This movie could ...|\n|10633_1|        0|I watched this vi...|\n+-------+---------+--------------------+\n\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 2
    } ]
  }, {
    "metadata" : {
      "id" : "1BFBCC214C944B8281D0AEBF83FE23C4"
    },
    "cell_type" : "markdown",
    "source" : "How many positive and negative reviews in this dataset?"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "09ED77BEC2824A538C1A82089CDD8B2C"
    },
    "cell_type" : "code",
    "source" : "data.groupBy(\"sentiment\").count.show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------+-----+\n|sentiment|count|\n+---------+-----+\n|        0| 6387|\n|        1| 6990|\n+---------+-----+\n\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 3
    } ]
  }, {
    "metadata" : {
      "id" : "E437523B0D864162AB13DA0F209CE1BD"
    },
    "cell_type" : "markdown",
    "source" : "As we can see, almost half of the reviews are positive and the other half of the reviews are negative. Such datasets are called balanced. But let's make things a bit more interesting and remove three quarters of positive reviews from the dataset and thus we will make the dataset unbalanced."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "68BFF7509E0D478FBFD7BDBBFAF117D0"
    },
    "cell_type" : "code",
    "source" : "val unbalancedData = data.filter(data(\"sentiment\") === 1)\n                         .sample(false, 0.25)\n                         .unionAll(data.filter(data(\"sentiment\") === 0))\nunbalancedData.groupBy(\"sentiment\").count.show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------+-----+\n|sentiment|count|\n+---------+-----+\n|        0| 6387|\n|        1| 1784|\n+---------+-----+\n\nunbalancedData: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, review: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 2
    } ]
  }, {
    "metadata" : {
      "id" : "E6BB169B270649E48A1C9AA9703680EB"
    },
    "cell_type" : "markdown",
    "source" : "For model quality assessment we will be using train test split with 75% of the data is used for training and 25% for testing. Two important notes:\n - It is good to have a reproducible split on train and test data (hint: use seed param).\n - it is good to preserve the percentage of samples for each class in each split/fold especially in the case of a highly unbalanced classes (follow [the ticket](https://issues.apache.org/jira/browse/SPARK-8971))."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "99230B53BEC64921BED57959C191EFB5"
    },
    "cell_type" : "code",
    "source" : "// Split the data into training and test sets (25% held out for testing)\nval Array(trainingData, testData) = unbalancedData.randomSplit(Array(0.75, 0.25), seed=547)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "trainingData: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, review: string]\ntestData: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, review: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 3
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "CB9F2F4810E64E4484D5C7624DFD9D8B"
    },
    "cell_type" : "code",
    "source" : "println(trainingData.groupBy(\"sentiment\").count.show)\nprintln(testData.groupBy(\"sentiment\").count.show)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------+-----+\n|sentiment|count|\n+---------+-----+\n|        0| 4757|\n|        1| 1304|\n+---------+-----+\n\n()\n+---------+-----+\n|sentiment|count|\n+---------+-----+\n|        0| 1630|\n|        1|  452|\n+---------+-----+\n\n()\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 6
    } ]
  }, {
    "metadata" : {
      "id" : "6FD8193001054F9D8782B456B9EDFC9D"
    },
    "cell_type" : "markdown",
    "source" : "One of the difficulties of this task is textual representation of the data because there is no universal method of feature extraction from the texts.\nIn the course of the lab we will get a few feature representations of the data which will be compared with each other."
  }, {
    "metadata" : {
      "id" : "59DD6E6369DF456BBB19643C25EB3699"
    },
    "cell_type" : "markdown",
    "source" : "## Bag of words"
  }, {
    "metadata" : {
      "id" : "DF4A6A340D7C4008852399BFA2B9CFC5"
    },
    "cell_type" : "markdown",
    "source" : "First we will try the simplest approach, namely [bag-of-words](https://en.wikipedia.org/wiki/Bag-of-words_model). With bag-of-words each text will be represented as a vector of numbers with the size equal to the size of the dictionary. On each position of the vector there will be a counter which represents how many times corresponding word was found in this text. This representation one can obtain using [CountVectorizer](http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.ml.feature.CountVectorizer).\n\nBut before making features from our data we have to perform data cleaning and text preprocessing steps.\nThere is a good point about data cleaning and text preprocessing in corresponding [tutorial](https://www.kaggle.com/c/word2vec-nlp-tutorial/details/part-1-for-beginners-bag-of-words):\n\n    When considering how to clean the text, we should think about the data problem we are trying to solve. For many problems, it makes sense to remove punctuation. On the other hand, in this case, we are tackling a sentiment analysis problem, and it is possible that \"!!!\" or \":-(\" could carry sentiment, and should be treated as words.\n    \nRemoving [stop words](https://en.wikipedia.org/wiki/Stop_words) while constructing bag-of-words is also fa good practice.\n\nAll these steps can be implemented using sequence of the following feature transformers:\n[RegexTokenizer](http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.ml.feature.RegexTokenizer)\nfollowed by [StopWordsRemover](http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.ml.feature.StopWordsRemover)\nfollowed by [CountVectorizer](http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.ml.feature.CountVectorizer)."
  }, {
    "metadata" : {
      "id" : "D8FBF41064EA48CDA468475BA81E7CEB"
    },
    "cell_type" : "markdown",
    "source" : "`RegexTokenizer` performs splitting/tokenization based on regular expression matching. To perform tokenization rather than splitting one neet to set parameter `gaps` to `false`.\n\n`StopWordsRemover` comes with provided list of stop words. Alternatively one can provide its own stop words list."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "07865C6B32334E7989BA2221E1A3A36D"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.feature.{RegexTokenizer, StopWordsRemover, CountVectorizer}\n\nval regexTokenizer = new RegexTokenizer()\n  .setInputCol(\"review\")\n  .setOutputCol(\"tokens\")\n  .setPattern(\"(\\\\w+|[!?]|:-?\\\\)|:-?\\\\()\")\n  .setGaps(false)\n\nval remover = new StopWordsRemover()\n  .setInputCol(\"tokens\")\n  .setOutputCol(\"filteredTokens\")\n\nval countVec = new CountVectorizer()\n  .setInputCol(\"filteredTokens\")\n  .setOutputCol(\"features\")\n\n\n// Chain tokenizer, stop words remover and CountVectorizer in a Pipeline\nval pipeline = new Pipeline()\n  .setStages(Array(regexTokenizer, \n                   remover, \n                   countVec))\n\nval transformModel = pipeline.fit(unbalancedData)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.feature.{RegexTokenizer, StopWordsRemover, CountVectorizer}\nregexTokenizer: org.apache.spark.ml.feature.RegexTokenizer = regexTok_29b52045461b\nremover: org.apache.spark.ml.feature.StopWordsRemover = stopWords_65cbffca6cd9\ncountVec: org.apache.spark.ml.feature.CountVectorizer = cntVec_b443f08a9fb4\npipeline: org.apache.spark.ml.Pipeline = pipeline_e0f44a347840\ntransformModel: org.apache.spark.ml.PipelineModel = pipeline_e0f44a347840\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 4
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "4403C8ACCAD9414E8B8A388A0BC594B9"
    },
    "cell_type" : "code",
    "source" : "val trainBagOfWords = transformModel.transform(trainingData).select(\"id\", \"sentiment\", \"features\")\nval testBagOfWords = transformModel.transform(testData).select(\"id\", \"sentiment\", \"features\")\n\ntrainBagOfWords.limit(1).show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+-------+---------+--------------------+\n|     id|sentiment|            features|\n+-------+---------+--------------------+\n|10023_9|        1|(41325,[0,2,9,11,...|\n+-------+---------+--------------------+\n\ntrainBagOfWords: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector]\ntestBagOfWords: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 5
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "476FE34ED682482393CA8166A115F10F"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.mllib.linalg.SparseVector\n\nval featureSpaceDim = trainBagOfWords.select(\"features\").first.getAs[SparseVector](0).size\n\nprintln(s\"We've obtained $featureSpaceDim-dimensional feature space.\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "We've obtained 41199-dimensional feature space.\nimport org.apache.spark.mllib.linalg.SparseVector\nfeatureSpaceDim: Int = 41199\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 9
    } ]
  }, {
    "metadata" : {
      "id" : "55018FD2FA5C4E0C8FF0E95ED8247441"
    },
    "cell_type" : "markdown",
    "source" : "Now after we've obtained some representation of our text,  the next step is to train the classification algorithms and to compare them with each other. This requires understanding what are the metrics should be used to compare algorithms. We can consider, for example, the following metrics:\n\n- accuracy: $$ Accuracy = \\frac{1}{l}\\sum_{i=1}^l[y_i = \\hat{y}_i]$$ where $y_i$ — the true object class $x_i$, $\\hat{y}_i$ — he predicted class of the object.\n- precision: $$Precision = \\frac{TP}{TP + FP}$$\n- recall: $$Recall = \\frac{TP}{TP + FN}$$\n\nwhere *TP*, *FP*, *FN* and *TN* — the elements of a confusion matrix:\n\n| | y = 1 | y = 0 |\n|------|------|\n|   a(x) = 1  | TP| FP |\n|   a(x) = 0  | FN | TN |\n\nPlease note that accuracy and recall are calculated relative to a fixed class.\n\nOften, a classifier returns some *score* $b(x)$ of belonging to a given class, which is compared with fixed threshold *t*. Thus the classifier has the form $a(x) = [b(x) > t]$ and one can tune the threshold depending on specific needs. For example, there may be some cases where the threshold might need to be tuned so that it only predicts a class when the score is very high. Threshold tuning affects the quality of classification:\n - the higher $t$, the higher the precision, the lower the recall,\n - the lower $t$, the higher the recall, the lower the precesion.\n\n\n### Precision-Recall curve\nInteresting to know what will be the quality at all the different possible thresholds. So we can just compute precision-recall pairs for different thresholds. This will be precision-recall curve. We can achieve that using `BinaryClassificationMetrics` class from `org.apache.spark.mllib.evaluation` package. We can plot this curve with recall values on X-axis and precision values on Y-axis. This gives a good visualization of the quality of the algorithm.\n\n### ROC curve\n*ROC* curve is another method of visualizing the dependence of the quality of the algorithm from the threshold. In this case:\n  - X-axis: $FPR = \\frac{FP}{FP + TN}$\n  - Y-axis: $TPR = \\frac{TP}{TP + FN}$\n \nWhere *FPR* is false positive rate and *TPR* is true positive rate. Again `BinaryClassificationMetrics` provides appropriate method to compute this.\n\nIn addition, it is possible to measure the area under the curves: *auc_pr* and *auc_roc*, respectively."
  }, {
    "metadata" : {
      "id" : "AD5EDFC145DC4B588A1574ACD52BFF30"
    },
    "cell_type" : "markdown",
    "source" : "**Problem** What are disadvantages of using `accuracy` metric in case of unbalanced data? Train Logistic Regression and Random Forest with 200 trees on bag-of-words and build `precision-recall` and `ROC` curves on test data. Also compute *auc_pr* and *auc_roc*. Compare training times of the algorithms. Is there a significant difference in the quality of algorithms? Which method seems less applicable in this problem and why?"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "417DD06930FC40C8A061B6D116E5553B"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.ml.classification.{LogisticRegression, RandomForestClassifier}\nimport org.apache.spark.ml.feature.{StringIndexer, IndexToString}\nimport org.apache.spark.ml.tuning.TrainValidationSplit\n\n\nval labelIndexer = new StringIndexer()\n  .setInputCol(\"sentiment\")\n  .setOutputCol(\"label\")\n  .fit(unbalancedData)\n\n// Convert predicted labels back to original labels.\nval labelConverter = new IndexToString()\n  .setInputCol(\"prediction\")\n  .setOutputCol(\"predictedSentiment\")\n  .setLabels(labelIndexer.labels)\n\n// Chain indexer, classifier and converter in a Pipeline\nval lr = new LogisticRegression()\nval lrPipeline = new Pipeline()\n  .setStages(Array(labelIndexer, lr, labelConverter))\n\nval rf = new RandomForestClassifier()\n  .setNumTrees(200)\nval rfPipeline = new Pipeline()\n  .setStages(Array(labelIndexer, rf, labelConverter))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.ml.classification.{LogisticRegression, RandomForestClassifier}\nimport org.apache.spark.ml.feature.{StringIndexer, IndexToString}\nimport org.apache.spark.ml.tuning.TrainValidationSplit\nlabelIndexer: org.apache.spark.ml.feature.StringIndexerModel = strIdx_f46f07b833ba\nlabelConverter: org.apache.spark.ml.feature.IndexToString = idxToStr_b6143fe121fa\nlr: org.apache.spark.ml.classification.LogisticRegression = logreg_e7ba5c026307\nlrPipeline: org.apache.spark.ml.Pipeline = pipeline_8b278f8fe49b\nrf: org.apache.spark.ml.classification.RandomForestClassifier = rfc_7518313860ff\nrfPipeline: org.apache.spark.ml.Pipeline = pipeline_d5c9534ffb26\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 6
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "A7CAFEAEA18C461E8BF48328CBAB26B3"
    },
    "cell_type" : "code",
    "source" : "// train classifier\nval lrModel = lrPipeline.fit(trainBagOfWords)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "lrModel: org.apache.spark.ml.PipelineModel = pipeline_f3fba53424ed\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 11
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "1C53964A129044348D131D6E185036B1"
    },
    "cell_type" : "code",
    "source" : "val rfModel = rfPipeline.fit(trainBagOfWords)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "rfModel: org.apache.spark.ml.PipelineModel = pipeline_d0cd3fc16bef\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 12
    } ]
  }, {
    "metadata" : {
      "id" : "6D132E1F85284C4A81A4C6FFAA372A47"
    },
    "cell_type" : "markdown",
    "source" : "It's clear what Random Forest takes much more time to train. "
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "3200F4D40093464785E926A56EBACA07"
    },
    "cell_type" : "code",
    "source" : "// Make predictions.\nval lrPredictions = lrModel.transform(testBagOfWords)\nlrPredictions.select(\"sentiment\",\n                     \"label\",\n                     \"probability\",\n                     \"rawPrediction\",\n                     \"prediction\",\n                     \"predictedSentiment\")\n             .sample(false, 10.0 / testBagOfWords.count)\n             .show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------+-----+--------------------+--------------------+----------+------------------+\n|sentiment|label|         probability|       rawPrediction|prediction|predictedSentiment|\n+---------+-----+--------------------+--------------------+----------+------------------+\n|        1|  1.0|[0.04101322881915...|[-3.1519826116107...|       1.0|                 1|\n|        0|  0.0|[0.99999990882226...|[16.2104549579991...|       0.0|                 0|\n|        0|  0.0|[0.99999793464449...|[13.0902061254842...|       0.0|                 0|\n+---------+-----+--------------------+--------------------+----------+------------------+\n\nlrPredictions: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector, label: double, rawPrediction: vector, probability: vector, prediction: double, predictedSentiment: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 13
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "C5B95A260B674974ABBC12E45B17E511"
    },
    "cell_type" : "code",
    "source" : "val rfPredictions = rfModel.transform(testBagOfWords)\nrfPredictions.select(\"sentiment\",\n                     \"label\",\n                     \"probability\",\n                     \"rawPrediction\",\n                     \"prediction\",\n                     \"predictedSentiment\")\n             .sample(false, 10.0 / testBagOfWords.count)\n             .show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------+-----+--------------------+--------------------+----------+------------------+\n|sentiment|label|         probability|       rawPrediction|prediction|predictedSentiment|\n+---------+-----+--------------------+--------------------+----------+------------------+\n|        1|  1.0|[0.77030053251982...|[154.060106503964...|       0.0|                 0|\n|        0|  0.0|[0.80400207191763...|[160.800414383527...|       0.0|                 0|\n|        0|  0.0|[0.79261413809234...|[158.522827618468...|       0.0|                 0|\n|        0|  0.0|[0.78447662234151...|[156.895324468303...|       0.0|                 0|\n|        0|  0.0|[0.79438708663826...|[158.877417327653...|       0.0|                 0|\n|        0|  0.0|[0.78716768931477...|[157.433537862954...|       0.0|                 0|\n|        0|  0.0|[0.78493983704925...|[156.987967409850...|       0.0|                 0|\n|        0|  0.0|[0.78145003450549...|[156.290006901098...|       0.0|                 0|\n|        0|  0.0|[0.76871914160587...|[153.743828321175...|       0.0|                 0|\n|        0|  0.0|[0.80800667428922...|[161.601334857844...|       0.0|                 0|\n|        0|  0.0|[0.80289749495636...|[160.579498991272...|       0.0|                 0|\n+---------+-----+--------------------+--------------------+----------+------------------+\n\nrfPredictions: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector, label: double, rawPrediction: vector, probability: vector, prediction: double, predictedSentiment: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 14
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "4233F315C14E4CA78E57545A987E27AF"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\nimport org.apache.spark.mllib.linalg.DenseVector\n\n// prepare labels and predictions for metric model\nval lrPredictionAndLabels = lrPredictions\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(1), r.getAs[Double](1)))\n\nval rfPredictionAndLabels = rfPredictions\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(1), r.getAs[Double](1)))\n\n// Instantiate metrics object\nval lrMetrics = new BinaryClassificationMetrics(lrPredictionAndLabels)\nval rfMetrics = new BinaryClassificationMetrics(rfPredictionAndLabels)\n\n// Obtain precision-recall curve\nval lrPrecisionRecall = lrMetrics.pr\nval rfPrecisionRecall = rfMetrics.pr\n\n// Obtain roc curve\nval lrROC = lrMetrics.roc\nval rfROC = rfMetrics.roc",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\nimport org.apache.spark.mllib.linalg.DenseVector\nlrPredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[423] at map at <console>:114\nrfPredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[444] at map at <console>:118\nlrMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@6aafa0a4\nrfMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@1e67d414\nlrPrecisionRecall: org.apache.spark.rdd.RDD[(Double, Double)] = UnionRDD[455] at union at BinaryClassificationMetrics.scala:108\nrfPrecisionRecall: org.apache.s..."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 15
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "0ED46DBD7C334C9387153710C581BA8C"
    },
    "cell_type" : "code",
    "source" : "case class RecallPrecisionPoint(lrRecall: Double,\n                                lrPrecision: Double,\n                                rfRecall: Double,\n                                rfPrecision: Double)\nval sampleFraction = 0.2\nval recallPrecisionPoints = lrPrecisionRecall\n                              .sample(false, sampleFraction)\n                              .collect.zip(rfPrecisionRecall.sample(false, sampleFraction).collect)\n                              .map{\n  p => RecallPrecisionPoint(p._1._1, p._1._2, p._2._1, p._2._2)}\n\ncase class ROCPoint(lrFPR: Double,\n                    lrTPR: Double,\n                    rfFPR: Double,\n                    rfTPR: Double)\nval rocPoints = lrROC\n                  .sample(false,0.2)\n                  .collect.zip(rfROC.sample(false, sampleFraction).collect)\n                  .map{\n  p => ROCPoint(p._1._1, p._1._2, p._2._1, p._2._2)}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined class RecallPrecisionPoint\nsampleFraction: Double = 0.2\nrecallPrecisionPoints: Array[RecallPrecisionPoint] = Array(RecallPrecisionPoint(0.0,1.0,0.00663716814159292,1.0), RecallPrecisionPoint(0.015486725663716814,0.875,0.011061946902654867,1.0), RecallPrecisionPoint(0.024336283185840708,0.9166666666666666,0.01991150442477876,1.0), RecallPrecisionPoint(0.033185840707964605,0.8823529411764706,0.03761061946902655,1.0), RecallPrecisionPoint(0.046460176991150445,0.875,0.03761061946902655,0.9444444444444444), RecallPrecisionPoint(0.05309734513274336,0.8888888888888888,0.04424778761061947,0.9090909090909091), RecallPrecisionPoint(0.06415929203539823,0.90625,0.05309734513274336,0.9230769230769231), RecallPrecisionPoint(0.07964601769911504,0.9230769230769231,0.07964601769911504,0.9), Reca..."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 16
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab1745901744-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "F5F26B00E8C94D778C7C0A7590B5EB53"
    },
    "cell_type" : "code",
    "source" : "CustomC3Chart(recallPrecisionPoints,\n              \"\"\"{ data: { xs: {\n                            'lrPrecision': 'lrRecall',\n                            'rfPrecision': 'rfRecall',\n                         }\n                   },\n                   axis: {\n                      y: {\n                        label: 'precision'\n                      },\n                      x: {\n                         label: 'recall',\n                         tick: {\n                            count: 5\n                         }\n                      }\n                   },\n                   point: {\n                        show: false\n                   }\n                  }\"\"\")\n",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res26: notebook.front.widgets.CustomC3Chart[Array[RecallPrecisionPoint]] = <CustomC3Chart widget>\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon7ae178131520db754cd35d41ba8d1b96&quot;,&quot;dataInit&quot;:[{&quot;lrRecall&quot;:0.0,&quot;lrPrecision&quot;:1.0,&quot;rfRecall&quot;:0.00663716814159292,&quot;rfPrecision&quot;:1.0},{&quot;lrRecall&quot;:0.015486725663716814,&quot;lrPrecision&quot;:0.875,&quot;rfRecall&quot;:0.011061946902654867,&quot;rfPrecision&quot;:1.0},{&quot;lrRecall&quot;:0.024336283185840708,&quot;lrPrecision&quot;:0.9166666666666666,&quot;rfRecall&quot;:0.01991150442477876,&quot;rfPrecision&quot;:1.0},{&quot;lrRecall&quot;:0.033185840707964605,&quot;lrPrecision&quot;:0.8823529411764706,&quot;rfRecall&quot;:0.03761061946902655,&quot;rfPrecision&quot;:1.0},{&quot;lrRecall&quot;:0.046460176991150445,&quot;lrPrecision&quot;:0.875,&quot;rfRecall&quot;:0.03761061946902655,&quot;rfPrecision&quot;:0.9444444444444444},{&quot;lrRecall&quot;:0.05309734513274336,&quot;lrPrecision&quot;:0.8888888888888888,&quot;rfRecall&quot;:0.04424778761061947,&quot;rfPrecision&quot;:0.9090909090909091},{&quot;lrRecall&quot;:0.06415929203539823,&quot;lrPrecision&quot;:0.90625,&quot;rfRecall&quot;:0.05309734513274336,&quot;rfPrecision&quot;:0.9230769230769231},{&quot;lrRecall&quot;:0.07964601769911504,&quot;lrPrecision&quot;:0.9230769230769231,&quot;rfRecall&quot;:0.07964601769911504,&quot;rfPrecision&quot;:0.9},{&quot;lrRecall&quot;:0.11283185840707964,&quot;lrPrecision&quot;:0.8947368421052632,&quot;rfRecall&quot;:0.08185840707964602,&quot;rfPrecision&quot;:0.9024390243902439},{&quot;lrRecall&quot;:0.1172566371681416,&quot;lrPrecision&quot;:0.8833333333333333,&quot;rfRecall&quot;:0.09070796460176991,&quot;rfPrecision&quot;:0.9111111111111111},{&quot;lrRecall&quot;:0.12389380530973451,&quot;lrPrecision&quot;:0.8235294117647058,&quot;rfRecall&quot;:0.11061946902654868,&quot;rfPrecision&quot;:0.9090909090909091},{&quot;lrRecall&quot;:0.13053097345132744,&quot;lrPrecision&quot;:0.8309859154929577,&quot;rfRecall&quot;:0.13716814159292035,&quot;rfPrecision&quot;:0.8732394366197183},{&quot;lrRecall&quot;:0.13495575221238937,&quot;lrPrecision&quot;:0.8243243243243243,&quot;rfRecall&quot;:0.14601769911504425,&quot;rfPrecision&quot;:0.868421052631579},{&quot;lrRecall&quot;:0.14601769911504425,&quot;lrPrecision&quot;:0.8354430379746836,&quot;rfRecall&quot;:0.16371681415929204,&quot;rfPrecision&quot;:0.8604651162790697},{&quot;lrRecall&quot;:0.16150442477876106,&quot;lrPrecision&quot;:0.8111111111111111,&quot;rfRecall&quot;:0.18141592920353983,&quot;rfPrecision&quot;:0.8541666666666666},{&quot;lrRecall&quot;:0.16592920353982302,&quot;lrPrecision&quot;:0.7978723404255319,&quot;rfRecall&quot;:0.18584070796460178,&quot;rfPrecision&quot;:0.8571428571428571},{&quot;lrRecall&quot;:0.1747787610619469,&quot;lrPrecision&quot;:0.797979797979798,&quot;rfRecall&quot;:0.20353982300884957,&quot;rfPrecision&quot;:0.8518518518518519},{&quot;lrRecall&quot;:0.20353982300884957,&quot;lrPrecision&quot;:0.7863247863247863,&quot;rfRecall&quot;:0.2079646017699115,&quot;rfPrecision&quot;:0.8545454545454545},{&quot;lrRecall&quot;:0.2168141592920354,&quot;lrPrecision&quot;:0.7967479674796748,&quot;rfRecall&quot;:0.21902654867256638,&quot;rfPrecision&quot;:0.853448275862069},{&quot;lrRecall&quot;:0.2168141592920354,&quot;lrPrecision&quot;:0.7903225806451613,&quot;rfRecall&quot;:0.25,&quot;rfPrecision&quot;:0.8560606060606061},{&quot;lrRecall&quot;:0.21902654867256638,&quot;lrPrecision&quot;:0.792,&quot;rfRecall&quot;:0.25442477876106195,&quot;rfPrecision&quot;:0.8394160583941606},{&quot;lrRecall&quot;:0.22123893805309736,&quot;lrPrecision&quot;:0.7936507936507936,&quot;rfRecall&quot;:0.26548672566371684,&quot;rfPrecision&quot;:0.8391608391608392},{&quot;lrRecall&quot;:0.2234513274336283,&quot;lrPrecision&quot;:0.7952755905511811,&quot;rfRecall&quot;:0.27876106194690264,&quot;rfPrecision&quot;:0.8181818181818182},{&quot;lrRecall&quot;:0.23008849557522124,&quot;lrPrecision&quot;:0.7938931297709924,&quot;rfRecall&quot;:0.2831858407079646,&quot;rfPrecision&quot;:0.8152866242038217},{&quot;lrRecall&quot;:0.2323008849557522,&quot;lrPrecision&quot;:0.7954545454545454,&quot;rfRecall&quot;:0.2942477876106195,&quot;rfPrecision&quot;:0.806060606060606},{&quot;lrRecall&quot;:0.23672566371681417,&quot;lrPrecision&quot;:0.7925925925925926,&quot;rfRecall&quot;:0.3075221238938053,&quot;rfPrecision&quot;:0.8034682080924855},{&quot;lrRecall&quot;:0.27876106194690264,&quot;lrPrecision&quot;:0.7682926829268293,&quot;rfRecall&quot;:0.30973451327433627,&quot;rfPrecision&quot;:0.8045977011494253},{&quot;lrRecall&quot;:0.28982300884955753,&quot;lrPrecision&quot;:0.7572254335260116,&quot;rfRecall&quot;:0.3141592920353982,&quot;rfPrecision&quot;:0.8068181818181818},{&quot;lrRecall&quot;:0.2920353982300885,&quot;lrPrecision&quot;:0.7586206896551724,&quot;rfRecall&quot;:0.336283185840708,&quot;rfPrecision&quot;:0.7958115183246073},{&quot;lrRecall&quot;:0.29867256637168144,&quot;lrPrecision&quot;:0.7627118644067796,&quot;rfRecall&quot;:0.35176991150442477,&quot;rfPrecision&quot;:0.795},{&quot;lrRecall&quot;:0.3008849557522124,&quot;lrPrecision&quot;:0.7597765363128491,&quot;rfRecall&quot;:0.35398230088495575,&quot;rfPrecision&quot;:0.7920792079207921},{&quot;lrRecall&quot;:0.32079646017699115,&quot;lrPrecision&quot;:0.7474226804123711,&quot;rfRecall&quot;:0.3561946902654867,&quot;rfPrecision&quot;:0.7931034482758621},{&quot;lrRecall&quot;:0.3252212389380531,&quot;lrPrecision&quot;:0.75,&quot;rfRecall&quot;:0.36283185840707965,&quot;rfPrecision&quot;:0.7922705314009661},{&quot;lrRecall&quot;:0.3252212389380531,&quot;lrPrecision&quot;:0.7461928934010152,&quot;rfRecall&quot;:0.36504424778761063,&quot;rfPrecision&quot;:0.7894736842105263},{&quot;lrRecall&quot;:0.32964601769911506,&quot;lrPrecision&quot;:0.7487437185929648,&quot;rfRecall&quot;:0.3694690265486726,&quot;rfPrecision&quot;:0.7914691943127962},{&quot;lrRecall&quot;:0.33185840707964603,&quot;lrPrecision&quot;:0.75,&quot;rfRecall&quot;:0.3805309734513274,&quot;rfPrecision&quot;:0.7889908256880734},{&quot;lrRecall&quot;:0.35176991150442477,&quot;lrPrecision&quot;:0.75,&quot;rfRecall&quot;:0.39823008849557523,&quot;rfPrecision&quot;:0.7725321888412017},{&quot;lrRecall&quot;:0.35398230088495575,&quot;lrPrecision&quot;:0.7511737089201878,&quot;rfRecall&quot;:0.40707964601769914,&quot;rfPrecision&quot;:0.7763713080168776},{&quot;lrRecall&quot;:0.3606194690265487,&quot;lrPrecision&quot;:0.7546296296296297,&quot;rfRecall&quot;:0.413716814159292,&quot;rfPrecision&quot;:0.7663934426229508},{&quot;lrRecall&quot;:0.37389380530973454,&quot;lrPrecision&quot;:0.757847533632287,&quot;rfRecall&quot;:0.4225663716814159,&quot;rfPrecision&quot;:0.7549407114624506},{&quot;lrRecall&quot;:0.3805309734513274,&quot;lrPrecision&quot;:0.7478260869565218,&quot;rfRecall&quot;:0.4247787610619469,&quot;rfPrecision&quot;:0.7529411764705882},{&quot;lrRecall&quot;:0.38495575221238937,&quot;lrPrecision&quot;:0.7467811158798283,&quot;rfRecall&quot;:0.42920353982300885,&quot;rfPrecision&quot;:0.751937984496124},{&quot;lrRecall&quot;:0.38495575221238937,&quot;lrPrecision&quot;:0.7404255319148936,&quot;rfRecall&quot;:0.4358407079646018,&quot;rfPrecision&quot;:0.7547892720306514},{&quot;lrRecall&quot;:0.38495575221238937,&quot;lrPrecision&quot;:0.7310924369747899,&quot;rfRecall&quot;:0.4469026548672566,&quot;rfPrecision&quot;:0.73992673992674},{&quot;lrRecall&quot;:0.38716814159292035,&quot;lrPrecision&quot;:0.7291666666666666,&quot;rfRecall&quot;:0.4491150442477876,&quot;rfPrecision&quot;:0.7381818181818182},{&quot;lrRecall&quot;:0.3893805309734513,&quot;lrPrecision&quot;:0.7302904564315352,&quot;rfRecall&quot;:0.46017699115044247,&quot;rfPrecision&quot;:0.734982332155477},{&quot;lrRecall&quot;:0.3915929203539823,&quot;lrPrecision&quot;:0.731404958677686,&quot;rfRecall&quot;:0.4778761061946903,&quot;rfPrecision&quot;:0.7322033898305085},{&quot;lrRecall&quot;:0.3938053097345133,&quot;lrPrecision&quot;:0.726530612244898,&quot;rfRecall&quot;:0.48008849557522126,&quot;rfPrecision&quot;:0.7331081081081081},{&quot;lrRecall&quot;:0.3938053097345133,&quot;lrPrecision&quot;:0.7235772357723578,&quot;rfRecall&quot;:0.4889380530973451,&quot;rfPrecision&quot;:0.7293729372937293},{&quot;lrRecall&quot;:0.4092920353982301,&quot;lrPrecision&quot;:0.7254901960784313,&quot;rfRecall&quot;:0.49336283185840707,&quot;rfPrecision&quot;:0.7263843648208469},{&quot;lrRecall&quot;:0.41150442477876104,&quot;lrPrecision&quot;:0.7181467181467182,&quot;rfRecall&quot;:0.497787610619469,&quot;rfPrecision&quot;:0.7234726688102894},{&quot;lrRecall&quot;:0.413716814159292,&quot;lrPrecision&quot;:0.7137404580152672,&quot;rfRecall&quot;:0.5066371681415929,&quot;rfPrecision&quot;:0.715625},{&quot;lrRecall&quot;:0.41814159292035397,&quot;lrPrecision&quot;:0.7159090909090909,&quot;rfRecall&quot;:0.5110619469026548,&quot;rfPrecision&quot;:0.7107692307692308},{&quot;lrRecall&quot;:0.42035398230088494,&quot;lrPrecision&quot;:0.7169811320754716,&quot;rfRecall&quot;:0.5199115044247787,&quot;rfPrecision&quot;:0.7078313253012049},{&quot;lrRecall&quot;:0.4269911504424779,&quot;lrPrecision&quot;:0.7121771217712177,&quot;rfRecall&quot;:0.5309734513274337,&quot;rfPrecision&quot;:0.7038123167155426},{&quot;lrRecall&quot;:0.42920353982300885,&quot;lrPrecision&quot;:0.7106227106227107,&quot;rfRecall&quot;:0.5331858407079646,&quot;rfPrecision&quot;:0.7046783625730995},{&quot;lrRecall&quot;:0.4336283185840708,&quot;lrPrecision&quot;:0.7101449275362319,&quot;rfRecall&quot;:0.5376106194690266,&quot;rfPrecision&quot;:0.7023121387283237},{&quot;lrRecall&quot;:0.4491150442477876,&quot;lrPrecision&quot;:0.7173144876325088,&quot;rfRecall&quot;:0.5420353982300885,&quot;rfPrecision&quot;:0.7020057306590258},{&quot;lrRecall&quot;:0.45132743362831856,&quot;lrPrecision&quot;:0.7183098591549296,&quot;rfRecall&quot;:0.5663716814159292,&quot;rfPrecision&quot;:0.6956521739130435},{&quot;lrRecall&quot;:0.45353982300884954,&quot;lrPrecision&quot;:0.7167832167832168,&quot;rfRecall&quot;:0.5685840707964602,&quot;rfPrecision&quot;:0.6945945945945946},{&quot;lrRecall&quot;:0.4557522123893805,&quot;lrPrecision&quot;:0.7103448275862069,&quot;rfRecall&quot;:0.5707964601769911,&quot;rfPrecision&quot;:0.6935483870967742},{&quot;lrRecall&quot;:0.48008849557522126,&quot;lrPrecision&quot;:0.7114754098360656,&quot;rfRecall&quot;:0.5707964601769911,&quot;rfPrecision&quot;:0.6898395721925134},{&quot;lrRecall&quot;:0.4823008849557522,&quot;lrPrecision&quot;:0.7124183006535948,&quot;rfRecall&quot;:0.5796460176991151,&quot;rfPrecision&quot;:0.6876640419947506},{&quot;lrRecall&quot;:0.48451327433628316,&quot;lrPrecision&quot;:0.711038961038961,&quot;rfRecall&quot;:0.584070796460177,&quot;rfPrecision&quot;:0.6857142857142857},{&quot;lrRecall&quot;:0.48672566371681414,&quot;lrPrecision&quot;:0.707395498392283,&quot;rfRecall&quot;:0.5929203539823009,&quot;rfPrecision&quot;:0.6767676767676768},{&quot;lrRecall&quot;:0.49336283185840707,&quot;lrPrecision&quot;:0.707936507936508,&quot;rfRecall&quot;:0.5951327433628318,&quot;rfPrecision&quot;:0.6758793969849246},{&quot;lrRecall&quot;:0.5066371681415929,&quot;lrPrecision&quot;:0.7024539877300614,&quot;rfRecall&quot;:0.5973451327433629,&quot;rfPrecision&quot;:0.6766917293233082},{&quot;lrRecall&quot;:0.5221238938053098,&quot;lrPrecision&quot;:0.7023809523809523,&quot;rfRecall&quot;:0.6061946902654868,&quot;rfPrecision&quot;:0.6732186732186732},{&quot;lrRecall&quot;:0.5287610619469026,&quot;lrPrecision&quot;:0.6967930029154519,&quot;rfRecall&quot;:0.6061946902654868,&quot;rfPrecision&quot;:0.6715686274509803},{&quot;lrRecall&quot;:0.5442477876106194,&quot;lrPrecision&quot;:0.6776859504132231,&quot;rfRecall&quot;:0.6084070796460177,&quot;rfPrecision&quot;:0.6723716381418093},{&quot;lrRecall&quot;:0.5464601769911505,&quot;lrPrecision&quot;:0.674863387978142,&quot;rfRecall&quot;:0.6150442477876106,&quot;rfPrecision&quot;:0.6698795180722892},{&quot;lrRecall&quot;:0.5508849557522124,&quot;lrPrecision&quot;:0.672972972972973,&quot;rfRecall&quot;:0.6526548672566371,&quot;rfPrecision&quot;:0.6469298245614035},{&quot;lrRecall&quot;:0.5530973451327433,&quot;lrPrecision&quot;:0.6720430107526881,&quot;rfRecall&quot;:0.661504424778761,&quot;rfPrecision&quot;:0.630801687763713},{&quot;lrRecall&quot;:0.5553097345132744,&quot;lrPrecision&quot;:0.6729222520107239,&quot;rfRecall&quot;:0.668141592920354,&quot;rfPrecision&quot;:0.6291666666666667},{&quot;lrRecall&quot;:0.5619469026548672,&quot;lrPrecision&quot;:0.6684210526315789,&quot;rfRecall&quot;:0.6703539823008849,&quot;rfPrecision&quot;:0.6299376299376299},{&quot;lrRecall&quot;:0.5663716814159292,&quot;lrPrecision&quot;:0.6684073107049608,&quot;rfRecall&quot;:0.6769911504424779,&quot;rfPrecision&quot;:0.6270491803278688},{&quot;lrRecall&quot;:0.5730088495575221,&quot;lrPrecision&quot;:0.6692506459948321,&quot;rfRecall&quot;:0.6814159292035398,&quot;rfPrecision&quot;:0.6260162601626016},{&quot;lrRecall&quot;:0.577433628318584,&quot;lrPrecision&quot;:0.6692307692307692,&quot;rfRecall&quot;:0.6969026548672567,&quot;rfPrecision&quot;:0.6176470588235294},{&quot;lrRecall&quot;:0.581858407079646,&quot;lrPrecision&quot;:0.6692111959287532,&quot;rfRecall&quot;:0.6991150442477876,&quot;rfPrecision&quot;:0.6171875},{&quot;lrRecall&quot;:0.588495575221239,&quot;lrPrecision&quot;:0.6683417085427136,&quot;rfRecall&quot;:0.7013274336283186,&quot;rfPrecision&quot;:0.6167315175097277},{&quot;lrRecall&quot;:0.5995575221238938,&quot;lrPrecision&quot;:0.6674876847290641,&quot;rfRecall&quot;:0.7035398230088495,&quot;rfPrecision&quot;:0.6174757281553398},{&quot;lrRecall&quot;:0.6017699115044248,&quot;lrPrecision&quot;:0.6650366748166259,&quot;rfRecall&quot;:0.7123893805309734,&quot;rfPrecision&quot;:0.6145038167938931},{&quot;lrRecall&quot;:0.6039823008849557,&quot;lrPrecision&quot;:0.6658536585365854,&quot;rfRecall&quot;:0.7168141592920354,&quot;rfPrecision&quot;:0.6148007590132827},{&quot;lrRecall&quot;:0.6061946902654868,&quot;lrPrecision&quot;:0.6650485436893204,&quot;rfRecall&quot;:0.7256637168141593,&quot;rfPrecision&quot;:0.6108007448789572},{&quot;lrRecall&quot;:0.6084070796460177,&quot;lrPrecision&quot;:0.6626506024096386,&quot;rfRecall&quot;:0.7256637168141593,&quot;rfPrecision&quot;:0.6051660516605166},{&quot;lrRecall&quot;:0.6106194690265486,&quot;lrPrecision&quot;:0.6618705035971223,&quot;rfRecall&quot;:0.7345132743362832,&quot;rfPrecision&quot;:0.6003616636528029},{&quot;lrRecall&quot;:0.6261061946902655,&quot;lrPrecision&quot;:0.6581395348837209,&quot;rfRecall&quot;:0.7367256637168141,&quot;rfPrecision&quot;:0.6},{&quot;lrRecall&quot;:0.6327433628318584,&quot;lrPrecision&quot;:0.6574712643678161,&quot;rfRecall&quot;:0.7367256637168141,&quot;rfPrecision&quot;:0.5978456014362658},{&quot;lrRecall&quot;:0.6327433628318584,&quot;lrPrecision&quot;:0.6544622425629291,&quot;rfRecall&quot;:0.7367256637168141,&quot;rfPrecision&quot;:0.5967741935483871},{&quot;lrRecall&quot;:0.6371681415929203,&quot;lrPrecision&quot;:0.6545454545454545,&quot;rfRecall&quot;:0.7389380530973452,&quot;rfPrecision&quot;:0.5964285714285714},{&quot;lrRecall&quot;:0.6371681415929203,&quot;lrPrecision&quot;:0.6530612244897959,&quot;rfRecall&quot;:0.7411504424778761,&quot;rfPrecision&quot;:0.5971479500891266},{&quot;lrRecall&quot;:0.6415929203539823,&quot;lrPrecision&quot;:0.6531531531531531,&quot;rfRecall&quot;:0.7411504424778761,&quot;rfPrecision&quot;:0.5960854092526691},{&quot;lrRecall&quot;:0.6460176991150443,&quot;lrPrecision&quot;:0.6488888888888888,&quot;rfRecall&quot;:0.7411504424778761,&quot;rfPrecision&quot;:0.5929203539823009},{&quot;lrRecall&quot;:0.6504424778761062,&quot;lrPrecision&quot;:0.6447368421052632,&quot;rfRecall&quot;:0.7433628318584071,&quot;rfPrecision&quot;:0.5936395759717314},{&quot;lrRecall&quot;:0.6504424778761062,&quot;lrPrecision&quot;:0.6433260393873085,&quot;rfRecall&quot;:0.75,&quot;rfPrecision&quot;:0.5895652173913043},{&quot;lrRecall&quot;:0.668141592920354,&quot;lrPrecision&quot;:0.638477801268499,&quot;rfRecall&quot;:0.754424778761062,&quot;rfPrecision&quot;:0.5909878682842288},{&quot;lrRecall&quot;:0.6792035398230089,&quot;lrPrecision&quot;:0.6342975206611571,&quot;rfRecall&quot;:0.754424778761062,&quot;rfPrecision&quot;:0.5869191049913941},{&quot;lrRecall&quot;:0.6792035398230089,&quot;lrPrecision&quot;:0.6303901437371663,&quot;rfRecall&quot;:0.7566371681415929,&quot;rfPrecision&quot;:0.5806451612903226},{&quot;lrRecall&quot;:0.6792035398230089,&quot;lrPrecision&quot;:0.6265306122448979,&quot;rfRecall&quot;:0.7632743362831859,&quot;rfPrecision&quot;:0.5798319327731093},{&quot;lrRecall&quot;:0.6792035398230089,&quot;lrPrecision&quot;:0.6252545824847251,&quot;rfRecall&quot;:0.7654867256637168,&quot;rfPrecision&quot;:0.5795644891122278},{&quot;lrRecall&quot;:0.6792035398230089,&quot;lrPrecision&quot;:0.6239837398373984,&quot;rfRecall&quot;:0.7809734513274337,&quot;rfPrecision&quot;:0.578688524590164},{&quot;lrRecall&quot;:0.6792035398230089,&quot;lrPrecision&quot;:0.6202020202020202,&quot;rfRecall&quot;:0.7853982300884956,&quot;rfPrecision&quot;:0.5800653594771242},{&quot;lrRecall&quot;:0.6836283185840708,&quot;lrPrecision&quot;:0.6217303822937625,&quot;rfRecall&quot;:0.7853982300884956,&quot;rfPrecision&quot;:0.5781758957654723},{&quot;lrRecall&quot;:0.6946902654867256,&quot;lrPrecision&quot;:0.6097087378640776,&quot;rfRecall&quot;:0.7876106194690266,&quot;rfPrecision&quot;:0.577922077922078},{&quot;lrRecall&quot;:0.6991150442477876,&quot;lrPrecision&quot;:0.6065259117082533,&quot;rfRecall&quot;:0.7898230088495575,&quot;rfPrecision&quot;:0.5776699029126213},{&quot;lrRecall&quot;:0.7013274336283186,&quot;lrPrecision&quot;:0.6015180265654649,&quot;rfRecall&quot;:0.7964601769911505,&quot;rfPrecision&quot;:0.5678233438485805},{&quot;lrRecall&quot;:0.7013274336283186,&quot;lrPrecision&quot;:0.6003787878787878,&quot;rfRecall&quot;:0.7964601769911505,&quot;rfPrecision&quot;:0.5669291338582677},{&quot;lrRecall&quot;:0.7079646017699115,&quot;lrPrecision&quot;:0.595903165735568,&quot;rfRecall&quot;:0.8008849557522124,&quot;rfPrecision&quot;:0.5638629283489096},{&quot;lrRecall&quot;:0.7123893805309734,&quot;lrPrecision&quot;:0.5886654478976234,&quot;rfRecall&quot;:0.8030973451327433,&quot;rfPrecision&quot;:0.5619195046439629},{&quot;lrRecall&quot;:0.7168141592920354,&quot;lrPrecision&quot;:0.588021778584392,&quot;rfRecall&quot;:0.8207964601769911,&quot;rfPrecision&quot;:0.5621212121212121},{&quot;lrRecall&quot;:0.7168141592920354,&quot;lrPrecision&quot;:0.5869565217391305,&quot;rfRecall&quot;:0.8230088495575221,&quot;rfPrecision&quot;:0.5602409638554217},{&quot;lrRecall&quot;:0.7234513274336283,&quot;lrPrecision&quot;:0.5870736086175943,&quot;rfRecall&quot;:0.8252212389380531,&quot;rfPrecision&quot;:0.56006006006006},{&quot;lrRecall&quot;:0.7278761061946902,&quot;lrPrecision&quot;:0.5833333333333334,&quot;rfRecall&quot;:0.8252212389380531,&quot;rfPrecision&quot;:0.5583832335329342},{&quot;lrRecall&quot;:0.7300884955752213,&quot;lrPrecision&quot;:0.5830388692579506,&quot;rfRecall&quot;:0.831858407079646,&quot;rfPrecision&quot;:0.5586924219910847},{&quot;lrRecall&quot;:0.7345132743362832,&quot;lrPrecision&quot;:0.5753899480069324,&quot;rfRecall&quot;:0.8407079646017699,&quot;rfPrecision&quot;:0.5563689604685212},{&quot;lrRecall&quot;:0.7411504424778761,&quot;lrPrecision&quot;:0.5736301369863014,&quot;rfRecall&quot;:0.8517699115044248,&quot;rfPrecision&quot;:0.5453257790368272},{&quot;lrRecall&quot;:0.745575221238938,&quot;lrPrecision&quot;:0.5692567567567568,&quot;rfRecall&quot;:0.8561946902654868,&quot;rfPrecision&quot;:0.5412587412587413},{&quot;lrRecall&quot;:0.7477876106194691,&quot;lrPrecision&quot;:0.5680672268907563,&quot;rfRecall&quot;:0.8561946902654868,&quot;rfPrecision&quot;:0.5405027932960894},{&quot;lrRecall&quot;:0.7477876106194691,&quot;lrPrecision&quot;:0.5661641541038526,&quot;rfRecall&quot;:0.8606194690265486,&quot;rfPrecision&quot;:0.5343406593406593},{&quot;lrRecall&quot;:0.7632743362831859,&quot;lrPrecision&quot;:0.5665024630541872,&quot;rfRecall&quot;:0.8606194690265486,&quot;rfPrecision&quot;:0.5328767123287671},{&quot;lrRecall&quot;:0.7676991150442478,&quot;lrPrecision&quot;:0.5633116883116883,&quot;rfRecall&quot;:0.8606194690265486,&quot;rfPrecision&quot;:0.5299727520435967},{&quot;lrRecall&quot;:0.7676991150442478,&quot;lrPrecision&quot;:0.5605815831987075,&quot;rfRecall&quot;:0.8606194690265486,&quot;rfPrecision&quot;:0.5292517006802722},{&quot;lrRecall&quot;:0.7721238938053098,&quot;lrPrecision&quot;:0.5610932475884244,&quot;rfRecall&quot;:0.8672566371681416,&quot;rfPrecision&quot;:0.519205298013245},{&quot;lrRecall&quot;:0.7721238938053098,&quot;lrPrecision&quot;:0.5575079872204473,&quot;rfRecall&quot;:0.8672566371681416,&quot;rfPrecision&quot;:0.5157894736842106},{&quot;lrRecall&quot;:0.7765486725663717,&quot;lrPrecision&quot;:0.552755905511811,&quot;rfRecall&quot;:0.8694690265486725,&quot;rfPrecision&quot;:0.5137254901960784},{&quot;lrRecall&quot;:0.7809734513274337,&quot;lrPrecision&quot;:0.5515625,&quot;rfRecall&quot;:0.8716814159292036,&quot;rfPrecision&quot;:0.5031928480204342},{&quot;lrRecall&quot;:0.7853982300884956,&quot;lrPrecision&quot;:0.5486862442040186,&quot;rfRecall&quot;:0.8716814159292036,&quot;rfPrecision&quot;:0.5012722646310432},{&quot;lrRecall&quot;:0.7853982300884956,&quot;lrPrecision&quot;:0.5478395061728395,&quot;rfRecall&quot;:0.8716814159292036,&quot;rfPrecision&quot;:0.5006353240152478},{&quot;lrRecall&quot;:0.7853982300884956,&quot;lrPrecision&quot;:0.5469953775038521,&quot;rfRecall&quot;:0.8761061946902655,&quot;rfPrecision&quot;:0.5},{&quot;lrRecall&quot;:0.7853982300884956,&quot;lrPrecision&quot;:0.5461538461538461,&quot;rfRecall&quot;:0.8783185840707964,&quot;rfPrecision&quot;:0.49687108886107634},{&quot;lrRecall&quot;:0.7876106194690266,&quot;lrPrecision&quot;:0.5468509984639017,&quot;rfRecall&quot;:0.8783185840707964,&quot;rfPrecision&quot;:0.49501246882793015},{&quot;lrRecall&quot;:0.7942477876106194,&quot;lrPrecision&quot;:0.5431164901664145,&quot;rfRecall&quot;:0.8805309734513275,&quot;rfPrecision&quot;:0.49502487562189057},{&quot;lrRecall&quot;:0.7942477876106194,&quot;lrPrecision&quot;:0.5422960725075529,&quot;rfRecall&quot;:0.8827433628318584,&quot;rfPrecision&quot;:0.49503722084367247},{&quot;lrRecall&quot;:0.7942477876106194,&quot;lrPrecision&quot;:0.5414781297134238,&quot;rfRecall&quot;:0.8871681415929203,&quot;rfPrecision&quot;:0.4884287454323995},{&quot;lrRecall&quot;:0.8008849557522124,&quot;lrPrecision&quot;:0.5362962962962963,&quot;rfRecall&quot;:0.8938053097345132,&quot;rfPrecision&quot;:0.4867469879518072},{&quot;lrRecall&quot;:0.8030973451327433,&quot;lrPrecision&quot;:0.5353982300884956,&quot;rfRecall&quot;:0.8938053097345132,&quot;rfPrecision&quot;:0.4861612515042118},{&quot;lrRecall&quot;:0.8097345132743363,&quot;lrPrecision&quot;:0.5304347826086957,&quot;rfRecall&quot;:0.8938053097345132,&quot;rfPrecision&quot;:0.4849939975990396},{&quot;lrRecall&quot;:0.8097345132743363,&quot;lrPrecision&quot;:0.5296671490593343,&quot;rfRecall&quot;:0.8938053097345132,&quot;rfPrecision&quot;:0.48383233532934133},{&quot;lrRecall&quot;:0.8119469026548672,&quot;lrPrecision&quot;:0.5280575539568345,&quot;rfRecall&quot;:0.8960176991150443,&quot;rfPrecision&quot;:0.4781582054309327},{&quot;lrRecall&quot;:0.8119469026548672,&quot;lrPrecision&quot;:0.5257879656160458,&quot;rfRecall&quot;:0.8982300884955752,&quot;rfPrecision&quot;:0.4765258215962441},{&quot;lrRecall&quot;:0.8141592920353983,&quot;lrPrecision&quot;:0.5205091937765205,&quot;rfRecall&quot;:0.8982300884955752,&quot;rfPrecision&quot;:0.47485380116959064},{&quot;lrRecall&quot;:0.8141592920353983,&quot;lrPrecision&quot;:0.5190409026798307,&quot;rfRecall&quot;:0.8982300884955752,&quot;rfPrecision&quot;:0.47374562427071176},{&quot;lrRecall&quot;:0.8163716814159292,&quot;lrPrecision&quot;:0.5125,&quot;rfRecall&quot;:0.9004424778761062,&quot;rfPrecision&quot;:0.47380675203725264},{&quot;lrRecall&quot;:0.8163716814159292,&quot;lrPrecision&quot;:0.5096685082872928,&quot;rfRecall&quot;:0.9004424778761062,&quot;rfPrecision&quot;:0.47215777262180975},{&quot;lrRecall&quot;:0.8163716814159292,&quot;lrPrecision&quot;:0.5089655172413793,&quot;rfRecall&quot;:0.9026548672566371,&quot;rfPrecision&quot;:0.47167630057803467},{&quot;lrRecall&quot;:0.8185840707964602,&quot;lrPrecision&quot;:0.5068493150684932,&quot;rfRecall&quot;:0.9026548672566371,&quot;rfPrecision&quot;:0.47113163972286376},{&quot;lrRecall&quot;:0.8252212389380531,&quot;lrPrecision&quot;:0.49601063829787234,&quot;rfRecall&quot;:0.9048672566371682,&quot;rfPrecision&quot;:0.47119815668202764},{&quot;lrRecall&quot;:0.8252212389380531,&quot;lrPrecision&quot;:0.4953519256308101,&quot;rfRecall&quot;:0.9048672566371682,&quot;rfPrecision&quot;:0.4695752009184845},{&quot;lrRecall&quot;:0.8252212389380531,&quot;lrPrecision&quot;:0.49273447820343463,&quot;rfRecall&quot;:0.9048672566371682,&quot;rfPrecision&quot;:0.4679633867276888},{&quot;lrRecall&quot;:0.827433628318584,&quot;lrPrecision&quot;:0.49017038007863695,&quot;rfRecall&quot;:0.9070796460176991,&quot;rfPrecision&quot;:0.467502850627138},{&quot;lrRecall&quot;:0.8296460176991151,&quot;lrPrecision&quot;:0.4908376963350785,&quot;rfRecall&quot;:0.9070796460176991,&quot;rfPrecision&quot;:0.464326160815402},{&quot;lrRecall&quot;:0.834070796460177,&quot;lrPrecision&quot;:0.4889753566796368,&quot;rfRecall&quot;:0.911504424778761,&quot;rfPrecision&quot;:0.45982142857142855},{&quot;lrRecall&quot;:0.834070796460177,&quot;lrPrecision&quot;:0.48582474226804123,&quot;rfRecall&quot;:0.911504424778761,&quot;rfPrecision&quot;:0.4593088071348941},{&quot;lrRecall&quot;:0.834070796460177,&quot;lrPrecision&quot;:0.4851994851994852,&quot;rfRecall&quot;:0.9137168141592921,&quot;rfPrecision&quot;:0.45685840707964603},{&quot;lrRecall&quot;:0.834070796460177,&quot;lrPrecision&quot;:0.4845758354755784,&quot;rfRecall&quot;:0.9137168141592921,&quot;rfPrecision&quot;:0.456353591160221},{&quot;lrRecall&quot;:0.834070796460177,&quot;lrPrecision&quot;:0.4802547770700637,&quot;rfRecall&quot;:0.9203539823008849,&quot;rfPrecision&quot;:0.44349680170575695},{&quot;lrRecall&quot;:0.834070796460177,&quot;lrPrecision&quot;:0.46948941469489414,&quot;rfRecall&quot;:0.9203539823008849,&quot;rfPrecision&quot;:0.4425531914893617},{&quot;lrRecall&quot;:0.834070796460177,&quot;lrPrecision&quot;:0.4683229813664596,&quot;rfRecall&quot;:0.9203539823008849,&quot;rfPrecision&quot;:0.4392819429778247},{&quot;lrRecall&quot;:0.8362831858407079,&quot;lrPrecision&quot;:0.46898263027295284,&quot;rfRecall&quot;:0.922566371681416,&quot;rfPrecision&quot;:0.43894736842105264},{&quot;lrRecall&quot;:0.8451327433628318,&quot;lrPrecision&quot;:0.46079613992762364,&quot;rfRecall&quot;:0.9314159292035398,&quot;rfPrecision&quot;:0.43899895724713245},{&quot;lrRecall&quot;:0.8451327433628318,&quot;lrPrecision&quot;:0.4602409638554217,&quot;rfRecall&quot;:0.9314159292035398,&quot;rfPrecision&quot;:0.4380853277835588},{&quot;lrRecall&quot;:0.8451327433628318,&quot;lrPrecision&quot;:0.4580335731414868,&quot;rfRecall&quot;:0.9314159292035398,&quot;rfPrecision&quot;:0.4376299376299376},{&quot;lrRecall&quot;:0.8473451327433629,&quot;lrPrecision&quot;:0.45486935866983375,&quot;rfRecall&quot;:0.9380530973451328,&quot;rfPrecision&quot;:0.4335378323108384},{&quot;lrRecall&quot;:0.8517699115044248,&quot;lrPrecision&quot;:0.45294117647058824,&quot;rfRecall&quot;:0.9424778761061947,&quot;rfPrecision&quot;:0.43204868154158216},{&quot;lrRecall&quot;:0.8517699115044248,&quot;lrPrecision&quot;:0.45240893066980026,&quot;rfRecall&quot;:0.9446902654867256,&quot;rfPrecision&quot;:0.4308779011099899},{&quot;lrRecall&quot;:0.8517699115044248,&quot;lrPrecision&quot;:0.451348182883939,&quot;rfRecall&quot;:0.9446902654867256,&quot;rfPrecision&quot;:0.4300100704934542},{&quot;lrRecall&quot;:0.8606194690265486,&quot;lrPrecision&quot;:0.44815668202764974,&quot;rfRecall&quot;:0.9469026548672567,&quot;rfPrecision&quot;:0.428},{&quot;lrRecall&quot;:0.8606194690265486,&quot;lrPrecision&quot;:0.4471264367816092,&quot;rfRecall&quot;:0.9469026548672567,&quot;rfPrecision&quot;:0.42714570858283435},{&quot;lrRecall&quot;:0.8606194690265486,&quot;lrPrecision&quot;:0.44661308840413316,&quot;rfRecall&quot;:0.9469026548672567,&quot;rfPrecision&quot;:0.42376237623762375},{&quot;lrRecall&quot;:0.8650442477876106,&quot;lrPrecision&quot;:0.44685714285714284,&quot;rfRecall&quot;:0.9469026548672567,&quot;rfPrecision&quot;:0.42292490118577075},{&quot;lrRecall&quot;:0.8672566371681416,&quot;lrPrecision&quot;:0.4469783352337514,&quot;rfRecall&quot;:0.9469026548672567,&quot;rfPrecision&quot;:0.4196078431372549},{&quot;lrRecall&quot;:0.8694690265486725,&quot;lrPrecision&quot;:0.4435665914221219,&quot;rfRecall&quot;:0.9491150442477876,&quot;rfPrecision&quot;:0.41812865497076024},{&quot;lrRecall&quot;:0.8694690265486725,&quot;lrPrecision&quot;:0.4420697412823397,&quot;rfRecall&quot;:0.9491150442477876,&quot;rfPrecision&quot;:0.4173151750972763},{&quot;lrRecall&quot;:0.8716814159292036,&quot;lrPrecision&quot;:0.43973214285714285,&quot;rfRecall&quot;:0.9491150442477876,&quot;rfPrecision&quot;:0.41650485436893203},{&quot;lrRecall&quot;:0.8716814159292036,&quot;lrPrecision&quot;:0.43777777777777777,&quot;rfRecall&quot;:0.9491150442477876,&quot;rfPrecision&quot;:0.41529525653436594},{&quot;lrRecall&quot;:0.8761061946902655,&quot;lrPrecision&quot;:0.4351648351648352,&quot;rfRecall&quot;:0.9513274336283186,&quot;rfPrecision&quot;:0.4118773946360153},{&quot;lrRecall&quot;:0.8761061946902655,&quot;lrPrecision&quot;:0.4342105263157895,&quot;rfRecall&quot;:0.9535398230088495,&quot;rfPrecision&quot;:0.4077578051087985},{&quot;lrRecall&quot;:0.8783185840707964,&quot;lrPrecision&quot;:0.4334061135371179,&quot;rfRecall&quot;:0.9535398230088495,&quot;rfPrecision&quot;:0.40698772426817753},{&quot;lrRecall&quot;:0.8805309734513275,&quot;lrPrecision&quot;:0.42934196332254587,&quot;rfRecall&quot;:0.9557522123893806,&quot;rfPrecision&quot;:0.4056338028169014},{&quot;lrRecall&quot;:0.8805309734513275,&quot;lrPrecision&quot;:0.4265809217577706,&quot;rfRecall&quot;:0.9557522123893806,&quot;rfPrecision&quot;:0.40411599625818523},{&quot;lrRecall&quot;:0.8805309734513275,&quot;lrPrecision&quot;:0.42250530785562634,&quot;rfRecall&quot;:0.9557522123893806,&quot;rfPrecision&quot;:0.40373831775700936},{&quot;lrRecall&quot;:0.8827433628318584,&quot;lrPrecision&quot;:0.4204425711275026,&quot;rfRecall&quot;:0.9601769911504425,&quot;rfPrecision&quot;:0.40148011100832565},{&quot;lrRecall&quot;:0.8827433628318584,&quot;lrPrecision&quot;:0.42,&quot;rfRecall&quot;:0.9601769911504425,&quot;rfPrecision&quot;:0.4011090573012939},{&quot;lrRecall&quot;:0.8849557522123894,&quot;lrPrecision&quot;:0.4197271773347324,&quot;rfRecall&quot;:0.9601769911504425,&quot;rfPrecision&quot;:0.4003690036900369},{&quot;lrRecall&quot;:0.8849557522123894,&quot;lrPrecision&quot;:0.4166666666666667,&quot;rfRecall&quot;:0.9601769911504425,&quot;rfPrecision&quot;:0.395985401459854},{&quot;lrRecall&quot;:0.8871681415929203,&quot;lrPrecision&quot;:0.4142561983471074,&quot;rfRecall&quot;:0.9601769911504425,&quot;rfPrecision&quot;:0.39454545454545453},{&quot;lrRecall&quot;:0.8938053097345132,&quot;lrPrecision&quot;:0.4105691056910569,&quot;rfRecall&quot;:0.9601769911504425,&quot;rfPrecision&quot;:0.3913435527502254},{&quot;lrRecall&quot;:0.8938053097345132,&quot;lrPrecision&quot;:0.4101522842639594,&quot;rfRecall&quot;:0.9601769911504425,&quot;rfPrecision&quot;:0.39063906390639064},{&quot;lrRecall&quot;:0.8982300884955752,&quot;lrPrecision&quot;:0.40763052208835343,&quot;rfRecall&quot;:0.9601769911504425,&quot;rfPrecision&quot;:0.3895870736086176},{&quot;lrRecall&quot;:0.8982300884955752,&quot;lrPrecision&quot;:0.40559440559440557,&quot;rfRecall&quot;:0.9601769911504425,&quot;rfPrecision&quot;:0.38923766816143496},{&quot;lrRecall&quot;:0.8982300884955752,&quot;lrPrecision&quot;:0.4027777777777778,&quot;rfRecall&quot;:0.9601769911504425,&quot;rfPrecision&quot;:0.38646482635796975},{&quot;lrRecall&quot;:0.8982300884955752,&quot;lrPrecision&quot;:0.40237859266600595,&quot;rfRecall&quot;:0.9623893805309734,&quot;rfPrecision&quot;:0.38191395961369623},{&quot;lrRecall&quot;:0.8982300884955752,&quot;lrPrecision&quot;:0.40158259149357073,&quot;rfRecall&quot;:0.9623893805309734,&quot;rfPrecision&quot;:0.38124452234881684},{&quot;lrRecall&quot;:0.8982300884955752,&quot;lrPrecision&quot;:0.3980392156862745,&quot;rfRecall&quot;:0.9646017699115044,&quot;rfPrecision&quot;:0.3791304347826087},{&quot;lrRecall&quot;:0.8982300884955752,&quot;lrPrecision&quot;:0.3949416342412451,&quot;rfRecall&quot;:0.9646017699115044,&quot;rfPrecision&quot;:0.3778162911611785},{&quot;lrRecall&quot;:0.8982300884955752,&quot;lrPrecision&quot;:0.39076034648700675,&quot;rfRecall&quot;:0.9646017699115044,&quot;rfPrecision&quot;:0.37618636755823986},{&quot;lrRecall&quot;:0.9092920353982301,&quot;lrPrecision&quot;:0.3899430740037951,&quot;rfRecall&quot;:0.9646017699115044,&quot;rfPrecision&quot;:0.3758620689655172},{&quot;lrRecall&quot;:0.9092920353982301,&quot;lrPrecision&quot;:0.38920454545454547,&quot;rfRecall&quot;:0.9646017699115044,&quot;rfPrecision&quot;:0.3736075407026564},{&quot;lrRecall&quot;:0.9092920353982301,&quot;lrPrecision&quot;:0.38591549295774646,&quot;rfRecall&quot;:0.9668141592920354,&quot;rfPrecision&quot;:0.3738237810094098},{&quot;lrRecall&quot;:0.911504424778761,&quot;lrPrecision&quot;:0.3814814814814815,&quot;rfRecall&quot;:0.9668141592920354,&quot;rfPrecision&quot;:0.3735042735042735},{&quot;lrRecall&quot;:0.911504424778761,&quot;lrPrecision&quot;:0.3800738007380074,&quot;rfRecall&quot;:0.9668141592920354,&quot;rfPrecision&quot;:0.37254901960784315},{&quot;lrRecall&quot;:0.911504424778761,&quot;lrPrecision&quot;:0.3797235023041475,&quot;rfRecall&quot;:0.9668141592920354,&quot;rfPrecision&quot;:0.3697123519458545},{&quot;lrRecall&quot;:0.911504424778761,&quot;lrPrecision&quot;:0.3783287419651056,&quot;rfRecall&quot;:0.9668141592920354,&quot;rfPrecision&quot;:0.3687763713080169},{&quot;lrRecall&quot;:0.911504424778761,&quot;lrPrecision&quot;:0.37522768670309653,&quot;rfRecall&quot;:0.9668141592920354,&quot;rfPrecision&quot;:0.3684654300168634},{&quot;lrRecall&quot;:0.911504424778761,&quot;lrPrecision&quot;:0.37251356238698013,&quot;rfRecall&quot;:0.9668141592920354,&quot;rfPrecision&quot;:0.36538461538461536},{&quot;lrRecall&quot;:0.911504424778761,&quot;lrPrecision&quot;:0.3715058611361587,&quot;rfRecall&quot;:0.9668141592920354,&quot;rfPrecision&quot;:0.3617549668874172},{&quot;lrRecall&quot;:0.9137168141592921,&quot;lrPrecision&quot;:0.36907953529937443,&quot;rfRecall&quot;:0.9668141592920354,&quot;rfPrecision&quot;:0.36145574855252277},{&quot;lrRecall&quot;:0.9137168141592921,&quot;lrPrecision&quot;:0.3684210526315789,&quot;rfRecall&quot;:0.9668141592920354,&quot;rfPrecision&quot;:0.36056105610561057},{&quot;lrRecall&quot;:0.9137168141592921,&quot;lrPrecision&quot;:0.3680926916221034,&quot;rfRecall&quot;:0.9668141592920354,&quot;rfPrecision&quot;:0.3584905660377358},{&quot;lrRecall&quot;:0.9137168141592921,&quot;lrPrecision&quot;:0.3671111111111111,&quot;rfRecall&quot;:0.9668141592920354,&quot;rfPrecision&quot;:0.3570261437908497},{&quot;lrRecall&quot;:0.9137168141592921,&quot;lrPrecision&quot;:0.36678507992895204,&quot;rfRecall&quot;:0.9668141592920354,&quot;rfPrecision&quot;:0.3535598705501618},{&quot;lrRecall&quot;:0.9137168141592921,&quot;lrPrecision&quot;:0.3651635720601238,&quot;rfRecall&quot;:0.9668141592920354,&quot;rfPrecision&quot;:0.3529886914378029},{&quot;lrRecall&quot;:0.915929203539823,&quot;lrPrecision&quot;:0.3641160949868074,&quot;rfRecall&quot;:0.9668141592920354,&quot;rfPrecision&quot;:0.3524193548387097},{&quot;lrRecall&quot;:0.915929203539823,&quot;lrPrecision&quot;:0.36252189141856395,&quot;rfRecall&quot;:0.9668141592920354,&quot;rfPrecision&quot;:0.3507223113964687},{&quot;lrRecall&quot;:0.915929203539823,&quot;lrPrecision&quot;:0.36220472440944884,&quot;rfRecall&quot;:0.9690265486725663,&quot;rfPrecision&quot;:0.3487261146496815},{&quot;lrRecall&quot;:0.915929203539823,&quot;lrPrecision&quot;:0.3618881118881119,&quot;rfRecall&quot;:0.9690265486725663,&quot;rfPrecision&quot;:0.34789515488482925},{&quot;lrRecall&quot;:0.915929203539823,&quot;lrPrecision&quot;:0.360313315926893,&quot;rfRecall&quot;:0.9690265486725663,&quot;rfPrecision&quot;:0.3473433782712133},{&quot;lrRecall&quot;:0.918141592920354,&quot;lrPrecision&quot;:0.35806729939603105,&quot;rfRecall&quot;:0.9690265486725663,&quot;rfPrecision&quot;:0.34624505928853755},{&quot;lrRecall&quot;:0.918141592920354,&quot;lrPrecision&quot;:0.35745047372954347,&quot;rfRecall&quot;:0.9690265486725663,&quot;rfPrecision&quot;:0.3459715639810427},{&quot;lrRecall&quot;:0.918141592920354,&quot;lrPrecision&quot;:0.35683576956147894,&quot;rfRecall&quot;:0.9690265486725663,&quot;rfPrecision&quot;:0.3443396226415094},{&quot;lrRecall&quot;:0.9203539823008849,&quot;lrPrecision&quot;:0.35738831615120276,&quot;rfRecall&quot;:0.9712389380530974,&quot;rfPrecision&quot;:0.34323690383111805},{&quot;lrRecall&quot;:0.9203539823008849,&quot;lrPrecision&quot;:0.3567753001715266,&quot;rfRecall&quot;:0.9712389380530974,&quot;rfPrecision&quot;:0.3424336973478939},{&quot;lrRecall&quot;:0.922566371681416,&quot;lrPrecision&quot;:0.3567151411462789,&quot;rfRecall&quot;:0.9734513274336283,&quot;rfPrecision&quot;:0.3424124513618677},{&quot;lrRecall&quot;:0.922566371681416,&quot;lrPrecision&quot;:0.3548936170212766,&quot;rfRecall&quot;:0.9734513274336283,&quot;rfPrecision&quot;:0.34108527131782945},{&quot;lrRecall&quot;:0.9247787610619469,&quot;lrPrecision&quot;:0.3527426160337553,&quot;rfRecall&quot;:0.9734513274336283,&quot;rfPrecision&quot;:0.34055727554179566},{&quot;lrRecall&quot;:0.9247787610619469,&quot;lrPrecision&quot;:0.3524451939291737,&quot;rfRecall&quot;:0.9734513274336283,&quot;rfPrecision&quot;:0.3402938901778809},{&quot;lrRecall&quot;:0.9269911504424779,&quot;lrPrecision&quot;:0.35151006711409394,&quot;rfRecall&quot;:0.9756637168141593,&quot;rfPrecision&quot;:0.33975346687211094},{&quot;lrRecall&quot;:0.9269911504424779,&quot;lrPrecision&quot;:0.35004177109440265,&quot;rfRecall&quot;:0.9756637168141593,&quot;rfPrecision&quot;:0.3387096774193548},{&quot;lrRecall&quot;:0.9269911504424779,&quot;lrPrecision&quot;:0.3491666666666667,&quot;rfRecall&quot;:0.9756637168141593,&quot;rfPrecision&quot;:0.33741392501912776},{&quot;lrRecall&quot;:0.9269911504424779,&quot;lrPrecision&quot;:0.34771784232365144,&quot;rfRecall&quot;:0.9756637168141593,&quot;rfPrecision&quot;:0.3366412213740458},{&quot;lrRecall&quot;:0.9402654867256637,&quot;lrPrecision&quot;:0.3370340999206979,&quot;rfRecall&quot;:0.9756637168141593,&quot;rfPrecision&quot;:0.33638443935926776},{&quot;lrRecall&quot;:0.9424778761061947,&quot;lrPrecision&quot;:0.3367588932806324,&quot;rfRecall&quot;:0.9756637168141593,&quot;rfPrecision&quot;:0.33587204874333587},{&quot;lrRecall&quot;:0.9424778761061947,&quot;lrPrecision&quot;:0.33569739952718675,&quot;rfRecall&quot;:0.9778761061946902,&quot;rfPrecision&quot;:0.3363774733637747},{&quot;lrRecall&quot;:0.9424778761061947,&quot;lrPrecision&quot;:0.33490566037735847,&quot;rfRecall&quot;:0.9778761061946902,&quot;rfPrecision&quot;:0.3333333333333333},{&quot;lrRecall&quot;:0.9424778761061947,&quot;lrPrecision&quot;:0.33437990580847726,&quot;rfRecall&quot;:0.9800884955752213,&quot;rfPrecision&quot;:0.33283245679939893},{&quot;lrRecall&quot;:0.9424778761061947,&quot;lrPrecision&quot;:0.3338557993730408,&quot;rfRecall&quot;:0.9800884955752213,&quot;rfPrecision&quot;:0.3325825825825826},{&quot;lrRecall&quot;:0.9424778761061947,&quot;lrPrecision&quot;:0.3333333333333333,&quot;rfRecall&quot;:0.9800884955752213,&quot;rfPrecision&quot;:0.3308439133681852},{&quot;lrRecall&quot;:0.9424778761061947,&quot;lrPrecision&quot;:0.33307271305707586,&quot;rfRecall&quot;:0.9800884955752213,&quot;rfPrecision&quot;:0.3301043219076006},{&quot;lrRecall&quot;:0.9424778761061947,&quot;lrPrecision&quot;:0.33203429462197975,&quot;rfRecall&quot;:0.9800884955752213,&quot;rfPrecision&quot;:0.32863501483679525},{&quot;lrRecall&quot;:0.9446902654867256,&quot;lrPrecision&quot;:0.3289676425269646,&quot;rfRecall&quot;:0.9800884955752213,&quot;rfPrecision&quot;:0.3283914010378058},{&quot;lrRecall&quot;:0.9469026548672567,&quot;lrPrecision&quot;:0.327718223583461,&quot;rfRecall&quot;:0.9800884955752213,&quot;rfPrecision&quot;:0.32790525536639525},{&quot;lrRecall&quot;:0.9469026548672567,&quot;lrPrecision&quot;:0.3274674827850038,&quot;rfRecall&quot;:0.9800884955752213,&quot;rfPrecision&quot;:0.32742054693274203},{&quot;lrRecall&quot;:0.9491150442477876,&quot;lrPrecision&quot;:0.32574031890660593,&quot;rfRecall&quot;:0.9800884955752213,&quot;rfPrecision&quot;:0.327178729689808},{&quot;lrRecall&quot;:0.9491150442477876,&quot;lrPrecision&quot;:0.3254931714719272,&quot;rfRecall&quot;:0.9800884955752213,&quot;rfPrecision&quot;:0.3259749816041207},{&quot;lrRecall&quot;:0.9491150442477876,&quot;lrPrecision&quot;:0.3252463987869598,&quot;rfRecall&quot;:0.9823008849557522,&quot;rfPrecision&quot;:0.3236151603498542},{&quot;lrRecall&quot;:0.9513274336283186,&quot;lrPrecision&quot;:0.3255109765329296,&quot;rfRecall&quot;:0.9823008849557522,&quot;rfPrecision&quot;:0.3231441048034934},{&quot;lrRecall&quot;:0.9535398230088495,&quot;lrPrecision&quot;:0.3250377073906486,&quot;rfRecall&quot;:0.9823008849557522,&quot;rfPrecision&quot;:0.3226744186046512},{&quot;lrRecall&quot;:0.9535398230088495,&quot;lrPrecision&quot;:0.3245481927710843,&quot;rfRecall&quot;:0.9823008849557522,&quot;rfPrecision&quot;:0.32220609579100146},{&quot;lrRecall&quot;:0.9535398230088495,&quot;lrPrecision&quot;:0.3240601503759398,&quot;rfRecall&quot;:0.9823008849557522,&quot;rfPrecision&quot;:0.32127351664254705},{&quot;lrRecall&quot;:0.9535398230088495,&quot;lrPrecision&quot;:0.3235735735735736,&quot;rfRecall&quot;:0.9823008849557522,&quot;rfPrecision&quot;:0.3208092485549133},{&quot;lrRecall&quot;:0.9535398230088495,&quot;lrPrecision&quot;:0.3221225710014948,&quot;rfRecall&quot;:0.9823008849557522,&quot;rfPrecision&quot;:0.32057761732851986},{&quot;lrRecall&quot;:0.9535398230088495,&quot;lrPrecision&quot;:0.321882001493652,&quot;rfRecall&quot;:0.9823008849557522,&quot;rfPrecision&quot;:0.3194244604316547},{&quot;lrRecall&quot;:0.9535398230088495,&quot;lrPrecision&quot;:0.32164179104477614,&quot;rfRecall&quot;:0.9823008849557522,&quot;rfPrecision&quot;:0.3178239083750895},{&quot;lrRecall&quot;:0.9535398230088495,&quot;lrPrecision&quot;:0.3211624441132638,&quot;rfRecall&quot;:0.9823008849557522,&quot;rfPrecision&quot;:0.31759656652360513},{&quot;lrRecall&quot;:0.9535398230088495,&quot;lrPrecision&quot;:0.3209233060312733,&quot;rfRecall&quot;:0.9823008849557522,&quot;rfPrecision&quot;:0.3164647184604419},{&quot;lrRecall&quot;:0.9535398230088495,&quot;lrPrecision&quot;:0.3204460966542751,&quot;rfRecall&quot;:0.9823008849557522,&quot;rfPrecision&quot;:0.31444759206798867},{&quot;lrRecall&quot;:0.9557522123893806,&quot;lrPrecision&quot;:0.3202372127501853,&quot;rfRecall&quot;:0.9823008849557522,&quot;rfPrecision&quot;:0.3137809187279152},{&quot;lrRecall&quot;:0.9557522123893806,&quot;lrPrecision&quot;:0.32,&quot;rfRecall&quot;:0.9823008849557522,&quot;rfPrecision&quot;:0.31157894736842107},{&quot;lrRecall&quot;:0.9557522123893806,&quot;lrPrecision&quot;:0.3190546528803545,&quot;rfRecall&quot;:0.9823008849557522,&quot;rfPrecision&quot;:0.31114225648213034},{&quot;lrRecall&quot;:0.9579646017699115,&quot;lrPrecision&quot;:0.3176815847395451,&quot;rfRecall&quot;:0.9823008849557522,&quot;rfPrecision&quot;:0.3104895104895105},{&quot;lrRecall&quot;:0.9579646017699115,&quot;lrPrecision&quot;:0.31744868035190615,&quot;rfRecall&quot;:0.9823008849557522,&quot;rfPrecision&quot;:0.31027253668763105},{&quot;lrRecall&quot;:0.9579646017699115,&quot;lrPrecision&quot;:0.3172161172161172,&quot;rfRecall&quot;:0.9823008849557522,&quot;rfPrecision&quot;:0.30962343096234307},{&quot;lrRecall&quot;:0.9601769911504425,&quot;lrPrecision&quot;:0.3172514619883041,&quot;rfRecall&quot;:0.9823008849557522,&quot;rfPrecision&quot;:0.30919220055710306},{&quot;lrRecall&quot;:0.9601769911504425,&quot;lrPrecision&quot;:0.3167883211678832,&quot;rfRecall&quot;:0.9823008849557522,&quot;rfPrecision&quot;:0.3062068965517241},{&quot;lrRecall&quot;:0.9601769911504425,&quot;lrPrecision&quot;:0.31563636363636366,&quot;rfRecall&quot;:0.9867256637168141,&quot;rfPrecision&quot;:0.3058984910836763},{&quot;lrRecall&quot;:0.9601769911504425,&quot;lrPrecision&quot;:0.31540697674418605,&quot;rfRecall&quot;:0.9867256637168141,&quot;rfPrecision&quot;:0.3052703627652293},{&quot;lrRecall&quot;:0.9601769911504425,&quot;lrPrecision&quot;:0.3144927536231884,&quot;rfRecall&quot;:0.9889380530973452,&quot;rfPrecision&quot;:0.3057455540355677},{&quot;lrRecall&quot;:0.9646017699115044,&quot;lrPrecision&quot;:0.3127690100430416,&quot;rfRecall&quot;:0.9889380530973452,&quot;rfPrecision&quot;:0.3034623217922607},{&quot;lrRecall&quot;:0.9646017699115044,&quot;lrPrecision&quot;:0.31187410586552217,&quot;rfRecall&quot;:0.9889380530973452,&quot;rfPrecision&quot;:0.30284552845528456},{&quot;lrRecall&quot;:0.9646017699115044,&quot;lrPrecision&quot;:0.31142857142857144,&quot;rfRecall&quot;:0.9889380530973452,&quot;rfPrecision&quot;:0.3016194331983806},{&quot;lrRecall&quot;:0.9646017699115044,&quot;lrPrecision&quot;:0.31098430813124106,&quot;rfRecall&quot;:0.9911504424778761,&quot;rfPrecision&quot;:0.2998661311914324},{&quot;lrRecall&quot;:0.9646017699115044,&quot;lrPrecision&quot;:0.31076265146115467,&quot;rfRecall&quot;:0.9911504424778761,&quot;rfPrecision&quot;:0.2980705256154358},{&quot;lrRecall&quot;:0.9646017699115044,&quot;lrPrecision&quot;:0.3096590909090909,&quot;rfRecall&quot;:0.9933628318584071,&quot;rfPrecision&quot;:0.29853723404255317},{&quot;lrRecall&quot;:0.9646017699115044,&quot;lrPrecision&quot;:0.30900070871722185,&quot;rfRecall&quot;:0.9933628318584071,&quot;rfPrecision&quot;:0.29833887043189367},{&quot;lrRecall&quot;:0.9646017699115044,&quot;lrPrecision&quot;:0.3076923076923077,&quot;rfRecall&quot;:0.9933628318584071,&quot;rfPrecision&quot;:0.29735099337748344},{&quot;lrRecall&quot;:0.9646017699115044,&quot;lrPrecision&quot;:0.306826178747361,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.29411764705882354},{&quot;lrRecall&quot;:0.9646017699115044,&quot;lrPrecision&quot;:0.3055360896986685,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.29354207436399216},{&quot;lrRecall&quot;:0.9646017699115044,&quot;lrPrecision&quot;:0.30532212885154064,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.29296875},{&quot;lrRecall&quot;:0.9646017699115044,&quot;lrPrecision&quot;:0.3048951048951049,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.2920181700194679},{&quot;lrRecall&quot;:0.9646017699115044,&quot;lrPrecision&quot;:0.30446927374301674,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.2916396629941672},{&quot;lrRecall&quot;:0.9646017699115044,&quot;lrPrecision&quot;:0.30383275261324044,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.2897617514488088},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.3036831132731063,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.2892030848329049},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.3020041465100207,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.2888318356867779},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.30158730158730157,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.28753993610223644},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.3007570543702684,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.2871729419272495},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.29993136582017843,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.2864417568427753},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.2997256515775034,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.2857142857142857},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.2991101984941821,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.28391167192429023},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.29890560875512995,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.28337531486146095},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.2987012987012987,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.28284098051539913},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.29849726775956287,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.2824858757062147},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.29768392370572205,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.2805486284289277},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.2972789115646258,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.28019925280199254},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.296875,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.2788104089219331},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.296673455532926,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.2786377708978328},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.296472184531886,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.2782931354359926},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.2956698240866035,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.27590435315757206},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.2954699121027721,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.27539779681762544},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.2948717948717949,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.27522935779816515},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.2946729602157788,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.2748930971288943},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.29368279569892475,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.27472527472527475},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.2930918846411804,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.2740560292326431},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.2928954423592493,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.273224043715847},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.2923076923076923,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.27239709443099275},{&quot;lrRecall&quot;:0.9668141592920354,&quot;lrPrecision&quot;:0.2911392405063291,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.2720677146311971},{&quot;lrRecall&quot;:0.9690265486725663,&quot;lrPrecision&quot;:0.29045092838196285,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.27141133896260555},{&quot;lrRecall&quot;:0.9690265486725663,&quot;lrPrecision&quot;:0.2891089108910891,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.27059530968129886},{&quot;lrRecall&quot;:0.9690265486725663,&quot;lrPrecision&quot;:0.28891820580474936,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.2702702702702703},{&quot;lrRecall&quot;:0.9690265486725663,&quot;lrPrecision&quot;:0.2887277521423863,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.27010804321728693},{&quot;lrRecall&quot;:0.9690265486725663,&quot;lrPrecision&quot;:0.28834759710335744,&quot;rfRecall&quot;:0.995575221238938,&quot;rfPrecision&quot;:0.2684964200477327},{&quot;lrRecall&quot;:0.9690265486725663,&quot;lrPrecision&quot;:0.28777923784494086,&quot;rfRecall&quot;:0.9977876106194691,&quot;rfPrecision&quot;:0.266548463356974},{&quot;lrRecall&quot;:0.9690265486725663,&quot;lrPrecision&quot;:0.2868369351669941,&quot;rfRecall&quot;:0.9977876106194691,&quot;rfPrecision&quot;:0.26467136150234744},{&quot;lrRecall&quot;:0.9690265486725663,&quot;lrPrecision&quot;:0.28627450980392155,&quot;rfRecall&quot;:0.9977876106194691,&quot;rfPrecision&quot;:0.2645161290322581},{&quot;lrRecall&quot;:0.9690265486725663,&quot;lrPrecision&quot;:0.2853420195439739,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2644821533060269},{&quot;lrRecall&quot;:0.9690265486725663,&quot;lrPrecision&quot;:0.2847854356306892,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.26417299824663937},{&quot;lrRecall&quot;:0.9690265486725663,&quot;lrPrecision&quot;:0.2827630729502905,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2637106184364061},{&quot;lrRecall&quot;:0.9690265486725663,&quot;lrPrecision&quot;:0.28167202572347266,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2629435718440954},{&quot;lrRecall&quot;:0.9690265486725663,&quot;lrPrecision&quot;:0.2813102119460501,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2627906976744186},{&quot;lrRecall&quot;:0.9690265486725663,&quot;lrPrecision&quot;:0.28076923076923077,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2620289855072464},{&quot;lrRecall&quot;:0.9690265486725663,&quot;lrPrecision&quot;:0.28040973111395645,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.26187717265353416},{&quot;lrRecall&quot;:0.9690265486725663,&quot;lrPrecision&quot;:0.2786259541984733,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2611207394569613},{&quot;lrRecall&quot;:0.9712389380530974,&quot;lrPrecision&quot;:0.2780240658644712,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2600690448791715},{&quot;lrRecall&quot;:0.9712389380530974,&quot;lrPrecision&quot;:0.2761006289308176,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2597701149425287},{&quot;lrRecall&quot;:0.9712389380530974,&quot;lrPrecision&quot;:0.27523510971786835,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.25902578796561604},{&quot;lrRecall&quot;:0.9712389380530974,&quot;lrPrecision&quot;:0.27471839799749687,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2584333905088622},{&quot;lrRecall&quot;:0.9712389380530974,&quot;lrPrecision&quot;:0.2728402734617775,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2581382067390063},{&quot;lrRecall&quot;:0.9712389380530974,&quot;lrPrecision&quot;:0.27250155183116076,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.25740318906605925},{&quot;lrRecall&quot;:0.9712389380530974,&quot;lrPrecision&quot;:0.27233250620347393,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.25464788732394367},{&quot;lrRecall&quot;:0.9712389380530974,&quot;lrPrecision&quot;:0.2716584158415842,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2540753232152895},{&quot;lrRecall&quot;:0.9756637168141593,&quot;lrPrecision&quot;:0.27105101413644744,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2520914668153932},{&quot;lrRecall&quot;:0.9756637168141593,&quot;lrPrecision&quot;:0.2703862660944206,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.25195094760312153},{&quot;lrRecall&quot;:0.9756637168141593,&quot;lrPrecision&quot;:0.269559902200489,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.25125069483046136},{&quot;lrRecall&quot;:0.9756637168141593,&quot;lrPrecision&quot;:0.2692307692307692,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2511111111111111},{&quot;lrRecall&quot;:0.9756637168141593,&quot;lrPrecision&quot;:0.2690665039658328,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2509716823986674},{&quot;lrRecall&quot;:0.9756637168141593,&quot;lrPrecision&quot;:0.26890243902439026,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.25083240843507215},{&quot;lrRecall&quot;:0.9756637168141593,&quot;lrPrecision&quot;:0.2680851063829787,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24767123287671233},{&quot;lrRecall&quot;:0.9756637168141593,&quot;lrPrecision&quot;:0.26792223572296475,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24712957900492072},{&quot;lrRecall&quot;:0.9756637168141593,&quot;lrPrecision&quot;:0.26582278481012656,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2468596395412343},{&quot;lrRecall&quot;:0.9800884955752213,&quot;lrPrecision&quot;:0.2641621943947525,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24672489082969432},{&quot;lrRecall&quot;:0.9800884955752213,&quot;lrPrecision&quot;:0.2636904761904762,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24659028914348063},{&quot;lrRecall&quot;:0.9800884955752213,&quot;lrPrecision&quot;:0.26306413301662707,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24605334784975502},{&quot;lrRecall&quot;:0.9800884955752213,&quot;lrPrecision&quot;:0.26182033096926716,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24551873981531777},{&quot;lrRecall&quot;:0.9800884955752213,&quot;lrPrecision&quot;:0.26166568222090963,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24458874458874458},{&quot;lrRecall&quot;:0.9823008849557522,&quot;lrPrecision&quot;:0.26071638285378745,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24445646295294754},{&quot;lrRecall&quot;:0.9823008849557522,&quot;lrPrecision&quot;:0.26041055718475076,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24392876416621695},{&quot;lrRecall&quot;:0.9823008849557522,&quot;lrPrecision&quot;:0.26025791324736225,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2432723358449946},{&quot;lrRecall&quot;:0.9823008849557522,&quot;lrPrecision&quot;:0.2598010532475132,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24314147391070468},{&quot;lrRecall&quot;:0.9845132743362832,&quot;lrPrecision&quot;:0.2594752186588921,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.24171122994652405},{&quot;lrRecall&quot;:0.9845132743362832,&quot;lrPrecision&quot;:0.2578215527230591,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2413240790176188},{&quot;lrRecall&quot;:0.9867256637168141,&quot;lrPrecision&quot;:0.25720876585928487,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2404255319148936},{&quot;lrRecall&quot;:0.9867256637168141,&quot;lrPrecision&quot;:0.25602755453501724,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2395336512983572},{&quot;lrRecall&quot;:0.9867256637168141,&quot;lrPrecision&quot;:0.2554410080183276,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23864836325237593},{&quot;lrRecall&quot;:0.9867256637168141,&quot;lrPrecision&quot;:0.2550028587764437,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23789473684210527},{&quot;lrRecall&quot;:0.9867256637168141,&quot;lrPrecision&quot;:0.2539863325740319,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23739495798319327},{&quot;lrRecall&quot;:0.9867256637168141,&quot;lrPrecision&quot;:0.25312145289443816,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23640167364016737},{&quot;lrRecall&quot;:0.9867256637168141,&quot;lrPrecision&quot;:0.252262443438914,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23566214807090718},{&quot;lrRecall&quot;:0.9867256637168141,&quot;lrPrecision&quot;:0.2519774011299435,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23529411764705882},{&quot;lrRecall&quot;:0.9867256637168141,&quot;lrPrecision&quot;:0.251551043429216,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23504940197607904},{&quot;lrRecall&quot;:0.9867256637168141,&quot;lrPrecision&quot;:0.25140924464487036,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2340756084930088},{&quot;lrRecall&quot;:0.9889380530973452,&quot;lrPrecision&quot;:0.25126475548060706,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2338334195550957},{&quot;lrRecall&quot;:0.9889380530973452,&quot;lrPrecision&quot;:0.25084175084175087,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23371251292657705},{&quot;lrRecall&quot;:0.9889380530973452,&quot;lrPrecision&quot;:0.2504201680672269,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23335054207537428},{&quot;lrRecall&quot;:0.9889380530973452,&quot;lrPrecision&quot;:0.24972067039106144,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23323013415892674},{&quot;lrRecall&quot;:0.9889380530973452,&quot;lrPrecision&quot;:0.24930284439486894,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2329896907216495},{&quot;lrRecall&quot;:0.9889380530973452,&quot;lrPrecision&quot;:0.2486095661846496,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2326299536798765},{&quot;lrRecall&quot;:0.9889380530973452,&quot;lrPrecision&quot;:0.24847137298499167,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2317948717948718},{&quot;lrRecall&quot;:0.9889380530973452,&quot;lrPrecision&quot;:0.24778270509977826,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23167606355715017},{&quot;lrRecall&quot;:0.9889380530973452,&quot;lrPrecision&quot;:0.2470978441127695,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23132036847492324},{&quot;lrRecall&quot;:0.9889380530973452,&quot;lrPrecision&quot;:0.24668874172185432,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23096576392437404},{&quot;lrRecall&quot;:0.9889380530973452,&quot;lrPrecision&quot;:0.2465526751241037,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23084780388151174},{&quot;lrRecall&quot;:0.9911504424778761,&quot;lrPrecision&quot;:0.2462891698735569,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.23025980641874683},{&quot;lrRecall&quot;:0.9911504424778761,&quot;lrPrecision&quot;:0.24601867105985722,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22944162436548224},{&quot;lrRecall&quot;:0.9933628318584071,&quot;lrPrecision&quot;:0.2462973121228744,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22897669706180346},{&quot;lrRecall&quot;:0.9933628318584071,&quot;lrPrecision&quot;:0.2461622807017544,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22770780856423173},{&quot;lrRecall&quot;:0.9933628318584071,&quot;lrPrecision&quot;:0.24602739726027398,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2271356783919598},{&quot;lrRecall&quot;:0.9933628318584071,&quot;lrPrecision&quot;:0.2450873362445415,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22690763052208834},{&quot;lrRecall&quot;:0.9933628318584071,&quot;lrPrecision&quot;:0.24442025040827436,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22622622622622623},{&quot;lrRecall&quot;:0.9933628318584071,&quot;lrPrecision&quot;:0.24349240780911063,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2254364089775561},{&quot;lrRecall&quot;:0.9933628318584071,&quot;lrPrecision&quot;:0.24322860238353197,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22498755599800896},{&quot;lrRecall&quot;:0.9933628318584071,&quot;lrPrecision&quot;:0.24309691391445587,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22431761786600496},{&quot;lrRecall&quot;:0.9933628318584071,&quot;lrPrecision&quot;:0.24217907227615965,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2240951908775409},{&quot;lrRecall&quot;:0.9933628318584071,&quot;lrPrecision&quot;:0.24178782983306407,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22266009852216748},{&quot;lrRecall&quot;:0.9933628318584071,&quot;lrPrecision&quot;:0.24113856068743286,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.2225504677498769},{&quot;lrRecall&quot;:0.9933628318584071,&quot;lrPrecision&quot;:0.24023542001070092,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22124326970141947},{&quot;lrRecall&quot;:0.9933628318584071,&quot;lrPrecision&quot;:0.2384492830589485,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22038030229156508},{&quot;lrRecall&quot;:0.9933628318584071,&quot;lrPrecision&quot;:0.23581932773109243,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.21825205214872043},{&quot;lrRecall&quot;:0.9933628318584071,&quot;lrPrecision&quot;:0.23544834819087573,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.21793635486981677}],&quot;genId&quot;:&quot;191315701&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/customC3Chart'], \n      function(playground, _magiccustomC3Chart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magiccustomC3Chart,\n    \"o\": {\"js\":\"var chartOptions = { data: { xs: {\\n                            'lrPrecision': 'lrRecall',\\n                            'rfPrecision': 'rfRecall',\\n                         }\\n                   },\\n                   axis: {\\n                      y: {\\n                        label: 'precision'\\n                      },\\n                      x: {\\n                         label: 'recall',\\n                         tick: {\\n                            count: 5\\n                         }\\n                      }\\n                   },\\n                   point: {\\n                        show: false\\n                   }\\n                  };\",\"headers\":[\"lrRecall\",\"lrPrecision\",\"rfRecall\",\"rfPrecision\"],\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon0d143ad25195c755259f926dca5a2f0d&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonfeedbb60e986fbebdc22ad497413805a&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 17
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "1DB5EE44335249928B897FF2D0C98977"
    },
    "cell_type" : "code",
    "source" : "CustomC3Chart(rocPoints,\n              \"\"\"{ data: { xs: {\n                            'lrTPR': 'lrFPR',\n                            'rfTPR': 'rfFPR',\n                         }\n                   },\n                   axis: {\n                      y: {\n                        label: 'TPR'\n                      },\n                      x: {\n                         label: 'FPR',\n                         tick: {\n                            count: 5\n                         }\n                      }\n                   },\n                   point: {\n                        show: false\n                   }\n                  }\"\"\")\n",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res28: notebook.front.widgets.CustomC3Chart[Array[ROCPoint]] = <CustomC3Chart widget>\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon15d2a03a083b85875a34ddc319bea5ca&quot;,&quot;dataInit&quot;:[{&quot;lrFPR&quot;:0.0,&quot;lrTPR&quot;:0.0022123893805309734,&quot;rfFPR&quot;:0.0,&quot;rfTPR&quot;:0.0022123893805309734},{&quot;lrFPR&quot;:0.0,&quot;lrTPR&quot;:0.004424778761061947,&quot;rfFPR&quot;:0.0,&quot;rfTPR&quot;:0.008849557522123894},{&quot;lrFPR&quot;:0.0006134969325153375,&quot;lrTPR&quot;:0.008849557522123894,&quot;rfFPR&quot;:0.0006134969325153375,&quot;rfTPR&quot;:0.03761061946902655},{&quot;lrFPR&quot;:0.0006134969325153375,&quot;lrTPR&quot;:0.015486725663716814,&quot;rfFPR&quot;:0.001226993865030675,&quot;rfTPR&quot;:0.05752212389380531},{&quot;lrFPR&quot;:0.0006134969325153375,&quot;lrTPR&quot;:0.02654867256637168,&quot;rfFPR&quot;:0.001226993865030675,&quot;rfTPR&quot;:0.06637168141592921},{&quot;lrFPR&quot;:0.001226993865030675,&quot;lrTPR&quot;:0.028761061946902654,&quot;rfFPR&quot;:0.00245398773006135,&quot;rfTPR&quot;:0.08185840707964602},{&quot;lrFPR&quot;:0.001226993865030675,&quot;lrTPR&quot;:0.030973451327433628,&quot;rfFPR&quot;:0.00245398773006135,&quot;rfTPR&quot;:0.08849557522123894},{&quot;lrFPR&quot;:0.001226993865030675,&quot;lrTPR&quot;:0.033185840707964605,&quot;rfFPR&quot;:0.00245398773006135,&quot;rfTPR&quot;:0.09292035398230089},{&quot;lrFPR&quot;:0.0018404907975460123,&quot;lrTPR&quot;:0.0420353982300885,&quot;rfFPR&quot;:0.00245398773006135,&quot;rfTPR&quot;:0.09955752212389381},{&quot;lrFPR&quot;:0.0018404907975460123,&quot;lrTPR&quot;:0.04424778761061947,&quot;rfFPR&quot;:0.00245398773006135,&quot;rfTPR&quot;:0.10398230088495575},{&quot;lrFPR&quot;:0.0018404907975460123,&quot;lrTPR&quot;:0.061946902654867256,&quot;rfFPR&quot;:0.003067484662576687,&quot;rfTPR&quot;:0.11061946902654868},{&quot;lrFPR&quot;:0.0018404907975460123,&quot;lrTPR&quot;:0.06637168141592921,&quot;rfFPR&quot;:0.004294478527607362,&quot;rfTPR&quot;:0.11061946902654868},{&quot;lrFPR&quot;:0.00245398773006135,&quot;lrTPR&quot;:0.084070796460177,&quot;rfFPR&quot;:0.004294478527607362,&quot;rfTPR&quot;:0.12831858407079647},{&quot;lrFPR&quot;:0.00245398773006135,&quot;lrTPR&quot;:0.08849557522123894,&quot;rfFPR&quot;:0.0049079754601227,&quot;rfTPR&quot;:0.13053097345132744},{&quot;lrFPR&quot;:0.00245398773006135,&quot;lrTPR&quot;:0.09292035398230089,&quot;rfFPR&quot;:0.0049079754601227,&quot;rfTPR&quot;:0.13274336283185842},{&quot;lrFPR&quot;:0.00245398773006135,&quot;lrTPR&quot;:0.09734513274336283,&quot;rfFPR&quot;:0.005521472392638037,&quot;rfTPR&quot;:0.13274336283185842},{&quot;lrFPR&quot;:0.003067484662576687,&quot;lrTPR&quot;:0.09955752212389381,&quot;rfFPR&quot;:0.005521472392638037,&quot;rfTPR&quot;:0.13495575221238937},{&quot;lrFPR&quot;:0.004294478527607362,&quot;lrTPR&quot;:0.1172566371681416,&quot;rfFPR&quot;:0.005521472392638037,&quot;rfTPR&quot;:0.13716814159292035},{&quot;lrFPR&quot;:0.0049079754601227,&quot;lrTPR&quot;:0.11946902654867257,&quot;rfFPR&quot;:0.005521472392638037,&quot;rfTPR&quot;:0.13938053097345132},{&quot;lrFPR&quot;:0.007361963190184049,&quot;lrTPR&quot;:0.12831858407079647,&quot;rfFPR&quot;:0.006134969325153374,&quot;rfTPR&quot;:0.13938053097345132},{&quot;lrFPR&quot;:0.007361963190184049,&quot;lrTPR&quot;:0.13053097345132744,&quot;rfFPR&quot;:0.006134969325153374,&quot;rfTPR&quot;:0.14380530973451328},{&quot;lrFPR&quot;:0.007975460122699387,&quot;lrTPR&quot;:0.13716814159292035,&quot;rfFPR&quot;:0.006134969325153374,&quot;rfTPR&quot;:0.14823008849557523},{&quot;lrFPR&quot;:0.007975460122699387,&quot;lrTPR&quot;:0.14380530973451328,&quot;rfFPR&quot;:0.006748466257668712,&quot;rfTPR&quot;:0.15265486725663716},{&quot;lrFPR&quot;:0.007975460122699387,&quot;lrTPR&quot;:0.1504424778761062,&quot;rfFPR&quot;:0.006748466257668712,&quot;rfTPR&quot;:0.15486725663716813},{&quot;lrFPR&quot;:0.008588957055214725,&quot;lrTPR&quot;:0.15265486725663716,&quot;rfFPR&quot;:0.007361963190184049,&quot;rfTPR&quot;:0.16371681415929204},{&quot;lrFPR&quot;:0.010429447852760737,&quot;lrTPR&quot;:0.15265486725663716,&quot;rfFPR&quot;:0.007361963190184049,&quot;rfTPR&quot;:0.168141592920354},{&quot;lrFPR&quot;:0.015337423312883436,&quot;lrTPR&quot;:0.2013274336283186,&quot;rfFPR&quot;:0.008588957055214725,&quot;rfTPR&quot;:0.18141592920353983},{&quot;lrFPR&quot;:0.015337423312883436,&quot;lrTPR&quot;:0.2079646017699115,&quot;rfFPR&quot;:0.008588957055214725,&quot;rfTPR&quot;:0.18584070796460178},{&quot;lrFPR&quot;:0.015337423312883436,&quot;lrTPR&quot;:0.21238938053097345,&quot;rfFPR&quot;:0.0098159509202454,&quot;rfTPR&quot;:0.19911504424778761},{&quot;lrFPR&quot;:0.015337423312883436,&quot;lrTPR&quot;:0.21460176991150443,&quot;rfFPR&quot;:0.0098159509202454,&quot;rfTPR&quot;:0.20353982300884957},{&quot;lrFPR&quot;:0.015950920245398775,&quot;lrTPR&quot;:0.22123893805309736,&quot;rfFPR&quot;:0.0098159509202454,&quot;rfTPR&quot;:0.21017699115044247},{&quot;lrFPR&quot;:0.015950920245398775,&quot;lrTPR&quot;:0.22566371681415928,&quot;rfFPR&quot;:0.010429447852760737,&quot;rfTPR&quot;:0.21238938053097345},{&quot;lrFPR&quot;:0.016564417177914112,&quot;lrTPR&quot;:0.2323008849557522,&quot;rfFPR&quot;:0.010429447852760737,&quot;rfTPR&quot;:0.2168141592920354},{&quot;lrFPR&quot;:0.01717791411042945,&quot;lrTPR&quot;:0.2323008849557522,&quot;rfFPR&quot;:0.011656441717791411,&quot;rfTPR&quot;:0.22787610619469026},{&quot;lrFPR&quot;:0.02147239263803681,&quot;lrTPR&quot;:0.26991150442477874,&quot;rfFPR&quot;:0.011656441717791411,&quot;rfTPR&quot;:0.23672566371681417},{&quot;lrFPR&quot;:0.022085889570552148,&quot;lrTPR&quot;:0.26991150442477874,&quot;rfFPR&quot;:0.011656441717791411,&quot;rfTPR&quot;:0.24336283185840707},{&quot;lrFPR&quot;:0.02392638036809816,&quot;lrTPR&quot;:0.2831858407079646,&quot;rfFPR&quot;:0.013496932515337423,&quot;rfTPR&quot;:0.252212389380531},{&quot;lrFPR&quot;:0.02392638036809816,&quot;lrTPR&quot;:0.2853982300884956,&quot;rfFPR&quot;:0.01411042944785276,&quot;rfTPR&quot;:0.26327433628318586},{&quot;lrFPR&quot;:0.025766871165644172,&quot;lrTPR&quot;:0.29867256637168144,&quot;rfFPR&quot;:0.01411042944785276,&quot;rfTPR&quot;:0.26548672566371684},{&quot;lrFPR&quot;:0.02638036809815951,&quot;lrTPR&quot;:0.29867256637168144,&quot;rfFPR&quot;:0.015950920245398775,&quot;rfTPR&quot;:0.2721238938053097},{&quot;lrFPR&quot;:0.027607361963190184,&quot;lrTPR&quot;:0.3053097345132743,&quot;rfFPR&quot;:0.016564417177914112,&quot;rfTPR&quot;:0.27654867256637167},{&quot;lrFPR&quot;:0.027607361963190184,&quot;lrTPR&quot;:0.3075221238938053,&quot;rfFPR&quot;:0.017791411042944787,&quot;rfTPR&quot;:0.2809734513274336},{&quot;lrFPR&quot;:0.02883435582822086,&quot;lrTPR&quot;:0.3163716814159292,&quot;rfFPR&quot;:0.018404907975460124,&quot;rfTPR&quot;:0.2853982300884956},{&quot;lrFPR&quot;:0.02883435582822086,&quot;lrTPR&quot;:0.3185840707964602,&quot;rfFPR&quot;:0.0196319018404908,&quot;rfTPR&quot;:0.2920353982300885},{&quot;lrFPR&quot;:0.03067484662576687,&quot;lrTPR&quot;:0.33185840707964603,&quot;rfFPR&quot;:0.020245398773006136,&quot;rfTPR&quot;:0.3053097345132743},{&quot;lrFPR&quot;:0.03067484662576687,&quot;lrTPR&quot;:0.3407079646017699,&quot;rfFPR&quot;:0.020245398773006136,&quot;rfTPR&quot;:0.3075221238938053},{&quot;lrFPR&quot;:0.03128834355828221,&quot;lrTPR&quot;:0.34513274336283184,&quot;rfFPR&quot;:0.020858895705521473,&quot;rfTPR&quot;:0.3163716814159292},{&quot;lrFPR&quot;:0.03128834355828221,&quot;lrTPR&quot;:0.3495575221238938,&quot;rfFPR&quot;:0.020858895705521473,&quot;rfTPR&quot;:0.3185840707964602},{&quot;lrFPR&quot;:0.03251533742331288,&quot;lrTPR&quot;:0.3606194690265487,&quot;rfFPR&quot;:0.02147239263803681,&quot;rfTPR&quot;:0.3185840707964602},{&quot;lrFPR&quot;:0.03251533742331288,&quot;lrTPR&quot;:0.36504424778761063,&quot;rfFPR&quot;:0.02392638036809816,&quot;rfTPR&quot;:0.336283185840708},{&quot;lrFPR&quot;:0.03496932515337423,&quot;lrTPR&quot;:0.37831858407079644,&quot;rfFPR&quot;:0.02392638036809816,&quot;rfTPR&quot;:0.33849557522123896},{&quot;lrFPR&quot;:0.03680981595092025,&quot;lrTPR&quot;:0.38495575221238937,&quot;rfFPR&quot;:0.02392638036809816,&quot;rfTPR&quot;:0.3407079646017699},{&quot;lrFPR&quot;:0.03865030674846626,&quot;lrTPR&quot;:0.38495575221238937,&quot;rfFPR&quot;:0.025766871165644172,&quot;rfTPR&quot;:0.35398230088495575},{&quot;lrFPR&quot;:0.03987730061349693,&quot;lrTPR&quot;:0.3893805309734513,&quot;rfFPR&quot;:0.025766871165644172,&quot;rfTPR&quot;:0.3584070796460177},{&quot;lrFPR&quot;:0.04171779141104295,&quot;lrTPR&quot;:0.3938053097345133,&quot;rfFPR&quot;:0.025766871165644172,&quot;rfTPR&quot;:0.36283185840707965},{&quot;lrFPR&quot;:0.04233128834355828,&quot;lrTPR&quot;:0.4026548672566372,&quot;rfFPR&quot;:0.02638036809815951,&quot;rfTPR&quot;:0.36283185840707965},{&quot;lrFPR&quot;:0.04294478527607362,&quot;lrTPR&quot;:0.4026548672566372,&quot;rfFPR&quot;:0.026993865030674847,&quot;rfTPR&quot;:0.36504424778761063},{&quot;lrFPR&quot;:0.044171779141104296,&quot;lrTPR&quot;:0.4092920353982301,&quot;rfFPR&quot;:0.02822085889570552,&quot;rfTPR&quot;:0.37610619469026546},{&quot;lrFPR&quot;:0.04478527607361963,&quot;lrTPR&quot;:0.413716814159292,&quot;rfFPR&quot;:0.02822085889570552,&quot;rfTPR&quot;:0.3805309734513274},{&quot;lrFPR&quot;:0.04539877300613497,&quot;lrTPR&quot;:0.413716814159292,&quot;rfFPR&quot;:0.02822085889570552,&quot;rfTPR&quot;:0.38495575221238937},{&quot;lrFPR&quot;:0.046012269938650305,&quot;lrTPR&quot;:0.42035398230088494,&quot;rfFPR&quot;:0.029447852760736196,&quot;rfTPR&quot;:0.3893805309734513},{&quot;lrFPR&quot;:0.046625766871165646,&quot;lrTPR&quot;:0.4247787610619469,&quot;rfFPR&quot;:0.03067484662576687,&quot;rfTPR&quot;:0.39601769911504425},{&quot;lrFPR&quot;:0.048466257668711654,&quot;lrTPR&quot;:0.4314159292035398,&quot;rfFPR&quot;:0.03251533742331288,&quot;rfTPR&quot;:0.4004424778761062},{&quot;lrFPR&quot;:0.049079754601226995,&quot;lrTPR&quot;:0.4358407079646018,&quot;rfFPR&quot;:0.03374233128834356,&quot;rfTPR&quot;:0.4092920353982301},{&quot;lrFPR&quot;:0.04969325153374233,&quot;lrTPR&quot;:0.45132743362831856,&quot;rfFPR&quot;:0.03558282208588957,&quot;rfTPR&quot;:0.413716814159292},{&quot;lrFPR&quot;:0.051533742331288344,&quot;lrTPR&quot;:0.4646017699115044,&quot;rfFPR&quot;:0.03680981595092025,&quot;rfTPR&quot;:0.413716814159292},{&quot;lrFPR&quot;:0.053987730061349694,&quot;lrTPR&quot;:0.4690265486725664,&quot;rfFPR&quot;:0.03742331288343558,&quot;rfTPR&quot;:0.41814159292035397},{&quot;lrFPR&quot;:0.053987730061349694,&quot;lrTPR&quot;:0.48008849557522126,&quot;rfFPR&quot;:0.03742331288343558,&quot;rfTPR&quot;:0.42035398230088494},{&quot;lrFPR&quot;:0.0558282208588957,&quot;lrTPR&quot;:0.4889380530973451,&quot;rfFPR&quot;:0.03803680981595092,&quot;rfTPR&quot;:0.4225663716814159},{&quot;lrFPR&quot;:0.05644171779141104,&quot;lrTPR&quot;:0.49336283185840707,&quot;rfFPR&quot;:0.03865030674846626,&quot;rfTPR&quot;:0.4247787610619469},{&quot;lrFPR&quot;:0.05828220858895705,&quot;lrTPR&quot;:0.49336283185840707,&quot;rfFPR&quot;:0.0392638036809816,&quot;rfTPR&quot;:0.4314159292035398},{&quot;lrFPR&quot;:0.05889570552147239,&quot;lrTPR&quot;:0.5,&quot;rfFPR&quot;:0.0392638036809816,&quot;rfTPR&quot;:0.4336283185840708},{&quot;lrFPR&quot;:0.05950920245398773,&quot;lrTPR&quot;:0.504424778761062,&quot;rfFPR&quot;:0.0392638036809816,&quot;rfTPR&quot;:0.4358407079646018},{&quot;lrFPR&quot;:0.06012269938650307,&quot;lrTPR&quot;:0.5199115044247787,&quot;rfFPR&quot;:0.04171779141104295,&quot;rfTPR&quot;:0.44026548672566373},{&quot;lrFPR&quot;:0.0638036809815951,&quot;lrTPR&quot;:0.5331858407079646,&quot;rfFPR&quot;:0.04233128834355828,&quot;rfTPR&quot;:0.4446902654867257},{&quot;lrFPR&quot;:0.06441717791411043,&quot;lrTPR&quot;:0.5331858407079646,&quot;rfFPR&quot;:0.04294478527607362,&quot;rfTPR&quot;:0.4469026548672566},{&quot;lrFPR&quot;:0.06993865030674846,&quot;lrTPR&quot;:0.5398230088495575,&quot;rfFPR&quot;:0.04785276073619632,&quot;rfTPR&quot;:0.4668141592920354},{&quot;lrFPR&quot;:0.07423312883435583,&quot;lrTPR&quot;:0.5486725663716814,&quot;rfFPR&quot;:0.048466257668711654,&quot;rfTPR&quot;:0.48008849557522126},{&quot;lrFPR&quot;:0.0785276073619632,&quot;lrTPR&quot;:0.5730088495575221,&quot;rfFPR&quot;:0.049079754601226995,&quot;rfTPR&quot;:0.48451327433628316},{&quot;lrFPR&quot;:0.07914110429447853,&quot;lrTPR&quot;:0.577433628318584,&quot;rfFPR&quot;:0.050920245398773004,&quot;rfTPR&quot;:0.4911504424778761},{&quot;lrFPR&quot;:0.0803680981595092,&quot;lrTPR&quot;:0.588495575221239,&quot;rfFPR&quot;:0.051533742331288344,&quot;rfTPR&quot;:0.49336283185840707},{&quot;lrFPR&quot;:0.08282208588957055,&quot;lrTPR&quot;:0.5973451327433629,&quot;rfFPR&quot;:0.05214723926380368,&quot;rfTPR&quot;:0.49557522123893805},{&quot;lrFPR&quot;:0.08282208588957055,&quot;lrTPR&quot;:0.5995575221238938,&quot;rfFPR&quot;:0.05276073619631902,&quot;rfTPR&quot;:0.497787610619469},{&quot;lrFPR&quot;:0.0834355828220859,&quot;lrTPR&quot;:0.6017699115044248,&quot;rfFPR&quot;:0.05521472392638037,&quot;rfTPR&quot;:0.504424778761062},{&quot;lrFPR&quot;:0.08466257668711656,&quot;lrTPR&quot;:0.6061946902654868,&quot;rfFPR&quot;:0.05766871165644172,&quot;rfTPR&quot;:0.5154867256637168},{&quot;lrFPR&quot;:0.0852760736196319,&quot;lrTPR&quot;:0.6061946902654868,&quot;rfFPR&quot;:0.05828220858895705,&quot;rfTPR&quot;:0.5154867256637168},{&quot;lrFPR&quot;:0.08957055214723926,&quot;lrTPR&quot;:0.6261061946902655,&quot;rfFPR&quot;:0.05889570552147239,&quot;rfTPR&quot;:0.5176991150442478},{&quot;lrFPR&quot;:0.09202453987730061,&quot;lrTPR&quot;:0.6327433628318584,&quot;rfFPR&quot;:0.05950920245398773,&quot;rfTPR&quot;:0.5199115044247787},{&quot;lrFPR&quot;:0.0950920245398773,&quot;lrTPR&quot;:0.6438053097345132,&quot;rfFPR&quot;:0.06073619631901841,&quot;rfTPR&quot;:0.5265486725663717},{&quot;lrFPR&quot;:0.09631901840490797,&quot;lrTPR&quot;:0.6460176991150443,&quot;rfFPR&quot;:0.06196319018404908,&quot;rfTPR&quot;:0.5353982300884956},{&quot;lrFPR&quot;:0.1,&quot;lrTPR&quot;:0.6504424778761062,&quot;rfFPR&quot;:0.06503067484662577,&quot;rfTPR&quot;:0.5464601769911505},{&quot;lrFPR&quot;:0.10122699386503067,&quot;lrTPR&quot;:0.6504424778761062,&quot;rfFPR&quot;:0.0656441717791411,&quot;rfTPR&quot;:0.5464601769911505},{&quot;lrFPR&quot;:0.10122699386503067,&quot;lrTPR&quot;:0.6570796460176991,&quot;rfFPR&quot;:0.0656441717791411,&quot;rfTPR&quot;:0.5486725663716814},{&quot;lrFPR&quot;:0.1098159509202454,&quot;lrTPR&quot;:0.6792035398230089,&quot;rfFPR&quot;:0.0656441717791411,&quot;rfTPR&quot;:0.5508849557522124},{&quot;lrFPR&quot;:0.11349693251533742,&quot;lrTPR&quot;:0.6792035398230089,&quot;rfFPR&quot;:0.06748466257668712,&quot;rfTPR&quot;:0.5530973451327433},{&quot;lrFPR&quot;:0.1147239263803681,&quot;lrTPR&quot;:0.6792035398230089,&quot;rfFPR&quot;:0.0687116564417178,&quot;rfTPR&quot;:0.5641592920353983},{&quot;lrFPR&quot;:0.11779141104294479,&quot;lrTPR&quot;:0.6880530973451328,&quot;rfFPR&quot;:0.07177914110429448,&quot;rfTPR&quot;:0.5707964601769911},{&quot;lrFPR&quot;:0.12208588957055215,&quot;lrTPR&quot;:0.6946902654867256,&quot;rfFPR&quot;:0.07239263803680981,&quot;rfTPR&quot;:0.577433628318584},{&quot;lrFPR&quot;:0.12699386503067484,&quot;lrTPR&quot;:0.6991150442477876,&quot;rfFPR&quot;:0.0736196319018405,&quot;rfTPR&quot;:0.581858407079646},{&quot;lrFPR&quot;:0.1276073619631902,&quot;lrTPR&quot;:0.6991150442477876,&quot;rfFPR&quot;:0.07484662576687116,&quot;rfTPR&quot;:0.584070796460177},{&quot;lrFPR&quot;:0.12883435582822086,&quot;lrTPR&quot;:0.6991150442477876,&quot;rfFPR&quot;:0.07607361963190185,&quot;rfTPR&quot;:0.5862831858407079},{&quot;lrFPR&quot;:0.12883435582822086,&quot;lrTPR&quot;:0.7013274336283186,&quot;rfFPR&quot;:0.07730061349693251,&quot;rfTPR&quot;:0.588495575221239},{&quot;lrFPR&quot;:0.13190184049079753,&quot;lrTPR&quot;:0.7057522123893806,&quot;rfFPR&quot;:0.08098159509202454,&quot;rfTPR&quot;:0.6017699115044248},{&quot;lrFPR&quot;:0.1325153374233129,&quot;lrTPR&quot;:0.7079646017699115,&quot;rfFPR&quot;:0.08220858895705521,&quot;rfTPR&quot;:0.6084070796460177},{&quot;lrFPR&quot;:0.13558282208588956,&quot;lrTPR&quot;:0.7101769911504425,&quot;rfFPR&quot;:0.08220858895705521,&quot;rfTPR&quot;:0.6106194690265486},{&quot;lrFPR&quot;:0.1361963190184049,&quot;lrTPR&quot;:0.7123893805309734,&quot;rfFPR&quot;:0.08282208588957055,&quot;rfTPR&quot;:0.6106194690265486},{&quot;lrFPR&quot;:0.13865030674846626,&quot;lrTPR&quot;:0.7168141592920354,&quot;rfFPR&quot;:0.0834355828220859,&quot;rfTPR&quot;:0.6150442477876106},{&quot;lrFPR&quot;:0.1392638036809816,&quot;lrTPR&quot;:0.7168141592920354,&quot;rfFPR&quot;:0.0852760736196319,&quot;rfTPR&quot;:0.6238938053097345},{&quot;lrFPR&quot;:0.13987730061349693,&quot;lrTPR&quot;:0.7168141592920354,&quot;rfFPR&quot;:0.08711656441717791,&quot;rfTPR&quot;:0.6261061946902655},{&quot;lrFPR&quot;:0.14049079754601226,&quot;lrTPR&quot;:0.7234513274336283,&quot;rfFPR&quot;:0.08834355828220859,&quot;rfTPR&quot;:0.6305309734513275},{&quot;lrFPR&quot;:0.1423312883435583,&quot;lrTPR&quot;:0.7234513274336283,&quot;rfFPR&quot;:0.08895705521472393,&quot;rfTPR&quot;:0.6327433628318584},{&quot;lrFPR&quot;:0.1441717791411043,&quot;lrTPR&quot;:0.7256637168141593,&quot;rfFPR&quot;:0.09018404907975461,&quot;rfTPR&quot;:0.6349557522123894},{&quot;lrFPR&quot;:0.14478527607361963,&quot;lrTPR&quot;:0.7323008849557522,&quot;rfFPR&quot;:0.09386503067484663,&quot;rfTPR&quot;:0.6415929203539823},{&quot;lrFPR&quot;:0.14662576687116563,&quot;lrTPR&quot;:0.7345132743362832,&quot;rfFPR&quot;:0.10061349693251534,&quot;rfTPR&quot;:0.6570796460176991},{&quot;lrFPR&quot;:0.147239263803681,&quot;lrTPR&quot;:0.7345132743362832,&quot;rfFPR&quot;:0.10429447852760736,&quot;rfTPR&quot;:0.6592920353982301},{&quot;lrFPR&quot;:0.14846625766871166,&quot;lrTPR&quot;:0.7345132743362832,&quot;rfFPR&quot;:0.11042944785276074,&quot;rfTPR&quot;:0.6703539823008849},{&quot;lrFPR&quot;:0.15950920245398773,&quot;lrTPR&quot;:0.75,&quot;rfFPR&quot;:0.11104294478527607,&quot;rfTPR&quot;:0.6703539823008849},{&quot;lrFPR&quot;:0.15950920245398773,&quot;lrTPR&quot;:0.754424778761062,&quot;rfFPR&quot;:0.11104294478527607,&quot;rfTPR&quot;:0.672566371681416},{&quot;lrFPR&quot;:0.1619631901840491,&quot;lrTPR&quot;:0.7632743362831859,&quot;rfFPR&quot;:0.1116564417177914,&quot;rfTPR&quot;:0.672566371681416},{&quot;lrFPR&quot;:0.16319018404907976,&quot;lrTPR&quot;:0.7632743362831859,&quot;rfFPR&quot;:0.11349693251533742,&quot;rfTPR&quot;:0.6814159292035398},{&quot;lrFPR&quot;:0.16625766871165645,&quot;lrTPR&quot;:0.7676991150442478,&quot;rfFPR&quot;:0.1165644171779141,&quot;rfTPR&quot;:0.6836283185840708},{&quot;lrFPR&quot;:0.1668711656441718,&quot;lrTPR&quot;:0.7676991150442478,&quot;rfFPR&quot;:0.11717791411042945,&quot;rfTPR&quot;:0.6880530973451328},{&quot;lrFPR&quot;:0.16748466257668712,&quot;lrTPR&quot;:0.7721238938053098,&quot;rfFPR&quot;:0.1196319018404908,&quot;rfTPR&quot;:0.6924778761061947},{&quot;lrFPR&quot;:0.1687116564417178,&quot;lrTPR&quot;:0.7721238938053098,&quot;rfFPR&quot;:0.1196319018404908,&quot;rfTPR&quot;:0.6946902654867256},{&quot;lrFPR&quot;:0.16993865030674846,&quot;lrTPR&quot;:0.7721238938053098,&quot;rfFPR&quot;:0.12208588957055215,&quot;rfTPR&quot;:0.7057522123893806},{&quot;lrFPR&quot;:0.1736196319018405,&quot;lrTPR&quot;:0.7743362831858407,&quot;rfFPR&quot;:0.12208588957055215,&quot;rfTPR&quot;:0.7101769911504425},{&quot;lrFPR&quot;:0.1754601226993865,&quot;lrTPR&quot;:0.7765486725663717,&quot;rfFPR&quot;:0.12208588957055215,&quot;rfTPR&quot;:0.7123893805309734},{&quot;lrFPR&quot;:0.17730061349693252,&quot;lrTPR&quot;:0.7853982300884956,&quot;rfFPR&quot;:0.1263803680981595,&quot;rfTPR&quot;:0.7190265486725663},{&quot;lrFPR&quot;:0.17791411042944785,&quot;lrTPR&quot;:0.7853982300884956,&quot;rfFPR&quot;:0.13067484662576687,&quot;rfTPR&quot;:0.7256637168141593},{&quot;lrFPR&quot;:0.18098159509202455,&quot;lrTPR&quot;:0.7876106194690266,&quot;rfFPR&quot;:0.13312883435582823,&quot;rfTPR&quot;:0.7278761061946902},{&quot;lrFPR&quot;:0.18404907975460122,&quot;lrTPR&quot;:0.7876106194690266,&quot;rfFPR&quot;:0.13374233128834356,&quot;rfTPR&quot;:0.7300884955752213},{&quot;lrFPR&quot;:0.18711656441717792,&quot;lrTPR&quot;:0.7964601769911505,&quot;rfFPR&quot;:0.1374233128834356,&quot;rfTPR&quot;:0.7367256637168141},{&quot;lrFPR&quot;:0.1901840490797546,&quot;lrTPR&quot;:0.7986725663716814,&quot;rfFPR&quot;:0.14294478527607363,&quot;rfTPR&quot;:0.745575221238938},{&quot;lrFPR&quot;:0.19141104294478528,&quot;lrTPR&quot;:0.7986725663716814,&quot;rfFPR&quot;:0.1441717791411043,&quot;rfTPR&quot;:0.745575221238938},{&quot;lrFPR&quot;:0.19141104294478528,&quot;lrTPR&quot;:0.8008849557522124,&quot;rfFPR&quot;:0.14478527607361963,&quot;rfTPR&quot;:0.7522123893805309},{&quot;lrFPR&quot;:0.19325153374233128,&quot;lrTPR&quot;:0.8053097345132744,&quot;rfFPR&quot;:0.14478527607361963,&quot;rfTPR&quot;:0.754424778761062},{&quot;lrFPR&quot;:0.19447852760736195,&quot;lrTPR&quot;:0.8053097345132744,&quot;rfFPR&quot;:0.14662576687116563,&quot;rfTPR&quot;:0.754424778761062},{&quot;lrFPR&quot;:0.20122699386503068,&quot;lrTPR&quot;:0.8119469026548672,&quot;rfFPR&quot;:0.149079754601227,&quot;rfTPR&quot;:0.7566371681415929},{&quot;lrFPR&quot;:0.20552147239263804,&quot;lrTPR&quot;:0.8119469026548672,&quot;rfFPR&quot;:0.15337423312883436,&quot;rfTPR&quot;:0.7654867256637168},{&quot;lrFPR&quot;:0.2147239263803681,&quot;lrTPR&quot;:0.8163716814159292,&quot;rfFPR&quot;:0.15644171779141106,&quot;rfTPR&quot;:0.7765486725663717},{&quot;lrFPR&quot;:0.21533742331288344,&quot;lrTPR&quot;:0.8163716814159292,&quot;rfFPR&quot;:0.1570552147239264,&quot;rfTPR&quot;:0.7765486725663717},{&quot;lrFPR&quot;:0.2196319018404908,&quot;lrTPR&quot;:0.8163716814159292,&quot;rfFPR&quot;:0.15828220858895706,&quot;rfTPR&quot;:0.7853982300884956},{&quot;lrFPR&quot;:0.22024539877300614,&quot;lrTPR&quot;:0.8185840707964602,&quot;rfFPR&quot;:0.1588957055214724,&quot;rfTPR&quot;:0.7876106194690266},{&quot;lrFPR&quot;:0.22269938650306748,&quot;lrTPR&quot;:0.8252212389380531,&quot;rfFPR&quot;:0.16012269938650306,&quot;rfTPR&quot;:0.7898230088495575},{&quot;lrFPR&quot;:0.2263803680981595,&quot;lrTPR&quot;:0.8252212389380531,&quot;rfFPR&quot;:0.16625766871165645,&quot;rfTPR&quot;:0.7964601769911505},{&quot;lrFPR&quot;:0.22699386503067484,&quot;lrTPR&quot;:0.8252212389380531,&quot;rfFPR&quot;:0.1705521472392638,&quot;rfTPR&quot;:0.7986725663716814},{&quot;lrFPR&quot;:0.2312883435582822,&quot;lrTPR&quot;:0.8252212389380531,&quot;rfFPR&quot;:0.1736196319018405,&quot;rfTPR&quot;:0.8030973451327433},{&quot;lrFPR&quot;:0.23374233128834357,&quot;lrTPR&quot;:0.8252212389380531,&quot;rfFPR&quot;:0.17668711656441718,&quot;rfTPR&quot;:0.8141592920353983},{&quot;lrFPR&quot;:0.23803680981595093,&quot;lrTPR&quot;:0.827433628318584,&quot;rfFPR&quot;:0.18036809815950922,&quot;rfTPR&quot;:0.8252212389380531},{&quot;lrFPR&quot;:0.24294478527607363,&quot;lrTPR&quot;:0.834070796460177,&quot;rfFPR&quot;:0.18220858895705522,&quot;rfTPR&quot;:0.827433628318584},{&quot;lrFPR&quot;:0.2460122699386503,&quot;lrTPR&quot;:0.834070796460177,&quot;rfFPR&quot;:0.18773006134969325,&quot;rfTPR&quot;:0.8407079646017699},{&quot;lrFPR&quot;:0.2558282208588957,&quot;lrTPR&quot;:0.834070796460177,&quot;rfFPR&quot;:0.19079754601226995,&quot;rfTPR&quot;:0.8473451327433629},{&quot;lrFPR&quot;:0.26196319018404907,&quot;lrTPR&quot;:0.834070796460177,&quot;rfFPR&quot;:0.19202453987730062,&quot;rfTPR&quot;:0.8495575221238938},{&quot;lrFPR&quot;:0.2625766871165644,&quot;lrTPR&quot;:0.834070796460177,&quot;rfFPR&quot;:0.19693251533742331,&quot;rfTPR&quot;:0.8517699115044248},{&quot;lrFPR&quot;:0.26319018404907973,&quot;lrTPR&quot;:0.838495575221239,&quot;rfFPR&quot;:0.19815950920245398,&quot;rfTPR&quot;:0.8539823008849557},{&quot;lrFPR&quot;:0.26380368098159507,&quot;lrTPR&quot;:0.838495575221239,&quot;rfFPR&quot;:0.2,&quot;rfTPR&quot;:0.8539823008849557},{&quot;lrFPR&quot;:0.26993865030674846,&quot;lrTPR&quot;:0.8429203539823009,&quot;rfFPR&quot;:0.20061349693251534,&quot;rfTPR&quot;:0.8561946902654868},{&quot;lrFPR&quot;:0.2705521472392638,&quot;lrTPR&quot;:0.8429203539823009,&quot;rfFPR&quot;:0.20122699386503068,&quot;rfTPR&quot;:0.8561946902654868},{&quot;lrFPR&quot;:0.27116564417177913,&quot;lrTPR&quot;:0.8429203539823009,&quot;rfFPR&quot;:0.2049079754601227,&quot;rfTPR&quot;:0.8561946902654868},{&quot;lrFPR&quot;:0.27975460122699386,&quot;lrTPR&quot;:0.8451327433628318,&quot;rfFPR&quot;:0.20552147239263804,&quot;rfTPR&quot;:0.8584070796460177},{&quot;lrFPR&quot;:0.2809815950920245,&quot;lrTPR&quot;:0.8451327433628318,&quot;rfFPR&quot;:0.2085889570552147,&quot;rfTPR&quot;:0.8606194690265486},{&quot;lrFPR&quot;:0.2907975460122699,&quot;lrTPR&quot;:0.8561946902654868,&quot;rfFPR&quot;:0.2116564417177914,&quot;rfTPR&quot;:0.8606194690265486},{&quot;lrFPR&quot;:0.2926380368098159,&quot;lrTPR&quot;:0.8606194690265486,&quot;rfFPR&quot;:0.21717791411042944,&quot;rfTPR&quot;:0.8672566371681416},{&quot;lrFPR&quot;:0.296319018404908,&quot;lrTPR&quot;:0.8650442477876106,&quot;rfFPR&quot;:0.2184049079754601,&quot;rfTPR&quot;:0.8672566371681416},{&quot;lrFPR&quot;:0.29938650306748466,&quot;lrTPR&quot;:0.8672566371681416,&quot;rfFPR&quot;:0.22208588957055214,&quot;rfTPR&quot;:0.8672566371681416},{&quot;lrFPR&quot;:0.3,&quot;lrTPR&quot;:0.8694690265486725,&quot;rfFPR&quot;:0.2263803680981595,&quot;rfTPR&quot;:0.8672566371681416},{&quot;lrFPR&quot;:0.30122699386503066,&quot;lrTPR&quot;:0.8694690265486725,&quot;rfFPR&quot;:0.23496932515337424,&quot;rfTPR&quot;:0.8716814159292036},{&quot;lrFPR&quot;:0.301840490797546,&quot;lrTPR&quot;:0.8694690265486725,&quot;rfFPR&quot;:0.23742331288343557,&quot;rfTPR&quot;:0.8716814159292036},{&quot;lrFPR&quot;:0.3098159509202454,&quot;lrTPR&quot;:0.8716814159292036,&quot;rfFPR&quot;:0.23987730061349694,&quot;rfTPR&quot;:0.8716814159292036},{&quot;lrFPR&quot;:0.3104294478527607,&quot;lrTPR&quot;:0.8716814159292036,&quot;rfFPR&quot;:0.2411042944785276,&quot;rfTPR&quot;:0.8738938053097345},{&quot;lrFPR&quot;:0.3116564417177914,&quot;lrTPR&quot;:0.8738938053097345,&quot;rfFPR&quot;:0.24233128834355827,&quot;rfTPR&quot;:0.8761061946902655},{&quot;lrFPR&quot;:0.3276073619631902,&quot;lrTPR&quot;:0.8805309734513275,&quot;rfFPR&quot;:0.24294478527607363,&quot;rfTPR&quot;:0.8761061946902655},{&quot;lrFPR&quot;:0.3355828220858896,&quot;lrTPR&quot;:0.8805309734513275,&quot;rfFPR&quot;:0.2441717791411043,&quot;rfTPR&quot;:0.8761061946902655},{&quot;lrFPR&quot;:0.3380368098159509,&quot;lrTPR&quot;:0.8827433628318584,&quot;rfFPR&quot;:0.24785276073619633,&quot;rfTPR&quot;:0.8783185840707964},{&quot;lrFPR&quot;:0.3392638036809816,&quot;lrTPR&quot;:0.8849557522123894,&quot;rfFPR&quot;:0.249079754601227,&quot;rfTPR&quot;:0.8805309734513275},{&quot;lrFPR&quot;:0.34049079754601225,&quot;lrTPR&quot;:0.8849557522123894,&quot;rfFPR&quot;:0.250920245398773,&quot;rfTPR&quot;:0.8827433628318584},{&quot;lrFPR&quot;:0.345398773006135,&quot;lrTPR&quot;:0.8871681415929203,&quot;rfFPR&quot;:0.252760736196319,&quot;rfTPR&quot;:0.8827433628318584},{&quot;lrFPR&quot;:0.35030674846625764,&quot;lrTPR&quot;:0.8915929203539823,&quot;rfFPR&quot;:0.25337423312883434,&quot;rfTPR&quot;:0.8827433628318584},{&quot;lrFPR&quot;:0.3588957055214724,&quot;lrTPR&quot;:0.8960176991150443,&quot;rfFPR&quot;:0.254601226993865,&quot;rfTPR&quot;:0.8827433628318584},{&quot;lrFPR&quot;:0.3595092024539877,&quot;lrTPR&quot;:0.8960176991150443,&quot;rfFPR&quot;:0.25766871165644173,&quot;rfTPR&quot;:0.8849557522123894},{&quot;lrFPR&quot;:0.36441717791411044,&quot;lrTPR&quot;:0.8982300884955752,&quot;rfFPR&quot;:0.2588957055214724,&quot;rfTPR&quot;:0.8871681415929203},{&quot;lrFPR&quot;:0.37484662576687117,&quot;lrTPR&quot;:0.8982300884955752,&quot;rfFPR&quot;:0.2607361963190184,&quot;rfTPR&quot;:0.8938053097345132},{&quot;lrFPR&quot;:0.3815950920245399,&quot;lrTPR&quot;:0.8982300884955752,&quot;rfFPR&quot;:0.26134969325153373,&quot;rfTPR&quot;:0.8938053097345132},{&quot;lrFPR&quot;:0.38466257668711656,&quot;lrTPR&quot;:0.8982300884955752,&quot;rfFPR&quot;:0.2625766871165644,&quot;rfTPR&quot;:0.8938053097345132},{&quot;lrFPR&quot;:0.38773006134969323,&quot;lrTPR&quot;:0.8982300884955752,&quot;rfFPR&quot;:0.2650306748466258,&quot;rfTPR&quot;:0.8938053097345132},{&quot;lrFPR&quot;:0.38834355828220857,&quot;lrTPR&quot;:0.8982300884955752,&quot;rfFPR&quot;:0.2705521472392638,&quot;rfTPR&quot;:0.8960176991150443},{&quot;lrFPR&quot;:0.38834355828220857,&quot;lrTPR&quot;:0.9004424778761062,&quot;rfFPR&quot;:0.27116564417177913,&quot;rfTPR&quot;:0.8960176991150443},{&quot;lrFPR&quot;:0.3889570552147239,&quot;lrTPR&quot;:0.9004424778761062,&quot;rfFPR&quot;:0.27177914110429446,&quot;rfTPR&quot;:0.8960176991150443},{&quot;lrFPR&quot;:0.3895705521472393,&quot;lrTPR&quot;:0.9026548672566371,&quot;rfFPR&quot;:0.2723926380368098,&quot;rfTPR&quot;:0.8960176991150443},{&quot;lrFPR&quot;:0.3914110429447853,&quot;lrTPR&quot;:0.9048672566371682,&quot;rfFPR&quot;:0.27607361963190186,&quot;rfTPR&quot;:0.8982300884955752},{&quot;lrFPR&quot;:0.3932515337423313,&quot;lrTPR&quot;:0.9070796460176991,&quot;rfFPR&quot;:0.2791411042944785,&quot;rfTPR&quot;:0.9004424778761062},{&quot;lrFPR&quot;:0.39386503067484663,&quot;lrTPR&quot;:0.9092920353982301,&quot;rfFPR&quot;:0.28404907975460125,&quot;rfTPR&quot;:0.9048672566371682},{&quot;lrFPR&quot;:0.39447852760736196,&quot;lrTPR&quot;:0.9092920353982301,&quot;rfFPR&quot;:0.2865030674846626,&quot;rfTPR&quot;:0.9070796460176991},{&quot;lrFPR&quot;:0.39754601226993863,&quot;lrTPR&quot;:0.9092920353982301,&quot;rfFPR&quot;:0.28957055214723926,&quot;rfTPR&quot;:0.9070796460176991},{&quot;lrFPR&quot;:0.4,&quot;lrTPR&quot;:0.9092920353982301,&quot;rfFPR&quot;:0.2950920245398773,&quot;rfTPR&quot;:0.911504424778761},{&quot;lrFPR&quot;:0.405521472392638,&quot;lrTPR&quot;:0.9092920353982301,&quot;rfFPR&quot;:0.296319018404908,&quot;rfTPR&quot;:0.911504424778761},{&quot;lrFPR&quot;:0.40736196319018403,&quot;lrTPR&quot;:0.9092920353982301,&quot;rfFPR&quot;:0.3024539877300613,&quot;rfTPR&quot;:0.9137168141592921},{&quot;lrFPR&quot;:0.4098159509202454,&quot;lrTPR&quot;:0.9092920353982301,&quot;rfFPR&quot;:0.3042944785276074,&quot;rfTPR&quot;:0.9137168141592921},{&quot;lrFPR&quot;:0.41595092024539876,&quot;lrTPR&quot;:0.911504424778761,&quot;rfFPR&quot;:0.3049079754601227,&quot;rfTPR&quot;:0.9137168141592921},{&quot;lrFPR&quot;:0.4245398773006135,&quot;lrTPR&quot;:0.911504424778761,&quot;rfFPR&quot;:0.30736196319018405,&quot;rfTPR&quot;:0.9137168141592921},{&quot;lrFPR&quot;:0.4263803680981595,&quot;lrTPR&quot;:0.911504424778761,&quot;rfFPR&quot;:0.3079754601226994,&quot;rfTPR&quot;:0.915929203539823},{&quot;lrFPR&quot;:0.4269938650306748,&quot;lrTPR&quot;:0.911504424778761,&quot;rfFPR&quot;:0.3085889570552147,&quot;rfTPR&quot;:0.915929203539823},{&quot;lrFPR&quot;:0.4288343558282209,&quot;lrTPR&quot;:0.9137168141592921,&quot;rfFPR&quot;:0.3104294478527607,&quot;rfTPR&quot;:0.915929203539823},{&quot;lrFPR&quot;:0.43006134969325155,&quot;lrTPR&quot;:0.9137168141592921,&quot;rfFPR&quot;:0.3122699386503067,&quot;rfTPR&quot;:0.918141592920354},{&quot;lrFPR&quot;:0.43190184049079755,&quot;lrTPR&quot;:0.9137168141592921,&quot;rfFPR&quot;:0.32085889570552145,&quot;rfTPR&quot;:0.9203539823008849},{&quot;lrFPR&quot;:0.4361963190184049,&quot;lrTPR&quot;:0.9137168141592921,&quot;rfFPR&quot;:0.3226993865030675,&quot;rfTPR&quot;:0.9203539823008849},{&quot;lrFPR&quot;:0.43742331288343556,&quot;lrTPR&quot;:0.9137168141592921,&quot;rfFPR&quot;:0.3239263803680982,&quot;rfTPR&quot;:0.9203539823008849},{&quot;lrFPR&quot;:0.43803680981595094,&quot;lrTPR&quot;:0.9137168141592921,&quot;rfFPR&quot;:0.3282208588957055,&quot;rfTPR&quot;:0.9247787610619469},{&quot;lrFPR&quot;:0.4404907975460123,&quot;lrTPR&quot;:0.9137168141592921,&quot;rfFPR&quot;:0.32883435582822085,&quot;rfTPR&quot;:0.9247787610619469},{&quot;lrFPR&quot;:0.4423312883435583,&quot;lrTPR&quot;:0.9137168141592921,&quot;rfFPR&quot;:0.3294478527607362,&quot;rfTPR&quot;:0.9247787610619469},{&quot;lrFPR&quot;:0.44785276073619634,&quot;lrTPR&quot;:0.915929203539823,&quot;rfFPR&quot;:0.33067484662576685,&quot;rfTPR&quot;:0.9314159292035398},{&quot;lrFPR&quot;:0.45153374233128835,&quot;lrTPR&quot;:0.915929203539823,&quot;rfFPR&quot;:0.3337423312883436,&quot;rfTPR&quot;:0.9314159292035398},{&quot;lrFPR&quot;:0.4521472392638037,&quot;lrTPR&quot;:0.918141592920354,&quot;rfFPR&quot;:0.3337423312883436,&quot;rfTPR&quot;:0.9336283185840708},{&quot;lrFPR&quot;:0.4539877300613497,&quot;lrTPR&quot;:0.918141592920354,&quot;rfFPR&quot;:0.3361963190184049,&quot;rfTPR&quot;:0.9336283185840708},{&quot;lrFPR&quot;:0.454601226993865,&quot;lrTPR&quot;:0.918141592920354,&quot;rfFPR&quot;:0.3374233128834356,&quot;rfTPR&quot;:0.9380530973451328},{&quot;lrFPR&quot;:0.4656441717791411,&quot;lrTPR&quot;:0.922566371681416,&quot;rfFPR&quot;:0.3392638036809816,&quot;rfTPR&quot;:0.9380530973451328},{&quot;lrFPR&quot;:0.4662576687116564,&quot;lrTPR&quot;:0.922566371681416,&quot;rfFPR&quot;:0.3411042944785276,&quot;rfTPR&quot;:0.9402654867256637},{&quot;lrFPR&quot;:0.46748466257668714,&quot;lrTPR&quot;:0.9247787610619469,&quot;rfFPR&quot;:0.345398773006135,&quot;rfTPR&quot;:0.9446902654867256},{&quot;lrFPR&quot;:0.4699386503067485,&quot;lrTPR&quot;:0.9247787610619469,&quot;rfFPR&quot;:0.347239263803681,&quot;rfTPR&quot;:0.9469026548672567},{&quot;lrFPR&quot;:0.4705521472392638,&quot;lrTPR&quot;:0.9247787610619469,&quot;rfFPR&quot;:0.35030674846625764,&quot;rfTPR&quot;:0.9469026548672567},{&quot;lrFPR&quot;:0.4723926380368098,&quot;lrTPR&quot;:0.9269911504424779,&quot;rfFPR&quot;:0.35153374233128837,&quot;rfTPR&quot;:0.9469026548672567},{&quot;lrFPR&quot;:0.47484662576687114,&quot;lrTPR&quot;:0.9269911504424779,&quot;rfFPR&quot;:0.3539877300613497,&quot;rfTPR&quot;:0.9469026548672567},{&quot;lrFPR&quot;:0.4754601226993865,&quot;lrTPR&quot;:0.9269911504424779,&quot;rfFPR&quot;:0.35460122699386504,&quot;rfTPR&quot;:0.9469026548672567},{&quot;lrFPR&quot;:0.4766871165644172,&quot;lrTPR&quot;:0.9269911504424779,&quot;rfFPR&quot;:0.35644171779141104,&quot;rfTPR&quot;:0.9469026548672567},{&quot;lrFPR&quot;:0.47975460122699387,&quot;lrTPR&quot;:0.9269911504424779,&quot;rfFPR&quot;:0.3570552147239264,&quot;rfTPR&quot;:0.9469026548672567},{&quot;lrFPR&quot;:0.4803680981595092,&quot;lrTPR&quot;:0.9269911504424779,&quot;rfFPR&quot;:0.3588957055214724,&quot;rfTPR&quot;:0.9469026548672567},{&quot;lrFPR&quot;:0.48282208588957054,&quot;lrTPR&quot;:0.9314159292035398,&quot;rfFPR&quot;:0.36012269938650304,&quot;rfTPR&quot;:0.9469026548672567},{&quot;lrFPR&quot;:0.4852760736196319,&quot;lrTPR&quot;:0.9314159292035398,&quot;rfFPR&quot;:0.36134969325153377,&quot;rfTPR&quot;:0.9469026548672567},{&quot;lrFPR&quot;:0.48957055214723927,&quot;lrTPR&quot;:0.9336283185840708,&quot;rfFPR&quot;:0.36319018404907977,&quot;rfTPR&quot;:0.9469026548672567},{&quot;lrFPR&quot;:0.49263803680981594,&quot;lrTPR&quot;:0.9358407079646017,&quot;rfFPR&quot;:0.37055214723926383,&quot;rfTPR&quot;:0.9491150442477876},{&quot;lrFPR&quot;:0.498159509202454,&quot;lrTPR&quot;:0.9358407079646017,&quot;rfFPR&quot;:0.37239263803680983,&quot;rfTPR&quot;:0.9491150442477876},{&quot;lrFPR&quot;:0.49877300613496933,&quot;lrTPR&quot;:0.9358407079646017,&quot;rfFPR&quot;:0.37423312883435583,&quot;rfTPR&quot;:0.9513274336283186},{&quot;lrFPR&quot;:0.5128834355828221,&quot;lrTPR&quot;:0.9402654867256637,&quot;rfFPR&quot;:0.37484662576687117,&quot;rfTPR&quot;:0.9513274336283186},{&quot;lrFPR&quot;:0.5134969325153375,&quot;lrTPR&quot;:0.9424778761061947,&quot;rfFPR&quot;:0.37791411042944784,&quot;rfTPR&quot;:0.9513274336283186},{&quot;lrFPR&quot;:0.5153374233128835,&quot;lrTPR&quot;:0.9424778761061947,&quot;rfFPR&quot;:0.3815950920245399,&quot;rfTPR&quot;:0.9535398230088495},{&quot;lrFPR&quot;:0.5159509202453988,&quot;lrTPR&quot;:0.9424778761061947,&quot;rfFPR&quot;:0.38588957055214723,&quot;rfTPR&quot;:0.9535398230088495},{&quot;lrFPR&quot;:0.5202453987730061,&quot;lrTPR&quot;:0.9424778761061947,&quot;rfFPR&quot;:0.38773006134969323,&quot;rfTPR&quot;:0.9557522123893806},{&quot;lrFPR&quot;:0.5233128834355828,&quot;lrTPR&quot;:0.9424778761061947,&quot;rfFPR&quot;:0.38834355828220857,&quot;rfTPR&quot;:0.9557522123893806},{&quot;lrFPR&quot;:0.5269938650306748,&quot;lrTPR&quot;:0.9424778761061947,&quot;rfFPR&quot;:0.39079754601226996,&quot;rfTPR&quot;:0.9557522123893806},{&quot;lrFPR&quot;:0.5288343558282208,&quot;lrTPR&quot;:0.9424778761061947,&quot;rfFPR&quot;:0.39263803680981596,&quot;rfTPR&quot;:0.9557522123893806},{&quot;lrFPR&quot;:0.5325153374233129,&quot;lrTPR&quot;:0.9446902654867256,&quot;rfFPR&quot;:0.3932515337423313,&quot;rfTPR&quot;:0.9557522123893806},{&quot;lrFPR&quot;:0.5331288343558283,&quot;lrTPR&quot;:0.9446902654867256,&quot;rfFPR&quot;:0.3987730061349693,&quot;rfTPR&quot;:0.9601769911504425},{&quot;lrFPR&quot;:0.5343558282208589,&quot;lrTPR&quot;:0.9446902654867256,&quot;rfFPR&quot;:0.40245398773006136,&quot;rfTPR&quot;:0.9601769911504425},{&quot;lrFPR&quot;:0.5386503067484663,&quot;lrTPR&quot;:0.9469026548672567,&quot;rfFPR&quot;:0.4153374233128834,&quot;rfTPR&quot;:0.9601769911504425},{&quot;lrFPR&quot;:0.5417177914110429,&quot;lrTPR&quot;:0.9491150442477876,&quot;rfFPR&quot;:0.4171779141104294,&quot;rfTPR&quot;:0.9601769911504425},{&quot;lrFPR&quot;:0.5429447852760736,&quot;lrTPR&quot;:0.9491150442477876,&quot;rfFPR&quot;:0.41840490797546015,&quot;rfTPR&quot;:0.9601769911504425},{&quot;lrFPR&quot;:0.5447852760736196,&quot;lrTPR&quot;:0.9491150442477876,&quot;rfFPR&quot;:0.4208588957055215,&quot;rfTPR&quot;:0.9601769911504425},{&quot;lrFPR&quot;:0.5466257668711656,&quot;lrTPR&quot;:0.9491150442477876,&quot;rfFPR&quot;:0.42208588957055215,&quot;rfTPR&quot;:0.9601769911504425},{&quot;lrFPR&quot;:0.5484662576687117,&quot;lrTPR&quot;:0.9535398230088495,&quot;rfFPR&quot;:0.42822085889570555,&quot;rfTPR&quot;:0.9623893805309734},{&quot;lrFPR&quot;:0.5496932515337424,&quot;lrTPR&quot;:0.9535398230088495,&quot;rfFPR&quot;:0.4331288343558282,&quot;rfTPR&quot;:0.9623893805309734},{&quot;lrFPR&quot;:0.5533742331288344,&quot;lrTPR&quot;:0.9535398230088495,&quot;rfFPR&quot;:0.4343558282208589,&quot;rfTPR&quot;:0.9623893805309734},{&quot;lrFPR&quot;:0.5539877300613497,&quot;lrTPR&quot;:0.9535398230088495,&quot;rfFPR&quot;:0.43987730061349695,&quot;rfTPR&quot;:0.9646017699115044},{&quot;lrFPR&quot;:0.5558282208588957,&quot;lrTPR&quot;:0.9535398230088495,&quot;rfFPR&quot;:0.449079754601227,&quot;rfTPR&quot;:0.9646017699115044},{&quot;lrFPR&quot;:0.558282208588957,&quot;lrTPR&quot;:0.9535398230088495,&quot;rfFPR&quot;:0.449079754601227,&quot;rfTPR&quot;:0.9668141592920354},{&quot;lrFPR&quot;:0.560122699386503,&quot;lrTPR&quot;:0.9535398230088495,&quot;rfFPR&quot;:0.4521472392638037,&quot;rfTPR&quot;:0.9668141592920354},{&quot;lrFPR&quot;:0.5656441717791411,&quot;lrTPR&quot;:0.9557522123893806,&quot;rfFPR&quot;:0.4582822085889571,&quot;rfTPR&quot;:0.9668141592920354},{&quot;lrFPR&quot;:0.5662576687116564,&quot;lrTPR&quot;:0.9579646017699115,&quot;rfFPR&quot;:0.4588957055214724,&quot;rfTPR&quot;:0.9668141592920354},{&quot;lrFPR&quot;:0.5668711656441717,&quot;lrTPR&quot;:0.9579646017699115,&quot;rfFPR&quot;:0.45950920245398774,&quot;rfTPR&quot;:0.9668141592920354},{&quot;lrFPR&quot;:0.5687116564417178,&quot;lrTPR&quot;:0.9579646017699115,&quot;rfFPR&quot;:0.4625766871165644,&quot;rfTPR&quot;:0.9668141592920354},{&quot;lrFPR&quot;:0.5693251533742332,&quot;lrTPR&quot;:0.9579646017699115,&quot;rfFPR&quot;:0.46809815950920247,&quot;rfTPR&quot;:0.9668141592920354},{&quot;lrFPR&quot;:0.5730061349693252,&quot;lrTPR&quot;:0.9579646017699115,&quot;rfFPR&quot;:0.4699386503067485,&quot;rfTPR&quot;:0.9668141592920354},{&quot;lrFPR&quot;:0.5742331288343558,&quot;lrTPR&quot;:0.9601769911504425,&quot;rfFPR&quot;:0.4705521472392638,&quot;rfTPR&quot;:0.9668141592920354},{&quot;lrFPR&quot;:0.5754601226993865,&quot;lrTPR&quot;:0.9601769911504425,&quot;rfFPR&quot;:0.47300613496932514,&quot;rfTPR&quot;:0.9668141592920354},{&quot;lrFPR&quot;:0.5760736196319018,&quot;lrTPR&quot;:0.9601769911504425,&quot;rfFPR&quot;:0.47791411042944787,&quot;rfTPR&quot;:0.9668141592920354},{&quot;lrFPR&quot;:0.5797546012269938,&quot;lrTPR&quot;:0.9601769911504425,&quot;rfFPR&quot;:0.47914110429447854,&quot;rfTPR&quot;:0.9668141592920354},{&quot;lrFPR&quot;:0.5815950920245399,&quot;lrTPR&quot;:0.9601769911504425,&quot;rfFPR&quot;:0.47975460122699387,&quot;rfTPR&quot;:0.9668141592920354},{&quot;lrFPR&quot;:0.5852760736196319,&quot;lrTPR&quot;:0.9646017699115044,&quot;rfFPR&quot;:0.48098159509202454,&quot;rfTPR&quot;:0.9668141592920354},{&quot;lrFPR&quot;:0.587116564417178,&quot;lrTPR&quot;:0.9646017699115044,&quot;rfFPR&quot;:0.48588957055214727,&quot;rfTPR&quot;:0.9668141592920354},{&quot;lrFPR&quot;:0.5877300613496933,&quot;lrTPR&quot;:0.9646017699115044,&quot;rfFPR&quot;:0.48957055214723927,&quot;rfTPR&quot;:0.9668141592920354},{&quot;lrFPR&quot;:0.5883435582822086,&quot;lrTPR&quot;:0.9646017699115044,&quot;rfFPR&quot;:0.49263803680981594,&quot;rfTPR&quot;:0.9668141592920354},{&quot;lrFPR&quot;:0.5895705521472393,&quot;lrTPR&quot;:0.9646017699115044,&quot;rfFPR&quot;:0.4938650306748466,&quot;rfTPR&quot;:0.9668141592920354},{&quot;lrFPR&quot;:0.5950920245398773,&quot;lrTPR&quot;:0.9646017699115044,&quot;rfFPR&quot;:0.49570552147239266,&quot;rfTPR&quot;:0.9668141592920354},{&quot;lrFPR&quot;:0.5969325153374233,&quot;lrTPR&quot;:0.9646017699115044,&quot;rfFPR&quot;:0.49877300613496933,&quot;rfTPR&quot;:0.9668141592920354},{&quot;lrFPR&quot;:0.598159509202454,&quot;lrTPR&quot;:0.9646017699115044,&quot;rfFPR&quot;:0.5012269938650307,&quot;rfTPR&quot;:0.9668141592920354},{&quot;lrFPR&quot;:0.6012269938650306,&quot;lrTPR&quot;:0.9646017699115044,&quot;rfFPR&quot;:0.5030674846625767,&quot;rfTPR&quot;:0.9690265486725663},{&quot;lrFPR&quot;:0.6030674846625766,&quot;lrTPR&quot;:0.9646017699115044,&quot;rfFPR&quot;:0.5067484662576687,&quot;rfTPR&quot;:0.9690265486725663},{&quot;lrFPR&quot;:0.6049079754601226,&quot;lrTPR&quot;:0.9646017699115044,&quot;rfFPR&quot;:0.507361963190184,&quot;rfTPR&quot;:0.9690265486725663},{&quot;lrFPR&quot;:0.6214723926380368,&quot;lrTPR&quot;:0.9668141592920354,&quot;rfFPR&quot;:0.5085889570552147,&quot;rfTPR&quot;:0.9690265486725663},{&quot;lrFPR&quot;:0.6263803680981596,&quot;lrTPR&quot;:0.9668141592920354,&quot;rfFPR&quot;:0.5122699386503068,&quot;rfTPR&quot;:0.9690265486725663},{&quot;lrFPR&quot;:0.6312883435582822,&quot;lrTPR&quot;:0.9668141592920354,&quot;rfFPR&quot;:0.5134969325153375,&quot;rfTPR&quot;:0.9712389380530974},{&quot;lrFPR&quot;:0.6337423312883436,&quot;lrTPR&quot;:0.9668141592920354,&quot;rfFPR&quot;:0.5147239263803681,&quot;rfTPR&quot;:0.9712389380530974},{&quot;lrFPR&quot;:0.6374233128834356,&quot;lrTPR&quot;:0.9668141592920354,&quot;rfFPR&quot;:0.5171779141104295,&quot;rfTPR&quot;:0.9734513274336283},{&quot;lrFPR&quot;:0.6411042944785276,&quot;lrTPR&quot;:0.9668141592920354,&quot;rfFPR&quot;:0.5190184049079755,&quot;rfTPR&quot;:0.9734513274336283},{&quot;lrFPR&quot;:0.6429447852760736,&quot;lrTPR&quot;:0.9668141592920354,&quot;rfFPR&quot;:0.5276073619631901,&quot;rfTPR&quot;:0.9756637168141593},{&quot;lrFPR&quot;:0.6435582822085889,&quot;lrTPR&quot;:0.9668141592920354,&quot;rfFPR&quot;:0.5349693251533743,&quot;rfTPR&quot;:0.9756637168141593},{&quot;lrFPR&quot;:0.6447852760736197,&quot;lrTPR&quot;:0.9668141592920354,&quot;rfFPR&quot;:0.5423312883435583,&quot;rfTPR&quot;:0.9778761061946902},{&quot;lrFPR&quot;:0.6460122699386504,&quot;lrTPR&quot;:0.9668141592920354,&quot;rfFPR&quot;:0.5429447852760736,&quot;rfTPR&quot;:0.9778761061946902},{&quot;lrFPR&quot;:0.6484662576687117,&quot;lrTPR&quot;:0.9668141592920354,&quot;rfFPR&quot;:0.5484662576687117,&quot;rfTPR&quot;:0.9800884955752213},{&quot;lrFPR&quot;:0.649079754601227,&quot;lrTPR&quot;:0.9668141592920354,&quot;rfFPR&quot;:0.5503067484662577,&quot;rfTPR&quot;:0.9800884955752213},{&quot;lrFPR&quot;:0.654601226993865,&quot;lrTPR&quot;:0.9668141592920354,&quot;rfFPR&quot;:0.5515337423312884,&quot;rfTPR&quot;:0.9800884955752213},{&quot;lrFPR&quot;:0.6558282208588957,&quot;lrTPR&quot;:0.9668141592920354,&quot;rfFPR&quot;:0.5521472392638037,&quot;rfTPR&quot;:0.9800884955752213},{&quot;lrFPR&quot;:0.658282208588957,&quot;lrTPR&quot;:0.9690265486725663,&quot;rfFPR&quot;:0.5533742331288344,&quot;rfTPR&quot;:0.9800884955752213},{&quot;lrFPR&quot;:0.6656441717791411,&quot;lrTPR&quot;:0.9690265486725663,&quot;rfFPR&quot;:0.5539877300613497,&quot;rfTPR&quot;:0.9800884955752213},{&quot;lrFPR&quot;:0.6754601226993865,&quot;lrTPR&quot;:0.9690265486725663,&quot;rfFPR&quot;:0.5552147239263804,&quot;rfTPR&quot;:0.9800884955752213},{&quot;lrFPR&quot;:0.6797546012269938,&quot;lrTPR&quot;:0.9690265486725663,&quot;rfFPR&quot;:0.5570552147239264,&quot;rfTPR&quot;:0.9800884955752213},{&quot;lrFPR&quot;:0.6865030674846626,&quot;lrTPR&quot;:0.9690265486725663,&quot;rfFPR&quot;:0.5576687116564417,&quot;rfTPR&quot;:0.9800884955752213},{&quot;lrFPR&quot;:0.6877300613496933,&quot;lrTPR&quot;:0.9690265486725663,&quot;rfFPR&quot;:0.558282208588957,&quot;rfTPR&quot;:0.9800884955752213},{&quot;lrFPR&quot;:0.694478527607362,&quot;lrTPR&quot;:0.9690265486725663,&quot;rfFPR&quot;:0.561963190184049,&quot;rfTPR&quot;:0.9800884955752213},{&quot;lrFPR&quot;:0.6957055214723926,&quot;lrTPR&quot;:0.9690265486725663,&quot;rfFPR&quot;:0.5644171779141104,&quot;rfTPR&quot;:0.9823008849557522},{&quot;lrFPR&quot;:0.7030674846625767,&quot;lrTPR&quot;:0.9712389380530974,&quot;rfFPR&quot;:0.5668711656441717,&quot;rfTPR&quot;:0.9823008849557522},{&quot;lrFPR&quot;:0.7042944785276074,&quot;lrTPR&quot;:0.9712389380530974,&quot;rfFPR&quot;:0.5674846625766872,&quot;rfTPR&quot;:0.9823008849557522},{&quot;lrFPR&quot;:0.7085889570552147,&quot;lrTPR&quot;:0.9712389380530974,&quot;rfFPR&quot;:0.5766871165644172,&quot;rfTPR&quot;:0.9823008849557522},{&quot;lrFPR&quot;:0.7128834355828221,&quot;lrTPR&quot;:0.9712389380530974,&quot;rfFPR&quot;:0.5803680981595092,&quot;rfTPR&quot;:0.9823008849557522},{&quot;lrFPR&quot;:0.7153374233128834,&quot;lrTPR&quot;:0.9712389380530974,&quot;rfFPR&quot;:0.5822085889570552,&quot;rfTPR&quot;:0.9823008849557522},{&quot;lrFPR&quot;:0.7159509202453987,&quot;lrTPR&quot;:0.9712389380530974,&quot;rfFPR&quot;:0.5834355828220859,&quot;rfTPR&quot;:0.9823008849557522},{&quot;lrFPR&quot;:0.7184049079754601,&quot;lrTPR&quot;:0.9712389380530974,&quot;rfFPR&quot;:0.5840490797546012,&quot;rfTPR&quot;:0.9823008849557522},{&quot;lrFPR&quot;:0.7196319018404908,&quot;lrTPR&quot;:0.9712389380530974,&quot;rfFPR&quot;:0.5846625766871165,&quot;rfTPR&quot;:0.9823008849557522},{&quot;lrFPR&quot;:0.7214723926380369,&quot;lrTPR&quot;:0.9712389380530974,&quot;rfFPR&quot;:0.5883435582822086,&quot;rfTPR&quot;:0.9823008849557522},{&quot;lrFPR&quot;:0.7263803680981595,&quot;lrTPR&quot;:0.9712389380530974,&quot;rfFPR&quot;:0.588957055214724,&quot;rfTPR&quot;:0.9823008849557522},{&quot;lrFPR&quot;:0.7276073619631902,&quot;lrTPR&quot;:0.9756637168141593,&quot;rfFPR&quot;:0.592638036809816,&quot;rfTPR&quot;:0.9823008849557522},{&quot;lrFPR&quot;:0.7312883435582822,&quot;lrTPR&quot;:0.9756637168141593,&quot;rfFPR&quot;:0.5932515337423313,&quot;rfTPR&quot;:0.9823008849557522},{&quot;lrFPR&quot;:0.7319018404907975,&quot;lrTPR&quot;:0.9756637168141593,&quot;rfFPR&quot;:0.598159509202454,&quot;rfTPR&quot;:0.9823008849557522},{&quot;lrFPR&quot;:0.7343558282208589,&quot;lrTPR&quot;:0.9756637168141593,&quot;rfFPR&quot;:0.6024539877300613,&quot;rfTPR&quot;:0.9823008849557522},{&quot;lrFPR&quot;:0.7398773006134969,&quot;lrTPR&quot;:0.9756637168141593,&quot;rfFPR&quot;:0.603680981595092,&quot;rfTPR&quot;:0.9823008849557522},{&quot;lrFPR&quot;:0.745398773006135,&quot;lrTPR&quot;:0.9756637168141593,&quot;rfFPR&quot;:0.6067484662576688,&quot;rfTPR&quot;:0.9823008849557522},{&quot;lrFPR&quot;:0.747239263803681,&quot;lrTPR&quot;:0.9756637168141593,&quot;rfFPR&quot;:0.6085889570552148,&quot;rfTPR&quot;:0.9823008849557522},{&quot;lrFPR&quot;:0.7478527607361963,&quot;lrTPR&quot;:0.9756637168141593,&quot;rfFPR&quot;:0.6141104294478528,&quot;rfTPR&quot;:0.9823008849557522},{&quot;lrFPR&quot;:0.7503067484662577,&quot;lrTPR&quot;:0.9778761061946902,&quot;rfFPR&quot;:0.6153374233128834,&quot;rfTPR&quot;:0.9823008849557522},{&quot;lrFPR&quot;:0.7515337423312883,&quot;lrTPR&quot;:0.9800884955752213,&quot;rfFPR&quot;:0.6171779141104294,&quot;rfTPR&quot;:0.9823008849557522},{&quot;lrFPR&quot;:0.752760736196319,&quot;lrTPR&quot;:0.9800884955752213,&quot;rfFPR&quot;:0.6214723926380368,&quot;rfTPR&quot;:0.9867256637168141},{&quot;lrFPR&quot;:0.756441717791411,&quot;lrTPR&quot;:0.9800884955752213,&quot;rfFPR&quot;:0.6282208588957056,&quot;rfTPR&quot;:0.9889380530973452},{&quot;lrFPR&quot;:0.7570552147239263,&quot;lrTPR&quot;:0.9800884955752213,&quot;rfFPR&quot;:0.6288343558282209,&quot;rfTPR&quot;:0.9889380530973452},{&quot;lrFPR&quot;:0.758282208588957,&quot;lrTPR&quot;:0.9800884955752213,&quot;rfFPR&quot;:0.6331288343558282,&quot;rfTPR&quot;:0.9889380530973452},{&quot;lrFPR&quot;:0.7601226993865031,&quot;lrTPR&quot;:0.9800884955752213,&quot;rfFPR&quot;:0.6343558282208589,&quot;rfTPR&quot;:0.9889380530973452},{&quot;lrFPR&quot;:0.7638036809815951,&quot;lrTPR&quot;:0.9800884955752213,&quot;rfFPR&quot;:0.6423312883435582,&quot;rfTPR&quot;:0.9911504424778761},{&quot;lrFPR&quot;:0.7662576687116565,&quot;lrTPR&quot;:0.9800884955752213,&quot;rfFPR&quot;:0.6429447852760736,&quot;rfTPR&quot;:0.9911504424778761},{&quot;lrFPR&quot;:0.7699386503067485,&quot;lrTPR&quot;:0.9800884955752213,&quot;rfFPR&quot;:0.6441717791411042,&quot;rfTPR&quot;:0.9911504424778761},{&quot;lrFPR&quot;:0.7717791411042945,&quot;lrTPR&quot;:0.9823008849557522,&quot;rfFPR&quot;:0.647239263803681,&quot;rfTPR&quot;:0.9933628318584071},{&quot;lrFPR&quot;:0.7748466257668711,&quot;lrTPR&quot;:0.9823008849557522,&quot;rfFPR&quot;:0.650920245398773,&quot;rfTPR&quot;:0.9933628318584071},{&quot;lrFPR&quot;:0.7809815950920246,&quot;lrTPR&quot;:0.9845132743362832,&quot;rfFPR&quot;:0.6515337423312884,&quot;rfTPR&quot;:0.9933628318584071},{&quot;lrFPR&quot;:0.7815950920245399,&quot;lrTPR&quot;:0.9845132743362832,&quot;rfFPR&quot;:0.6539877300613497,&quot;rfTPR&quot;:0.9933628318584071},{&quot;lrFPR&quot;:0.7852760736196319,&quot;lrTPR&quot;:0.9845132743362832,&quot;rfFPR&quot;:0.6552147239263804,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.7865030674846626,&quot;lrTPR&quot;:0.9845132743362832,&quot;rfFPR&quot;:0.6668711656441718,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.7914110429447853,&quot;lrTPR&quot;:0.9867256637168141,&quot;rfFPR&quot;:0.6687116564417178,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.7920245398773006,&quot;lrTPR&quot;:0.9867256637168141,&quot;rfFPR&quot;:0.6693251533742332,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.7926380368098159,&quot;lrTPR&quot;:0.9867256637168141,&quot;rfFPR&quot;:0.6705521472392638,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.8024539877300614,&quot;lrTPR&quot;:0.9867256637168141,&quot;rfFPR&quot;:0.6717791411042945,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.803680981595092,&quot;lrTPR&quot;:0.9867256637168141,&quot;rfFPR&quot;:0.6766871165644172,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.8067484662576687,&quot;lrTPR&quot;:0.9867256637168141,&quot;rfFPR&quot;:0.6797546012269938,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.8116564417177914,&quot;lrTPR&quot;:0.9867256637168141,&quot;rfFPR&quot;:0.6877300613496933,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.8153374233128834,&quot;lrTPR&quot;:0.9867256637168141,&quot;rfFPR&quot;:0.6914110429447853,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.8184049079754602,&quot;lrTPR&quot;:0.9889380530973452,&quot;rfFPR&quot;:0.694478527607362,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.8220858895705522,&quot;lrTPR&quot;:0.9889380530973452,&quot;rfFPR&quot;:0.7012269938650306,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.8233128834355828,&quot;lrTPR&quot;:0.9889380530973452,&quot;rfFPR&quot;:0.7030674846625767,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.8239263803680982,&quot;lrTPR&quot;:0.9889380530973452,&quot;rfFPR&quot;:0.7055214723926381,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.8423312883435583,&quot;lrTPR&quot;:0.9911504424778761,&quot;rfFPR&quot;:0.7067484662576687,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.852760736196319,&quot;lrTPR&quot;:0.9933628318584071,&quot;rfFPR&quot;:0.7079754601226994,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.854601226993865,&quot;lrTPR&quot;:0.9933628318584071,&quot;rfFPR&quot;:0.7141104294478527,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.8552147239263803,&quot;lrTPR&quot;:0.9933628318584071,&quot;rfFPR&quot;:0.7190184049079754,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.8717791411042944,&quot;lrTPR&quot;:0.9933628318584071,&quot;rfFPR&quot;:0.7202453987730061,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.8723926380368098,&quot;lrTPR&quot;:0.9933628318584071,&quot;rfFPR&quot;:0.7239263803680982,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.8754601226993866,&quot;lrTPR&quot;:0.9933628318584071,&quot;rfFPR&quot;:0.7263803680981595,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.8760736196319019,&quot;lrTPR&quot;:0.9933628318584071,&quot;rfFPR&quot;:0.7269938650306749,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.8803680981595092,&quot;lrTPR&quot;:0.9933628318584071,&quot;rfFPR&quot;:0.7349693251533742,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.8809815950920246,&quot;lrTPR&quot;:0.9933628318584071,&quot;rfFPR&quot;:0.7361963190184049,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.8834355828220859,&quot;lrTPR&quot;:0.9933628318584071,&quot;rfFPR&quot;:0.7423312883435583,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.8865030674846626,&quot;lrTPR&quot;:0.9933628318584071,&quot;rfFPR&quot;:0.7460122699386503,&quot;rfTPR&quot;:0.995575221238938},{&quot;lrFPR&quot;:0.8877300613496932,&quot;lrTPR&quot;:0.9933628318584071,&quot;rfFPR&quot;:0.7521472392638037,&quot;rfTPR&quot;:0.9977876106194691},{&quot;lrFPR&quot;:0.9006134969325154,&quot;lrTPR&quot;:0.9933628318584071,&quot;rfFPR&quot;:0.756441717791411,&quot;rfTPR&quot;:0.9977876106194691},{&quot;lrFPR&quot;:0.9042944785276074,&quot;lrTPR&quot;:0.9933628318584071,&quot;rfFPR&quot;:0.7705521472392638,&quot;rfTPR&quot;:0.9977876106194691},{&quot;lrFPR&quot;:0.9134969325153375,&quot;lrTPR&quot;:0.9933628318584071,&quot;rfFPR&quot;:0.7760736196319018,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9153374233128835,&quot;lrTPR&quot;:0.9933628318584071,&quot;rfFPR&quot;:0.7773006134969325,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9165644171779141,&quot;lrTPR&quot;:0.9933628318584071,&quot;rfFPR&quot;:0.7797546012269939,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9171779141104295,&quot;lrTPR&quot;:0.9933628318584071,&quot;rfFPR&quot;:0.7822085889570553,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9190184049079755,&quot;lrTPR&quot;:0.9933628318584071,&quot;rfFPR&quot;:0.7895705521472393,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9257668711656442,&quot;lrTPR&quot;:0.9933628318584071,&quot;rfFPR&quot;:0.7926380368098159,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9269938650306748,&quot;lrTPR&quot;:0.9933628318584071,&quot;rfFPR&quot;:0.798159509202454,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9312883435582822,&quot;lrTPR&quot;:0.9977876106194691,&quot;rfFPR&quot;:0.7993865030674847,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9337423312883436,&quot;lrTPR&quot;:0.9977876106194691,&quot;rfFPR&quot;:0.8012269938650307,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9423312883435583,&quot;lrTPR&quot;:0.9977876106194691,&quot;rfFPR&quot;:0.803680981595092,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.943558282208589,&quot;lrTPR&quot;:0.9977876106194691,&quot;rfFPR&quot;:0.807361963190184,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9441717791411043,&quot;lrTPR&quot;:0.9977876106194691,&quot;rfFPR&quot;:0.8098159509202454,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9460122699386503,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.8116564417177914,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.947239263803681,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.8134969325153374,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9478527607361963,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.8165644171779141,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9546012269938651,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.8288343558282208,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9564417177914111,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.8300613496932515,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9625766871165644,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.8331288343558282,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9662576687116564,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.8441717791411043,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9705521472392638,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.8466257668711656,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9717791411042945,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.8503067484662576,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9730061349693252,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.8533742331288343,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9742331288343559,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.8625766871165644,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9766871165644172,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.8644171779141104,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9779141104294479,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.8656441717791411,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9785276073619632,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.8699386503067484,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9797546012269939,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.8711656441717791,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9822085889570552,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.8742331288343558,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9846625766871165,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.8748466257668711,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9883435582822085,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.8766871165644172,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.9914110429447853,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.8840490797546012,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.992638036809816,&quot;lrTPR&quot;:1.0,&quot;rfFPR&quot;:0.8858895705521472,&quot;rfTPR&quot;:1.0}],&quot;genId&quot;:&quot;615260930&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/customC3Chart'], \n      function(playground, _magiccustomC3Chart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magiccustomC3Chart,\n    \"o\": {\"js\":\"var chartOptions = { data: { xs: {\\n                            'lrTPR': 'lrFPR',\\n                            'rfTPR': 'rfFPR',\\n                         }\\n                   },\\n                   axis: {\\n                      y: {\\n                        label: 'TPR'\\n                      },\\n                      x: {\\n                         label: 'FPR',\\n                         tick: {\\n                            count: 5\\n                         }\\n                      }\\n                   },\\n                   point: {\\n                        show: false\\n                   }\\n                  };\",\"headers\":[\"lrFPR\",\"lrTPR\",\"rfFPR\",\"rfTPR\"],\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon25631fcfd6ebed106b5daf0515369798&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon36b9fc3dce76f588c282d1cb53dee4da&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 18
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "07DE1126FF72485EADB6E42DA3A80F1B"
    },
    "cell_type" : "code",
    "source" : "println(\"Area under precision-recall lr curve = \" + lrMetrics.areaUnderPR)\nprintln(\"Area under precision-recall rf curve = \" + rfMetrics.areaUnderPR)\n\nprintln(\"Area under roc lr curve = \" + lrMetrics.areaUnderROC)\nprintln(\"Area under roc rf curve = \" + rfMetrics.areaUnderROC)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "Area under precision-recall lr curve = 0.6640000664694756\nArea under precision-recall rf curve = 0.7056397083564855\nArea under roc lr curve = 0.8686817959715503\nArea under roc rf curve = 0.8963488788750762\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 19
    } ]
  }, {
    "metadata" : {
      "id" : "17CD2D328D794AA6A5EA6D18374BFD4C"
    },
    "cell_type" : "markdown",
    "source" : "It's easy to see what it's hard to achieve good precision with high recall related to positive reviews. What's because of low fraction of positive reviews in our unbalanced dataset. The quality of classification would be different if we will calculate metrics relating to negative reviews.\n\n**Problem**. Find the maximum accuracy of each classifier at level of recall of at least 0.8:\n  - while predicting positive reviews\n  - while predicting negative reviews"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "208B7A15C29E47ED9DCF1AB78AF184B0"
    },
    "cell_type" : "code",
    "source" : "// measuring predictions of positive reviews\nval lrPosPredictionAndLabels = lrPredictions\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(1), r.getAs[Double](1)))\nval rfPosPredictionAndLabels = rfPredictions\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(1), r.getAs[Double](1)))\nval lrPosMetrics = new BinaryClassificationMetrics(lrPosPredictionAndLabels)\nval rfPosMetrics = new BinaryClassificationMetrics(rfPosPredictionAndLabels)\n\n// measuring predictions of negative reviews\nval lrNegPredictionAndLabels = lrPredictions\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(0), 1.0 - r.getAs[Double](1)))\nval rfNegPredictionAndLabels = rfPredictions\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(0), 1.0 - r.getAs[Double](1)))\nval lrNegMetrics = new BinaryClassificationMetrics(lrNegPredictionAndLabels)\nval rfNegMetrics = new BinaryClassificationMetrics(rfNegPredictionAndLabels)\n\n\n// Obtain precision-recall curves\nval lrPosPrecisionRecall = lrPosMetrics.pr\nval rfPosPrecisionRecall = rfPosMetrics.pr\nval lrNegPrecisionRecall = lrNegMetrics.pr\nval rfNegPrecisionRecall = rfNegMetrics.pr",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "lrPosPredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[521] at map at <console>:113\nrfPosPredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[542] at map at <console>:116\nlrPosMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@2bc74f0e\nrfPosMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@21506af4\nlrNegPredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[563] at map at <console>:123\nrfNegPredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[584] at map at <console>:126\nlrNegMetrics: org.apache.spark...."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 20
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9B6B404DDBBE46049D6CC47F1B78FB87"
    },
    "cell_type" : "code",
    "source" : "println(\"=== Positive reviews prediction ===\")\nprintln(\"Logistic regression max accuracy at recall >= 0.8: \" + \n        lrPosMetrics.pr.filter(_._1 >= 0.8).map(_._2).max)\nprintln(\"Random Forest max accuracy at recall >= 0.8: \" + \n        rfPosMetrics.pr.filter(_._1 >= 0.8).map(_._2).max)\n\nprintln(\"=== Negative reviews prediction ===\")\nprintln(\"Logistic regression max accuracy at recall >= 0.8: \" + \n        lrNegMetrics.pr.filter(_._1 >= 0.8).map(_._2).max)\nprintln(\"Random Forest max accuracy at recall >= 0.8: \" + \n        rfNegMetrics.pr.filter(_._1 >= 0.8).map(_._2).max)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "=== Positive reviews prediction ===\nLogistic regression max accuracy at recall >= 0.8: 0.5370919881305638\nRandom Forest max accuracy at recall >= 0.8: 0.5647425897035881\n=== Negative reviews prediction ===\nLogistic regression max accuracy at recall >= 0.8: 0.9388489208633094\nRandom Forest max accuracy at recall >= 0.8: 0.9525200876552228\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 21
    } ]
  }, {
    "metadata" : {
      "id" : "0FAC2E3D9E274994B48017C51C94B775"
    },
    "cell_type" : "markdown",
    "source" : "Also we can conclude what complex, slow and heavy Random Forest with 200 decision trees doesn't perform much better then easy and fast Logistic Regression. That's because decision tree based models don't suite well for *sparse features* (bag-of-words is an example of sparse features)."
  }, {
    "metadata" : {
      "id" : "C4A27F6381894D7A8867569B6A018F70"
    },
    "cell_type" : "markdown",
    "source" : "Up to this point we have not performed hyperparameters tuning. From now let's use only LogisticRegression model and perform cross-validation or train-validation split (it is less expensive, but will not produce as reliable results) to find optimal `regularization parameter (regParam)` for Logistic Regression with respect to 'roc_auc' metric. Also searching for optimal value of regularization parameter on a logarithmic scale is good idea."
  }, {
    "metadata" : {
      "id" : "609BDE23913740A181B92C5E1A73CCBD"
    },
    "cell_type" : "markdown",
    "source" : "## Feature selection and dimensionality reduction"
  }, {
    "metadata" : {
      "id" : "E56CEDCB27264AFFBB3DE3B73912BA13"
    },
    "cell_type" : "markdown",
    "source" : "At this stage it can be concluded that the proposed text encoding may not be the best. Not every algorithm can be applied in this problem due to the large feature space. In addition, there is a lot of noise in our encoded data, because all the words have been taken to build the vocabulary, i.e., were taken even those words which were found only in a single review (think about typos). So it seems that it would be nice to reduce the dimensionality of the data and to get rid of the noise. One can perform feature selection and dimensionality reduction in multiple ways.\n\n### Term frequency\nTry to create a sample that will consist of only the most \"important\" words. It seems that the occurrence of the most frequent words in the review, for example, *good*, *bad*, etc. are quite good indicators. This can be done by discarding the rare words by frequency. One can specify the minimum number (or fraction) of different reviews a word must appear in to be included in the vocabulary by setting `minDF` parameter of `CountVectorizer`.\n\n### Feature Importance\nUse trained random forest to obtain its importance estimation for each feature and select most important features (words) using this estimations.\n\n### Hashing trick\n\nA different approach from the above two is [hashing](https://en.wikipedia.org/wiki/Feature_hashing) or hashing trick: get the hash of each word and after that, for example, perform bag-of-words over the space of obtained hashes. This allows you to tune the size of the feature space: the lower the sapce, the higher the frequency of collisions. Also it allows to handle previously unseen words. This approach is implemented in [HashingTF](http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.ml.feature.HashingTF) `Transformer`.\n\nYou may notice that the last two approaches can be applied not only to textual data."
  }, {
    "metadata" : {
      "id" : "39607E3B18F2412188967877E482387C"
    },
    "cell_type" : "markdown",
    "source" : "**Problem** Create new features for our unbalanced data as follows:\n  - bag-of-words with `minDF` is equal to 4\n  - 15000 most important feature (according to trained random forest) from bag-of-words with `minDF` is equal to 1\n  - hashing trick with `numFeatures` is equal to 15000\n  \nTrain classifier and calculate the area under ROC curve for each of four samples (default bag-of-words and three new samples described above). What can you say about the quality of these approaches to reduce feature space dimension?"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9E362EC3159C41BA8BAA9F49C4E1F6B4"
    },
    "cell_type" : "code",
    "source" : "// Term frequency\nval tfCountVec = new CountVectorizer()\n  .setInputCol(\"filteredTokens\")\n  .setOutputCol(\"features\")\n  .setMinDF(4)\n\nval tfPipeline = new Pipeline()\n  .setStages(Array(regexTokenizer, \n                   remover, \n                   tfCountVec))\n\nval tfModel = tfPipeline.fit(unbalancedData)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "tfCountVec: org.apache.spark.ml.feature.CountVectorizer = cntVec_8a85399435dd\ntfPipeline: org.apache.spark.ml.Pipeline = pipeline_a9f66c8956ec\ntfModel: org.apache.spark.ml.PipelineModel = pipeline_a9f66c8956ec\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 8
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "4D35426188E246C4B2B900F91B024AA5"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.ml.feature.VectorSlicer\n\n// Most important features\nval trainedRF = rf.fit(labelIndexer.transform(trainBagOfWords))\nval mostImportant =  trainedRF.featureImportances\n  .toArray\n  .zipWithIndex\n  .sortBy(- _._1)\n  .take(15000)\n  .map(_._2)\n\nval rfCountVec = new CountVectorizer()\n  .setInputCol(\"filteredTokens\")\n  .setOutputCol(\"allFeatures\")\n\nval mostImportantSelector = new VectorSlicer()\n  .setInputCol(rfCountVec.getOutputCol)\n  .setOutputCol(\"features\")\n  .setIndices(mostImportant)\n\nval mostImpPipeline = new Pipeline()\n  .setStages(Array(regexTokenizer, \n                   remover, \n                   rfCountVec,\n                   mostImportantSelector\n                  ))\n\nval mostImpModel = mostImpPipeline.fit(unbalancedData)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.ml.feature.VectorSlicer\ntrainedRF: org.apache.spark.ml.classification.RandomForestClassificationModel = RandomForestClassificationModel (uid=rfc_935390080402) with 200 trees\nmostImportant: Array[Int] = Array(43, 303, 23, 96, 17, 8, 34, 355, 19, 573, 110, 349, 49, 385, 10, 237, 1696, 94, 2128, 70, 4584, 7, 357, 174, 104, 93, 547, 28, 131, 196, 60, 1005, 1838, 483, 84, 132, 383, 1315, 459, 1220, 966, 3305, 14, 296, 116, 893, 71, 387, 4698, 1346, 679, 938, 40, 41, 1559, 718, 1713, 294, 2, 1121, 511, 211, 1869, 1139, 180, 5287, 1626, 729, 283, 1590, 817, 1817, 327, 1283, 1622, 455, 120, 269, 2614, 372, 64, 5025, 143, 7727, 399, 4300, 191, 631, 3529, 839, 11398, 556, 233, 38, 610, 7511, 3146, 1149, 2615, 691, 278, 299, 8671, 3652, 157, 3499, 1081, 3023, 1129, 5985, 89..."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 9
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B82964C081F4440E8F97ADD69656DF89"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.ml.feature.HashingTF\n\n// Hashing trick\nval hashingTF = new HashingTF()\n  .setInputCol(regexTokenizer.getOutputCol)\n  .setOutputCol(\"features\")\n  .setNumFeatures(15000)\n\nval hashingTFPipeline = new Pipeline()\n  .setStages(Array(regexTokenizer, \n                   hashingTF\n                  ))\nval hashingTFModel = hashingTFPipeline.fit(unbalancedData)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.ml.feature.HashingTF\nhashingTF: org.apache.spark.ml.feature.HashingTF = hashingTF_fc100dad0308\nhashingTFPipeline: org.apache.spark.ml.Pipeline = pipeline_00a717af6736\nhashingTFModel: org.apache.spark.ml.PipelineModel = pipeline_00a717af6736\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 10
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "4C9B168256354305869DCF319694E1AF"
    },
    "cell_type" : "code",
    "source" : "// trainBagOfWords and testBagOfWords are obtained previously\n\nval trainTermFreqFeatures = tfModel.transform(trainingData).select(\"id\", \"sentiment\", \"features\")\nval testTermFreqFeatures = tfModel.transform(testData).select(\"id\", \"sentiment\", \"features\")\n\nval trainMostImpFeatures = mostImpModel.transform(trainingData).select(\"id\", \"sentiment\", \"features\")\nval testMostImpFeatures = mostImpModel.transform(testData).select(\"id\", \"sentiment\", \"features\")\n\nval trainHashingTFFeatures = hashingTFModel.transform(trainingData).select(\"id\", \"sentiment\", \"features\")\nval testHashingTFFeatures = hashingTFModel.transform(testData).select(\"id\", \"sentiment\", \"features\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "trainTermFreqFeatures: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector]\ntestTermFreqFeatures: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector]\ntrainMostImpFeatures: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector]\ntestMostImpFeatures: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector]\ntrainHashingTFFeatures: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector]\ntestHashingTFFeatures: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 11
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9067D409D95A4DAA916A03969B641C44"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.ml.evaluation.BinaryClassificationEvaluator\nimport org.apache.spark.ml.tuning.{ParamGridBuilder, TrainValidationSplit}\n// CrossValidator is another option\n// it produces more reliable results but it's more expensive to compute.\n\nval lrParamGrid = new ParamGridBuilder()\n  .addGrid(lr.regParam, Array(1e-3, 1e-2, 1e-1, 1e0))\n  .build()\n\nval lrValidator = new TrainValidationSplit()\n  .setEstimator(lrPipeline)\n  .setEvaluator(new BinaryClassificationEvaluator)\n  .setEstimatorParamMaps(lrParamGrid)\n  .setTrainRatio(0.7)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.ml.evaluation.BinaryClassificationEvaluator\nimport org.apache.spark.ml.tuning.{ParamGridBuilder, TrainValidationSplit}\nlrParamGrid: Array[org.apache.spark.ml.param.ParamMap] = \nArray({\n\tlogreg_e7ba5c026307-regParam: 0.001\n}, {\n\tlogreg_e7ba5c026307-regParam: 0.01\n}, {\n\tlogreg_e7ba5c026307-regParam: 0.1\n}, {\n\tlogreg_e7ba5c026307-regParam: 1.0\n})\nlrValidator: org.apache.spark.ml.tuning.TrainValidationSplit = tvs_3bc192dcd700\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 12
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "D5397E5CB13A462982B28F44B00A8962"
    },
    "cell_type" : "code",
    "source" : "val bagOfWordsModel = lrValidator.fit(trainBagOfWords)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "bagOfWordsModel: org.apache.spark.ml.tuning.TrainValidationSplitModel = tvs_3bc192dcd700\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 13
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "268275BF0265492FBF2D67B23719A994"
    },
    "cell_type" : "code",
    "source" : "val tfModel = lrValidator.fit(trainTermFreqFeatures)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "tfModel: org.apache.spark.ml.tuning.TrainValidationSplitModel = tvs_3bc192dcd700\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 14
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "72F63CC500794D519C33E21C2BF0FC02"
    },
    "cell_type" : "code",
    "source" : "val mostImpModel = lrValidator.fit(trainMostImpFeatures)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "mostImpModel: org.apache.spark.ml.tuning.TrainValidationSplitModel = tvs_3bc192dcd700\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 15
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "3E7C5082C3FF4B5D9DDACE684DF5C9B4"
    },
    "cell_type" : "code",
    "source" : "val hashingTFModel = lrValidator.fit(trainHashingTFFeatures)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "hashingTFModel: org.apache.spark.ml.tuning.TrainValidationSplitModel = tvs_3bc192dcd700\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 16
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "111A56ECBFC64A3F8E7609E68AD5EF42"
    },
    "cell_type" : "code",
    "source" : "val predictions = bagOfWordsModel.transform(testBagOfWords)\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(1), r.getAs[Double](1)))\n\nval bagOfWordsMetrics = new BinaryClassificationMetrics(predictions)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "predictions: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[1838] at map at <console>:114\nbagOfWordsMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@375b5f7b\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 24
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "E6AA4161D94541608914EE8C2F8B87DE"
    },
    "cell_type" : "code",
    "source" : "val predictions = tfModel.transform(testTermFreqFeatures)\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(1), r.getAs[Double](1)))\n\nval tfMetrics = new BinaryClassificationMetrics(predictions)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "predictions: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[1859] at map at <console>:128\ntfMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@5f844ad7\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 25
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B60D292A10494A44A011B26C4EE8BA33"
    },
    "cell_type" : "code",
    "source" : "val predictions = mostImpModel.transform(testMostImpFeatures)\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(1), r.getAs[Double](1)))\n\nval mostImpMetrics = new BinaryClassificationMetrics(predictions)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "predictions: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[1880] at map at <console>:144\nmostImpMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@42972bfd\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 26
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "821B9CDF3FFA49F282B0541204158B92"
    },
    "cell_type" : "code",
    "source" : "// prepare predictions for metric model\n\nval predictions = hashingTFModel.transform(testHashingTFFeatures)\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(1), r.getAs[Double](1)))\n\nval hashingTFMetrics = new BinaryClassificationMetrics(predictions)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "predictions: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[1901] at map at <console>:146\nhashingTFMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@48b4db44\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 27
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "CC459266C0F3421DABA1D4478A0A17CB"
    },
    "cell_type" : "code",
    "source" : "println(\"Area under roc curve\")\nprintln(\"Simple bag-of-words: \" + bagOfWordsMetrics.areaUnderROC)\nprintln(\"Term Frequency: \" + tfMetrics.areaUnderROC)\nprintln(\"Most important features: \" + mostImpMetrics.areaUnderROC)\nprintln(\"Hahing trick: \" + hashingTFMetrics.areaUnderROC)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "Area under roc curve\nSimple bag-of-words: 0.8981623234085643\nTerm Frequency: 0.9084144762762402\nMost important features: 0.9013465976248115\nHahing trick: 0.8982172004277599\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 28
    } ]
  }, {
    "metadata" : {
      "id" : "62862C06FFD44487880A36AEAA2BFF2E"
    },
    "cell_type" : "markdown",
    "source" : "Thus, we managed to reduce the dimension of more than three times without much loss in quality. But even 15000 features is quite a lot. Let's say we want to reduce the dimension to 2000 features, however, you notice that three of the previous method gave a small quality degradation.\n\nAlso one of the ways of dimensionality reduction is [PCA](https://en.wikipedia.org/wiki/Principal_component_analysis) (principal component analysis). PCA uses an orthogonal transformation to convert a set of observations of possibly correlated variables into a set of values of linearly uncorrelated variables called principal components. Generaly this operation can efficiently perform dimentionality reduction but requires a lot of cpu and memory resources. So if you have sufficient resources, you can also try to solve the following problem:\n\n**Problem** Try to reduce the dimension of up to 2000:\n  - using one of above methods\n  - using PCA (for usage example look [here](http://spark.apache.org/docs/1.6.1/ml-features.html#pca))\n\nWhich approach works best?"
  }, {
    "metadata" : {
      "id" : "B2F1B9A20EBF437D853632C8B01FCF1C"
    },
    "cell_type" : "markdown",
    "source" : "### What are some other ways of processing text data?\n\nAs you can see, the approach with a bag of words is very naive, because it does not allow to take into account the information about word frequency across all documents (reviews). In this case, it may be useful to use [tf-idf](http://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.html).\n\nAnother disadvantage of the bag-of-words is using of absolute frequencies of words. Some words can have very large frequencies and at the same time some other words can have very low frequencies. To \"smooth out\" the difference between them one can apply a log transformation $x \\to log(x + 1)$ (we need to add `1` because `X` can be equal to `0` in bag-of-words encoding)"
  } ],
  "nbformat" : 4
}