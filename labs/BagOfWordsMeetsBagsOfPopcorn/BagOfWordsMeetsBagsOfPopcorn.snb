{
  "metadata" : {
    "name" : "BagOfWordsMeetsBagsOfPopcorn",
    "user_save_timestamp" : "1970-01-01T03:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T03:00:00.000Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "customLocalRepo" : null,
    "customRepos" : null,
    "customDeps" : null,
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : null
  },
  "cells" : [ {
    "metadata" : {
      "id" : "89D96E0BE5DB49F983ACCFA8DB52561D"
    },
    "cell_type" : "markdown",
    "source" : "# Bag of Words Meets Bags of Popcorn"
  }, {
    "metadata" : {
      "id" : "65DB30C3AEA742C4839566164BF1A058"
    },
    "cell_type" : "markdown",
    "source" : "In this lab we're going to work with IMDB Movies Reviews dataset from kaggle competition [Bag of Words Meets Bags of Popcorn](https://www.kaggle.com/c/word2vec-nlp-tutorial/data).\n\n<div style=\"text-align:center\">\n  <img src=\"http://i.imgur.com/QZgxFic.png\">\n</div>\n\nThe task is to determine whether the given movie review is positive or negative. This is one example of the problem of text [sentiment analysis](https://en.wikipedia.org/wiki/Sentiment_analysis). Here is one example of review from the dataset:\n\n    When I saw this film in the 1950s, I wanted to be a scientist too. There was something magical and useful in Science. I took a girl - friend along to see it a second time. I don't think she was as impressed as I was! This film was comical yet serious, at a time when synthetic fibres were rather new. Lessons from this film could be applied to issues relating to GM experimentation of today."
  }, {
    "metadata" : {
      "id" : "60FEC683FB4B4F429C9F8894A70F4C30"
    },
    "cell_type" : "markdown",
    "source" : "Load labeledTrainData.tsv dataset. To load data from csv file direct to Spark's Dataframe one can use [spark-csv](http://spark-packages.org/package/databricks/spark-csv) package.\nTo add spark-csv package to spark notebook one could add \"com.databricks:spark-csv_2.10:1.4.0\" (or \"com.databricks:spark-csv_2.11:1.4.0\" for Scala 2.11) dependency into customDeps conf section. Alternatively one could specify this dependency in `--packages` command line option while submiting spark application to a cluster (`spark-submit`) or launching spark shell (`spark-shell`).\nFor tsv format use appropriate value of `delimiter` option."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "7E6CFDCD51034DF989F86638D5846457"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.sql.SQLContext\n\nval sqlContext = new SQLContext(sc)\n\nval data = sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\")\n    .option(\"inferSchema\", \"true\")\n    .option(\"delimiter\", \"\\t\")\n    .load(\"notebooks/labs/BagOfWordsMeetsBagsOfPopcorn/labeledTrainData.tsv\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.sql.SQLContext\nsqlContext: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@35fa221f\ndata: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, review: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 2
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "3492639D56FE4809AA62FE110B48158B"
    },
    "cell_type" : "code",
    "source" : "data.limit(5).show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+-------+---------+--------------------+\n|     id|sentiment|              review|\n+-------+---------+--------------------+\n| 5814_8|        1|With all this stu...|\n| 7759_3|        0|The film starts w...|\n| 8196_8|        1|I dont know why p...|\n| 7166_2|        0|This movie could ...|\n|10633_1|        0|I watched this vi...|\n+-------+---------+--------------------+\n\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 3
    } ]
  }, {
    "metadata" : {
      "id" : "1BFBCC214C944B8281D0AEBF83FE23C4"
    },
    "cell_type" : "markdown",
    "source" : "How many positive and negative reviews in this dataset?"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "09ED77BEC2824A538C1A82089CDD8B2C"
    },
    "cell_type" : "code",
    "source" : "data.groupBy(\"sentiment\").count.show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------+-----+\n|sentiment|count|\n+---------+-----+\n|        0| 6387|\n|        1| 6990|\n+---------+-----+\n\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 4
    } ]
  }, {
    "metadata" : {
      "id" : "E437523B0D864162AB13DA0F209CE1BD"
    },
    "cell_type" : "markdown",
    "source" : "As we can see, almost half of the reviews are positive and the other half of the reviews are negative. Such datasets are called balanced. But let's make things a bit more interesting and remove three quarters of positive reviews from the dataset and thus we will make the dataset unbalanced."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "68BFF7509E0D478FBFD7BDBBFAF117D0"
    },
    "cell_type" : "code",
    "source" : "val unbalancedData = data.filter(data(\"sentiment\") === 1)\n                         .sample(false, 0.25)\n                         .unionAll(data.filter(data(\"sentiment\") === 0))\nunbalancedData.groupBy(\"sentiment\").count.show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------+-----+\n|sentiment|count|\n+---------+-----+\n|        0| 6387|\n|        1| 1737|\n+---------+-----+\n\nunbalancedData: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, review: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 5
    } ]
  }, {
    "metadata" : {
      "id" : "E6BB169B270649E48A1C9AA9703680EB"
    },
    "cell_type" : "markdown",
    "source" : "For model quality assessment we will be using train test split with 75% of the data is used for training and 25% for testing. Two important notes:\n - It is good to have a reproducible split on train and test data (hint: use seed param).\n - it is good to preserve the percentage of samples for each class in each split/fold especially in the case of a highly unbalanced classes (follow [the ticket](https://issues.apache.org/jira/browse/SPARK-8971))."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "99230B53BEC64921BED57959C191EFB5"
    },
    "cell_type" : "code",
    "source" : "// Split the data into training and test sets (25% held out for testing)\nval Array(trainingData, testData) = unbalancedData.randomSplit(Array(0.75, 0.25), seed=547)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "trainingData: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, review: string]\ntestData: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, review: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 6
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "CB9F2F4810E64E4484D5C7624DFD9D8B"
    },
    "cell_type" : "code",
    "source" : "println(trainingData.groupBy(\"sentiment\").count.show)\nprintln(testData.groupBy(\"sentiment\").count.show)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------+-----+\n|sentiment|count|\n+---------+-----+\n|        0| 4757|\n|        1| 1293|\n+---------+-----+\n\n()\n+---------+-----+\n|sentiment|count|\n+---------+-----+\n|        0| 1630|\n|        1|  444|\n+---------+-----+\n\n()\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 7
    } ]
  }, {
    "metadata" : {
      "id" : "6FD8193001054F9D8782B456B9EDFC9D"
    },
    "cell_type" : "markdown",
    "source" : "One of the difficulties of this task is textual representation of the data because there is no universal method of feature extraction from the texts.\nIn the course of the lab we will get a few feature representations of the data which will be compared with each other."
  }, {
    "metadata" : {
      "id" : "59DD6E6369DF456BBB19643C25EB3699"
    },
    "cell_type" : "markdown",
    "source" : "## Bag of words"
  }, {
    "metadata" : {
      "id" : "DF4A6A340D7C4008852399BFA2B9CFC5"
    },
    "cell_type" : "markdown",
    "source" : "First we will try the simplest approach, namely [bag-of-words](https://en.wikipedia.org/wiki/Bag-of-words_model). With bag-of-words each text will be represented as a vector of numbers with the size equal to the size of the dictionary. On each position of the vector there will be a counter which represents how many times corresponding word was found in this text. This representation one can obtain using [CountVectorizer](http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.ml.feature.CountVectorizer).\n\nBut before making features from our data we have to perform data cleaning and text preprocessing steps.\nThere is a good point about data cleaning and text preprocessing in corresponding [tutorial](https://www.kaggle.com/c/word2vec-nlp-tutorial/details/part-1-for-beginners-bag-of-words):\n\n    When considering how to clean the text, we should think about the data problem we are trying to solve. For many problems, it makes sense to remove punctuation. On the other hand, in this case, we are tackling a sentiment analysis problem, and it is possible that \"!!!\" or \":-(\" could carry sentiment, and should be treated as words.\n    \nRemoving [stop words](https://en.wikipedia.org/wiki/Stop_words) while constructing bag-of-words is also fa good practice.\n\nAll these steps can be implemented using sequence of the following feature transformers:\n[RegexTokenizer](http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.ml.feature.RegexTokenizer)\nfollowed by [StopWordsRemover](http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.ml.feature.StopWordsRemover)\nfollowed by [CountVectorizer](http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.ml.feature.CountVectorizer)."
  }, {
    "metadata" : {
      "id" : "D8FBF41064EA48CDA468475BA81E7CEB"
    },
    "cell_type" : "markdown",
    "source" : "`RegexTokenizer` performs splitting/tokenization based on regular expression matching. To perform tokenization rather than splitting one neet to set parameter `gaps` to `false`.\n\n`StopWordsRemover` comes with provided list of stop words. Alternatively one can provide its own stop words list."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "07865C6B32334E7989BA2221E1A3A36D"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.feature.{RegexTokenizer, StopWordsRemover, CountVectorizer}\n\nval regexTokenizer = new RegexTokenizer()\n  .setInputCol(\"review\")\n  .setOutputCol(\"tokens\")\n  .setPattern(\"(\\\\w+|[!?]|:-?\\\\)|:-?\\\\()\")\n  .setGaps(false)\n\nval remover = new StopWordsRemover()\n  .setInputCol(\"tokens\")\n  .setOutputCol(\"filteredTokens\")\n\nval countVec = new CountVectorizer()\n  .setInputCol(\"filteredTokens\")\n  .setOutputCol(\"features\")\n\n\n// Chain tokenizer, stop words remover and CountVectorizer in a Pipeline\nval pipeline = new Pipeline()\n  .setStages(Array(regexTokenizer, \n                   remover, \n                   countVec))\n\nval transformModel = pipeline.fit(unbalancedData)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.feature.{RegexTokenizer, StopWordsRemover, CountVectorizer}\nregexTokenizer: org.apache.spark.ml.feature.RegexTokenizer = regexTok_ae05541cceec\nremover: org.apache.spark.ml.feature.StopWordsRemover = stopWords_af833fcaff96\ncountVec: org.apache.spark.ml.feature.CountVectorizer = cntVec_e6facde35b69\npipeline: org.apache.spark.ml.Pipeline = pipeline_2b787be8b9eb\ntransformModel: org.apache.spark.ml.PipelineModel = pipeline_2b787be8b9eb\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 8
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "4403C8ACCAD9414E8B8A388A0BC594B9"
    },
    "cell_type" : "code",
    "source" : "val trainBagOfWords = transformModel.transform(trainingData).select(\"id\", \"sentiment\", \"features\")\nval testBagOfWords = transformModel.transform(testData).select(\"id\", \"sentiment\", \"features\")\n\ntrainBagOfWords.limit(1).show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+--------+---------+--------------------+\n|      id|sentiment|            features|\n+--------+---------+--------------------+\n|10032_10|        1|(40937,[0,1,2,20,...|\n+--------+---------+--------------------+\n\ntrainBagOfWords: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector]\ntestBagOfWords: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 40
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "476FE34ED682482393CA8166A115F10F"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.mllib.linalg.SparseVector\n\nval featureSpaceDim = trainBagOfWords.select(\"features\").first.getAs[SparseVector](0).size\n\nprintln(s\"We've obtained $featureSpaceDim-dimensional feature space.\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "We've obtained 40937-dimensional feature space.\nimport org.apache.spark.mllib.linalg.SparseVector\nfeatureSpaceDim: Int = 40937\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 52
    } ]
  }, {
    "metadata" : {
      "id" : "55018FD2FA5C4E0C8FF0E95ED8247441"
    },
    "cell_type" : "markdown",
    "source" : "Now after we've obtained some representation of our text,  the next step is to train the classification algorithms and to compare them with each other. This requires understanding what are the metrics should be used to compare algorithms. We can consider, for example, the following metrics:\n\n- accuracy: $$ Accuracy = \\frac{1}{l}\\sum_{i=1}^l[y_i = \\hat{y}_i]$$ where $y_i$ — the true object class $x_i$, $\\hat{y}_i$ — he predicted class of the object.\n- precision: $$Precision = \\frac{TP}{TP + FP}$$\n- recall: $$Recall = \\frac{TP}{TP + FN}$$\n\nwhere *TP*, *FP*, *FN* and *TN* — the elements of a confusion matrix:\n\n| | y = 1 | y = 0 |\n|------|------|\n|   a(x) = 1  | TP| FP |\n|   a(x) = 0  | FN | TN |\n\nPlease note that accuracy and recall are calculated relative to a fixed class.\n\nOften, a classifier returns some *score* $b(x)$ of belonging to a given class, which is compared with fixed threshold *t*. Thus the classifier has the form $a(x) = [b(x) > t]$ and one can tune the threshold depending on specific needs. For example, there may be some cases where the threshold might need to be tuned so that it only predicts a class when the score is very high. Threshold tuning affects the quality of classification:\n - the higher $t$, the higher the precision, the lower the recall,\n - the lower $t$, the higher the recall, the lower the precesion.\n\n\n### Precision-Recall curve\nInteresting to know what will be the quality at all the different possible thresholds. So we can just compute precision-recall pairs for different thresholds. This will be precision-recall curve. We can achieve that using `BinaryClassificationMetrics` class from `org.apache.spark.mllib.evaluation` package. We can plot this curve with recall values on X-axis and precision values on Y-axis. This gives a good visualization of the quality of the algorithm.\n\n### ROC curve\n*ROC* curve is another method of visualizing the dependence of the quality of the algorithm from the threshold. In this case:\n  - X-axis: $FPR = \\frac{FP}{FP + TN}$\n  - Y-axis: $TPR = \\frac{TP}{TP + FN}$\n \nWhere *FPR* is false positive rate and *TPR* is true positive rate. Again `BinaryClassificationMetrics` provides appropriate method to compute this.\n\nIn addition, it is possible to measure the area under the curves: *auc_pr* and *auc_roc*, respectively."
  }, {
    "metadata" : {
      "id" : "AD5EDFC145DC4B588A1574ACD52BFF30"
    },
    "cell_type" : "markdown",
    "source" : "**Problem** What are disadvantages of using `accuracy` metric in case of unbalanced data? Train Logistic Regression and Random Forest with 500 trees on bag-of-words and build `precision-recall` and `ROC` curves on test data. Also compute *auc_pr* and *auc_roc*. Compare training times of the algorithms. Is there a significant difference in the quality of algorithms? Which method seems less applicable in this problem and why?"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "417DD06930FC40C8A061B6D116E5553B"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.ml.classification.{LogisticRegression, RandomForestClassifier}\nimport org.apache.spark.ml.feature.{StringIndexer, IndexToString}\nimport org.apache.spark.ml.evaluation.BinaryClassificationEvaluator\nimport org.apache.spark.ml.tuning.TrainValidationSplit\n\n\nval labelIndexer = new StringIndexer()\n  .setInputCol(\"sentiment\")\n  .setOutputCol(\"label\")\n  .fit(unbalancedData)\n\n// Convert predicted labels back to original labels.\nval labelConverter = new IndexToString()\n  .setInputCol(\"prediction\")\n  .setOutputCol(\"predictedSentiment\")\n  .setLabels(labelIndexer.labels)\n\n// Chain indexer, classifier and converter in a Pipeline\nval lr = new LogisticRegression()\nval lrPipeline = new Pipeline()\n  .setStages(Array(labelIndexer, lr, labelConverter))\n\nval rf = new RandomForestClassifier()\n  .setNumTrees(500)\nval rfPipeline = new Pipeline()\n  .setStages(Array(labelIndexer, rf, labelConverter))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.ml.classification.{LogisticRegression, RandomForestClassifier}\nimport org.apache.spark.ml.feature.{StringIndexer, IndexToString}\nimport org.apache.spark.ml.evaluation.BinaryClassificationEvaluator\nimport org.apache.spark.ml.tuning.TrainValidationSplit\nlabelIndexer: org.apache.spark.ml.feature.StringIndexerModel = strIdx_77ecb93b30b2\nlabelConverter: org.apache.spark.ml.feature.IndexToString = idxToStr_66ce3ec1e54c\nlr: org.apache.spark.ml.classification.LogisticRegression = logreg_f7e7b3315041\nlrPipeline: org.apache.spark.ml.Pipeline = pipeline_7a1144edb033\nrf: org.apache.spark.ml.classification.RandomForestClassifier = rfc_0d83da24c0d1\nrfPipeline: org.apache.spark.ml.Pipeline = pipeline_82ef2a5a9d9e\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 10
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "A7CAFEAEA18C461E8BF48328CBAB26B3"
    },
    "cell_type" : "code",
    "source" : "// train classifier\nval lrModel = lrPipeline.fit(trainBagOfWords)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "lrModel: org.apache.spark.ml.PipelineModel = pipeline_7a1144edb033\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 11
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "1C53964A129044348D131D6E185036B1"
    },
    "cell_type" : "code",
    "source" : "val rfModel = rfPipeline.fit(trainBagOfWords)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "rfModel: org.apache.spark.ml.PipelineModel = pipeline_82ef2a5a9d9e\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 12
    } ]
  }, {
    "metadata" : {
      "id" : "6D132E1F85284C4A81A4C6FFAA372A47"
    },
    "cell_type" : "markdown",
    "source" : "It's clear what Random Forest takes much more time to train. "
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "3200F4D40093464785E926A56EBACA07"
    },
    "cell_type" : "code",
    "source" : "// Make predictions.\nval lrPredictions = lrModel.transform(testBagOfWords)\nlrPredictions.select(\"sentiment\",\n                     \"label\",\n                     \"probability\",\n                     \"rawPrediction\",\n                     \"prediction\",\n                     \"predictedSentiment\")\n             .sample(false, 10.0 / testBagOfWords.count)\n             .show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------+-----+--------------------+--------------------+----------+------------------+\n|sentiment|label|         probability|       rawPrediction|prediction|predictedSentiment|\n+---------+-----+--------------------+--------------------+----------+------------------+\n|        1|  1.0|[6.66085654473797...|[-48.760623959265...|       1.0|                 1|\n|        1|  1.0|[0.99811662937715...|[6.27280707655248...|       0.0|                 0|\n|        0|  0.0|[0.00349114812929...|[-5.6540273635868...|       1.0|                 1|\n|        0|  0.0|[0.99999999994587...|[23.6397055134019...|       0.0|                 0|\n|        0|  0.0|[0.99989277678855...|[9.14049057917551...|       0.0|                 0|\n|        0|  0.0|[0.99999999999999...|[32.5774010993893...|       0.0|                 0|\n|        0|  0.0|[0.99999998123935...|[17.7915047258934...|       0.0|                 0|\n|        0|  0.0|[0.99999999999996...|[30.9574874802558...|       0.0|                 0|\n|        0|  0.0|[0.99995151873387...|[9.93428461775116...|       0.0|                 0|\n|        0|  0.0|[1.0,2.0869051819...|[59.1315302234905...|       0.0|                 0|\n|        0|  0.0|[1.0,1.1141959078...|[43.6409837809952...|       0.0|                 0|\n|        0|  0.0|[0.99999999894446...|[20.6692148882219...|       0.0|                 0|\n|        0|  0.0|[0.99985719720007...|[8.85390308796816...|       0.0|                 0|\n|        0|  0.0|[0.99994959921310...|[9.89545336788836...|       0.0|                 0|\n+---------+-----+--------------------+--------------------+----------+------------------+\n\nlrPredictions: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector, label: double, rawPrediction: vector, probability: vector, prediction: double, predictedSentiment: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 21
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "C5B95A260B674974ABBC12E45B17E511"
    },
    "cell_type" : "code",
    "source" : "val rfPredictions = rfModel.transform(testBagOfWords)\nrfPredictions.select(\"sentiment\",\n                     \"label\",\n                     \"probability\",\n                     \"rawPrediction\",\n                     \"prediction\",\n                     \"predictedSentiment\")\n             .sample(false, 10.0 / testBagOfWords.count)\n             .show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------+-----+--------------------+--------------------+----------+------------------+\n|sentiment|label|         probability|       rawPrediction|prediction|predictedSentiment|\n+---------+-----+--------------------+--------------------+----------+------------------+\n|        1|  1.0|[0.74677896027157...|[373.389480135787...|       0.0|                 0|\n|        0|  0.0|[0.78662752761460...|[393.313763807303...|       0.0|                 0|\n|        0|  0.0|[0.79498644008795...|[397.493220043976...|       0.0|                 0|\n|        0|  0.0|[0.81133801410065...|[405.669007050325...|       0.0|                 0|\n|        0|  0.0|[0.77251512405594...|[386.257562027972...|       0.0|                 0|\n|        0|  0.0|[0.78632375442023...|[393.161877210118...|       0.0|                 0|\n|        0|  0.0|[0.79874893377947...|[399.374466889736...|       0.0|                 0|\n|        0|  0.0|[0.78477449423182...|[392.387247115909...|       0.0|                 0|\n+---------+-----+--------------------+--------------------+----------+------------------+\n\nrfPredictions: org.apache.spark.sql.DataFrame = [id: string, sentiment: int, features: vector, label: double, rawPrediction: vector, probability: vector, prediction: double, predictedSentiment: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 28
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "4233F315C14E4CA78E57545A987E27AF"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\nimport org.apache.spark.mllib.linalg.DenseVector\n\n// prepare labels and predictions for metric model\nval lrPredictionAndLabels = lrPredictions\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(1), r.getAs[Double](1)))\n\nval rfPredictionAndLabels = rfPredictions\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(1), r.getAs[Double](1)))\n\n// Instantiate metrics object\nval lrMetrics = new BinaryClassificationMetrics(lrPredictionAndLabels)\nval rfMetrics = new BinaryClassificationMetrics(rfPredictionAndLabels)\n\n// Obtain precision-recall curve\nval lrPrecisionRecall = lrMetrics.pr\nval rfPrecisionRecall = rfMetrics.pr\n\n// Obtain roc curve\nval lrROC = lrMetrics.roc\nval rfROC = rfMetrics.roc",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\nimport org.apache.spark.mllib.linalg.DenseVector\nlrPredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[605] at map at <console>:113\nrfPredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[626] at map at <console>:117\nlrMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@1caf289\nrfMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@47d20d09\nlrPrecisionRecall: org.apache.spark.rdd.RDD[(Double, Double)] = UnionRDD[637] at union at BinaryClassificationMetrics.scala:108\nrfPrecisionRecall: org.apache.sp..."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 23
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "0ED46DBD7C334C9387153710C581BA8C"
    },
    "cell_type" : "code",
    "source" : "case class RecallPrecisionPoint(lrRecall: Double,\n                                lrPrecision: Double,\n                                rfRecall: Double,\n                                rfPrecision: Double)\nval sampleFraction = 0.2\nval recallPrecisionPoints = lrPrecisionRecall\n                              .sample(false, sampleFraction)\n                              .collect.zip(rfPrecisionRecall.sample(false, sampleFraction).collect)\n                              .map{\n  p => RecallPrecisionPoint(p._1._1, p._1._2, p._2._1, p._2._2)}\n\ncase class ROCPoint(lrFPR: Double,\n                    lrTPR: Double,\n                    rfFPR: Double,\n                    rfTPR: Double)\nval rocPoints = lrROC\n                  .sample(false,0.2)\n                  .collect.zip(rfROC.sample(false, sampleFraction).collect)\n                  .map{\n  p => ROCPoint(p._1._1, p._1._2, p._2._1, p._2._2)}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined class RecallPrecisionPoint\nsampleFraction: Double = 0.2\nrecallPrecisionPoints: Array[RecallPrecisionPoint] = Array(RecallPrecisionPoint(0.0,1.0,0.0,1.0), RecallPrecisionPoint(0.0022522522522522522,1.0,0.006756756756756757,1.0), RecallPrecisionPoint(0.013513513513513514,1.0,0.036036036036036036,0.9411764705882353), RecallPrecisionPoint(0.02027027027027027,0.9,0.04954954954954955,0.9565217391304348), RecallPrecisionPoint(0.033783783783783786,0.9375,0.05630630630630631,0.9615384615384616), RecallPrecisionPoint(0.036036036036036036,0.9411764705882353,0.08783783783783784,0.9069767441860465), RecallPrecisionPoint(0.04279279279279279,0.95,0.09009009009009009,0.9090909090909091), RecallPrecisionPoint(0.0472972972972973,0.9545454545454546,0.1036036036036036,0.92), RecallPrecisionPoint(0...."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 24
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab1745901744-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "F5F26B00E8C94D778C7C0A7590B5EB53"
    },
    "cell_type" : "code",
    "source" : "CustomC3Chart(recallPrecisionPoints,\n              \"\"\"{ data: { xs: {\n                            'lrPrecision': 'lrRecall',\n                            'rfPrecision': 'rfRecall',\n                         }\n                   },\n                   axis: {\n                      y: {\n                        label: 'precision'\n                      },\n                      x: {\n                         label: 'recall',\n                         tick: {\n                            count: 5\n                         }\n                      }\n                   },\n                   point: {\n                        show: false\n                   }\n                  }\"\"\")\n",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res63: notebook.front.widgets.CustomC3Chart[Array[RecallPrecisionPoint]] = <CustomC3Chart widget>\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon8e048b91101fecba3f5fd53b15ee3bf5&quot;,&quot;dataInit&quot;:[{&quot;lrRecall&quot;:0.0,&quot;lrPrecision&quot;:1.0,&quot;rfRecall&quot;:0.0,&quot;rfPrecision&quot;:1.0},{&quot;lrRecall&quot;:0.0022522522522522522,&quot;lrPrecision&quot;:1.0,&quot;rfRecall&quot;:0.006756756756756757,&quot;rfPrecision&quot;:1.0},{&quot;lrRecall&quot;:0.013513513513513514,&quot;lrPrecision&quot;:1.0,&quot;rfRecall&quot;:0.036036036036036036,&quot;rfPrecision&quot;:0.9411764705882353},{&quot;lrRecall&quot;:0.02027027027027027,&quot;lrPrecision&quot;:0.9,&quot;rfRecall&quot;:0.04954954954954955,&quot;rfPrecision&quot;:0.9565217391304348},{&quot;lrRecall&quot;:0.033783783783783786,&quot;lrPrecision&quot;:0.9375,&quot;rfRecall&quot;:0.05630630630630631,&quot;rfPrecision&quot;:0.9615384615384616},{&quot;lrRecall&quot;:0.036036036036036036,&quot;lrPrecision&quot;:0.9411764705882353,&quot;rfRecall&quot;:0.08783783783783784,&quot;rfPrecision&quot;:0.9069767441860465},{&quot;lrRecall&quot;:0.04279279279279279,&quot;lrPrecision&quot;:0.95,&quot;rfRecall&quot;:0.09009009009009009,&quot;rfPrecision&quot;:0.9090909090909091},{&quot;lrRecall&quot;:0.0472972972972973,&quot;lrPrecision&quot;:0.9545454545454546,&quot;rfRecall&quot;:0.1036036036036036,&quot;rfPrecision&quot;:0.92},{&quot;lrRecall&quot;:0.04954954954954955,&quot;lrPrecision&quot;:0.9565217391304348,&quot;rfRecall&quot;:0.10810810810810811,&quot;rfPrecision&quot;:0.8888888888888888},{&quot;lrRecall&quot;:0.0518018018018018,&quot;lrPrecision&quot;:0.9583333333333334,&quot;rfRecall&quot;:0.11261261261261261,&quot;rfPrecision&quot;:0.8771929824561403},{&quot;lrRecall&quot;:0.060810810810810814,&quot;lrPrecision&quot;:0.9642857142857143,&quot;rfRecall&quot;:0.12387387387387387,&quot;rfPrecision&quot;:0.8870967741935484},{&quot;lrRecall&quot;:0.07882882882882883,&quot;lrPrecision&quot;:0.9210526315789473,&quot;rfRecall&quot;:0.14414414414414414,&quot;rfPrecision&quot;:0.9014084507042254},{&quot;lrRecall&quot;:0.0945945945945946,&quot;lrPrecision&quot;:0.8571428571428571,&quot;rfRecall&quot;:0.16441441441441443,&quot;rfPrecision&quot;:0.8902439024390244},{&quot;lrRecall&quot;:0.11711711711711711,&quot;lrPrecision&quot;:0.8387096774193549,&quot;rfRecall&quot;:0.18693693693693694,&quot;rfPrecision&quot;:0.8924731182795699},{&quot;lrRecall&quot;:0.11936936936936937,&quot;lrPrecision&quot;:0.8412698412698413,&quot;rfRecall&quot;:0.19369369369369369,&quot;rfPrecision&quot;:0.8958333333333334},{&quot;lrRecall&quot;:0.14414414414414414,&quot;lrPrecision&quot;:0.8311688311688312,&quot;rfRecall&quot;:0.20495495495495494,&quot;rfPrecision&quot;:0.900990099009901},{&quot;lrRecall&quot;:0.1463963963963964,&quot;lrPrecision&quot;:0.8333333333333334,&quot;rfRecall&quot;:0.21846846846846846,&quot;rfPrecision&quot;:0.8738738738738738},{&quot;lrRecall&quot;:0.15315315315315314,&quot;lrPrecision&quot;:0.8292682926829268,&quot;rfRecall&quot;:0.22072072072072071,&quot;rfPrecision&quot;:0.875},{&quot;lrRecall&quot;:0.16666666666666666,&quot;lrPrecision&quot;:0.8314606741573034,&quot;rfRecall&quot;:0.22297297297297297,&quot;rfPrecision&quot;:0.8761061946902655},{&quot;lrRecall&quot;:0.18693693693693694,&quot;lrPrecision&quot;:0.83,&quot;rfRecall&quot;:0.23873873873873874,&quot;rfPrecision&quot;:0.8760330578512396},{&quot;lrRecall&quot;:0.19144144144144143,&quot;lrPrecision&quot;:0.8173076923076923,&quot;rfRecall&quot;:0.240990990990991,&quot;rfPrecision&quot;:0.8770491803278688},{&quot;lrRecall&quot;:0.19369369369369369,&quot;lrPrecision&quot;:0.819047619047619,&quot;rfRecall&quot;:0.25,&quot;rfPrecision&quot;:0.8740157480314961},{&quot;lrRecall&quot;:0.20945945945945946,&quot;lrPrecision&quot;:0.8303571428571429,&quot;rfRecall&quot;:0.25900900900900903,&quot;rfPrecision&quot;:0.8778625954198473},{&quot;lrRecall&quot;:0.21396396396396397,&quot;lrPrecision&quot;:0.8333333333333334,&quot;rfRecall&quot;:0.26126126126126126,&quot;rfPrecision&quot;:0.8787878787878788},{&quot;lrRecall&quot;:0.22747747747747749,&quot;lrPrecision&quot;:0.8347107438016529,&quot;rfRecall&quot;:0.2635135135135135,&quot;rfPrecision&quot;:0.8796992481203008},{&quot;lrRecall&quot;:0.24324324324324326,&quot;lrPrecision&quot;:0.8244274809160306,&quot;rfRecall&quot;:0.2702702702702703,&quot;rfPrecision&quot;:0.8759124087591241},{&quot;lrRecall&quot;:0.24774774774774774,&quot;lrPrecision&quot;:0.8208955223880597,&quot;rfRecall&quot;:0.2725225225225225,&quot;rfPrecision&quot;:0.8705035971223022},{&quot;lrRecall&quot;:0.268018018018018,&quot;lrPrecision&quot;:0.8263888888888888,&quot;rfRecall&quot;:0.2747747747747748,&quot;rfPrecision&quot;:0.8714285714285714},{&quot;lrRecall&quot;:0.27702702702702703,&quot;lrPrecision&quot;:0.831081081081081,&quot;rfRecall&quot;:0.27927927927927926,&quot;rfPrecision&quot;:0.8732394366197183},{&quot;lrRecall&quot;:0.28153153153153154,&quot;lrPrecision&quot;:0.8278145695364238,&quot;rfRecall&quot;:0.2882882882882883,&quot;rfPrecision&quot;:0.8707482993197279},{&quot;lrRecall&quot;:0.32207207207207206,&quot;lrPrecision&quot;:0.8171428571428572,&quot;rfRecall&quot;:0.2927927927927928,&quot;rfPrecision&quot;:0.8666666666666667},{&quot;lrRecall&quot;:0.32432432432432434,&quot;lrPrecision&quot;:0.8089887640449438,&quot;rfRecall&quot;:0.3063063063063063,&quot;rfPrecision&quot;:0.8662420382165605},{&quot;lrRecall&quot;:0.3716216216216216,&quot;lrPrecision&quot;:0.812807881773399,&quot;rfRecall&quot;:0.30855855855855857,&quot;rfPrecision&quot;:0.8670886075949367},{&quot;lrRecall&quot;:0.3738738738738739,&quot;lrPrecision&quot;:0.8058252427184466,&quot;rfRecall&quot;:0.3108108108108108,&quot;rfPrecision&quot;:0.8679245283018868},{&quot;lrRecall&quot;:0.3738738738738739,&quot;lrPrecision&quot;:0.7980769230769231,&quot;rfRecall&quot;:0.3153153153153153,&quot;rfPrecision&quot;:0.8641975308641975},{&quot;lrRecall&quot;:0.3783783783783784,&quot;lrPrecision&quot;:0.8,&quot;rfRecall&quot;:0.32432432432432434,&quot;rfPrecision&quot;:0.8674698795180723},{&quot;lrRecall&quot;:0.3783783783783784,&quot;lrPrecision&quot;:0.7962085308056872,&quot;rfRecall&quot;:0.3536036036036036,&quot;rfPrecision&quot;:0.8440860215053764},{&quot;lrRecall&quot;:0.38063063063063063,&quot;lrPrecision&quot;:0.7971698113207547,&quot;rfRecall&quot;:0.35585585585585583,&quot;rfPrecision&quot;:0.8449197860962567},{&quot;lrRecall&quot;:0.3918918918918919,&quot;lrPrecision&quot;:0.7909090909090909,&quot;rfRecall&quot;:0.3581081081081081,&quot;rfPrecision&quot;:0.8457446808510638},{&quot;lrRecall&quot;:0.3963963963963964,&quot;lrPrecision&quot;:0.7927927927927928,&quot;rfRecall&quot;:0.36261261261261263,&quot;rfPrecision&quot;:0.8429319371727748},{&quot;lrRecall&quot;:0.4009009009009009,&quot;lrPrecision&quot;:0.7911111111111111,&quot;rfRecall&quot;:0.38288288288288286,&quot;rfPrecision&quot;:0.8292682926829268},{&quot;lrRecall&quot;:0.4189189189189189,&quot;lrPrecision&quot;:0.7815126050420168,&quot;rfRecall&quot;:0.38963963963963966,&quot;rfPrecision&quot;:0.8317307692307693},{&quot;lrRecall&quot;:0.42342342342342343,&quot;lrPrecision&quot;:0.7768595041322314,&quot;rfRecall&quot;:0.38963963963963966,&quot;rfPrecision&quot;:0.8277511961722488},{&quot;lrRecall&quot;:0.4391891891891892,&quot;lrPrecision&quot;:0.7647058823529411,&quot;rfRecall&quot;:0.39414414414414417,&quot;rfPrecision&quot;:0.8254716981132075},{&quot;lrRecall&quot;:0.44594594594594594,&quot;lrPrecision&quot;:0.7615384615384615,&quot;rfRecall&quot;:0.4099099099099099,&quot;rfPrecision&quot;:0.8235294117647058},{&quot;lrRecall&quot;:0.44819819819819817,&quot;lrPrecision&quot;:0.7595419847328244,&quot;rfRecall&quot;:0.41216216216216217,&quot;rfPrecision&quot;:0.8243243243243243},{&quot;lrRecall&quot;:0.46846846846846846,&quot;lrPrecision&quot;:0.7619047619047619,&quot;rfRecall&quot;:0.42117117117117114,&quot;rfPrecision&quot;:0.8237885462555066},{&quot;lrRecall&quot;:0.4752252252252252,&quot;lrPrecision&quot;:0.7617328519855595,&quot;rfRecall&quot;:0.4391891891891892,&quot;rfPrecision&quot;:0.8227848101265823},{&quot;lrRecall&quot;:0.4864864864864865,&quot;lrPrecision&quot;:0.7632508833922261,&quot;rfRecall&quot;:0.4436936936936937,&quot;rfPrecision&quot;:0.8208333333333333},{&quot;lrRecall&quot;:0.49099099099099097,&quot;lrPrecision&quot;:0.7569444444444444,&quot;rfRecall&quot;:0.45045045045045046,&quot;rfPrecision&quot;:0.819672131147541},{&quot;lrRecall&quot;:0.5112612612612613,&quot;lrPrecision&quot;:0.7442622950819672,&quot;rfRecall&quot;:0.4527027027027027,&quot;rfPrecision&quot;:0.8204081632653061},{&quot;lrRecall&quot;:0.5135135135135135,&quot;lrPrecision&quot;:0.7450980392156863,&quot;rfRecall&quot;:0.4617117117117117,&quot;rfPrecision&quot;:0.8167330677290837},{&quot;lrRecall&quot;:0.5157657657657657,&quot;lrPrecision&quot;:0.7387096774193549,&quot;rfRecall&quot;:0.47072072072072074,&quot;rfPrecision&quot;:0.8132295719844358},{&quot;lrRecall&quot;:0.5225225225225225,&quot;lrPrecision&quot;:0.7365079365079366,&quot;rfRecall&quot;:0.47297297297297297,&quot;rfPrecision&quot;:0.8076923076923077},{&quot;lrRecall&quot;:0.527027027027027,&quot;lrPrecision&quot;:0.7381703470031545,&quot;rfRecall&quot;:0.48423423423423423,&quot;rfPrecision&quot;:0.8113207547169812},{&quot;lrRecall&quot;:0.527027027027027,&quot;lrPrecision&quot;:0.7358490566037735,&quot;rfRecall&quot;:0.48423423423423423,&quot;rfPrecision&quot;:0.8082706766917294},{&quot;lrRecall&quot;:0.536036036036036,&quot;lrPrecision&quot;:0.7345679012345679,&quot;rfRecall&quot;:0.49099099099099097,&quot;rfPrecision&quot;:0.8104089219330854},{&quot;lrRecall&quot;:0.5405405405405406,&quot;lrPrecision&quot;:0.7317073170731707,&quot;rfRecall&quot;:0.49774774774774777,&quot;rfPrecision&quot;:0.8065693430656934},{&quot;lrRecall&quot;:0.5427927927927928,&quot;lrPrecision&quot;:0.7303030303030303,&quot;rfRecall&quot;:0.5022522522522522,&quot;rfPrecision&quot;:0.7964285714285714},{&quot;lrRecall&quot;:0.5472972972972973,&quot;lrPrecision&quot;:0.7297297297297297,&quot;rfRecall&quot;:0.5067567567567568,&quot;rfPrecision&quot;:0.7922535211267606},{&quot;lrRecall&quot;:0.5495495495495496,&quot;lrPrecision&quot;:0.7261904761904762,&quot;rfRecall&quot;:0.509009009009009,&quot;rfPrecision&quot;:0.7820069204152249},{&quot;lrRecall&quot;:0.5675675675675675,&quot;lrPrecision&quot;:0.7220630372492837,&quot;rfRecall&quot;:0.5135135135135135,&quot;rfPrecision&quot;:0.7835051546391752},{&quot;lrRecall&quot;:0.5675675675675675,&quot;lrPrecision&quot;:0.7138810198300283,&quot;rfRecall&quot;:0.527027027027027,&quot;rfPrecision&quot;:0.7748344370860927},{&quot;lrRecall&quot;:0.5765765765765766,&quot;lrPrecision&quot;:0.7150837988826816,&quot;rfRecall&quot;:0.5315315315315315,&quot;rfPrecision&quot;:0.7763157894736842},{&quot;lrRecall&quot;:0.5788288288288288,&quot;lrPrecision&quot;:0.7099447513812155,&quot;rfRecall&quot;:0.536036036036036,&quot;rfPrecision&quot;:0.7727272727272727},{&quot;lrRecall&quot;:0.5833333333333334,&quot;lrPrecision&quot;:0.7115384615384616,&quot;rfRecall&quot;:0.5382882882882883,&quot;rfPrecision&quot;:0.7684887459807074},{&quot;lrRecall&quot;:0.5900900900900901,&quot;lrPrecision&quot;:0.7081081081081081,&quot;rfRecall&quot;:0.5405405405405406,&quot;rfPrecision&quot;:0.7667731629392971},{&quot;lrRecall&quot;:0.5923423423423423,&quot;lrPrecision&quot;:0.7050938337801609,&quot;rfRecall&quot;:0.5563063063063063,&quot;rfPrecision&quot;:0.7694704049844237},{&quot;lrRecall&quot;:0.5990990990990991,&quot;lrPrecision&quot;:0.6927083333333334,&quot;rfRecall&quot;:0.5585585585585585,&quot;rfPrecision&quot;:0.7584097859327217},{&quot;lrRecall&quot;:0.6013513513513513,&quot;lrPrecision&quot;:0.6917098445595855,&quot;rfRecall&quot;:0.5698198198198198,&quot;rfPrecision&quot;:0.7529761904761905},{&quot;lrRecall&quot;:0.6036036036036037,&quot;lrPrecision&quot;:0.6907216494845361,&quot;rfRecall&quot;:0.5743243243243243,&quot;rfPrecision&quot;:0.75},{&quot;lrRecall&quot;:0.6126126126126126,&quot;lrPrecision&quot;:0.6851385390428212,&quot;rfRecall&quot;:0.581081081081081,&quot;rfPrecision&quot;:0.7371428571428571},{&quot;lrRecall&quot;:0.6126126126126126,&quot;lrPrecision&quot;:0.6834170854271356,&quot;rfRecall&quot;:0.5833333333333334,&quot;rfPrecision&quot;:0.7337110481586402},{&quot;lrRecall&quot;:0.6126126126126126,&quot;lrPrecision&quot;:0.674937965260546,&quot;rfRecall&quot;:0.5945945945945946,&quot;rfPrecision&quot;:0.7292817679558011},{&quot;lrRecall&quot;:0.6148648648648649,&quot;lrPrecision&quot;:0.6724137931034483,&quot;rfRecall&quot;:0.5945945945945946,&quot;rfPrecision&quot;:0.7252747252747253},{&quot;lrRecall&quot;:0.6193693693693694,&quot;lrPrecision&quot;:0.6740196078431373,&quot;rfRecall&quot;:0.5945945945945946,&quot;rfPrecision&quot;:0.7232876712328767},{&quot;lrRecall&quot;:0.6193693693693694,&quot;lrPrecision&quot;:0.6707317073170732,&quot;rfRecall&quot;:0.5968468468468469,&quot;rfPrecision&quot;:0.7220708446866485},{&quot;lrRecall&quot;:0.6193693693693694,&quot;lrPrecision&quot;:0.6674757281553398,&quot;rfRecall&quot;:0.6013513513513513,&quot;rfPrecision&quot;:0.717741935483871},{&quot;lrRecall&quot;:0.6261261261261262,&quot;lrPrecision&quot;:0.6666666666666666,&quot;rfRecall&quot;:0.6036036036036037,&quot;rfPrecision&quot;:0.7165775401069518},{&quot;lrRecall&quot;:0.6283783783783784,&quot;lrPrecision&quot;:0.66270783847981,&quot;rfRecall&quot;:0.6058558558558559,&quot;rfPrecision&quot;:0.7023498694516971},{&quot;lrRecall&quot;:0.6351351351351351,&quot;lrPrecision&quot;:0.6604215456674473,&quot;rfRecall&quot;:0.6103603603603603,&quot;rfPrecision&quot;:0.7002583979328165},{&quot;lrRecall&quot;:0.6486486486486487,&quot;lrPrecision&quot;:0.6545454545454545,&quot;rfRecall&quot;:0.6216216216216216,&quot;rfPrecision&quot;:0.6952141057934509},{&quot;lrRecall&quot;:0.6509009009009009,&quot;lrPrecision&quot;:0.655328798185941,&quot;rfRecall&quot;:0.6238738738738738,&quot;rfPrecision&quot;:0.6959798994974874},{&quot;lrRecall&quot;:0.6509009009009009,&quot;lrPrecision&quot;:0.6538461538461539,&quot;rfRecall&quot;:0.6238738738738738,&quot;rfPrecision&quot;:0.6942355889724311},{&quot;lrRecall&quot;:0.6531531531531531,&quot;lrPrecision&quot;:0.6531531531531531,&quot;rfRecall&quot;:0.6283783783783784,&quot;rfPrecision&quot;:0.6940298507462687},{&quot;lrRecall&quot;:0.6554054054054054,&quot;lrPrecision&quot;:0.6539325842696629,&quot;rfRecall&quot;:0.6328828828828829,&quot;rfPrecision&quot;:0.6904176904176904},{&quot;lrRecall&quot;:0.6576576576576577,&quot;lrPrecision&quot;:0.6517857142857143,&quot;rfRecall&quot;:0.6351351351351351,&quot;rfPrecision&quot;:0.6878048780487804},{&quot;lrRecall&quot;:0.6576576576576577,&quot;lrPrecision&quot;:0.6503340757238307,&quot;rfRecall&quot;:0.6396396396396397,&quot;rfPrecision&quot;:0.6761904761904762},{&quot;lrRecall&quot;:0.6644144144144144,&quot;lrPrecision&quot;:0.6483516483516484,&quot;rfRecall&quot;:0.6396396396396397,&quot;rfPrecision&quot;:0.6745843230403801},{&quot;lrRecall&quot;:0.668918918918919,&quot;lrPrecision&quot;:0.648471615720524,&quot;rfRecall&quot;:0.6418918918918919,&quot;rfPrecision&quot;:0.6705882352941176},{&quot;lrRecall&quot;:0.668918918918919,&quot;lrPrecision&quot;:0.6470588235294118,&quot;rfRecall&quot;:0.6486486486486487,&quot;rfPrecision&quot;:0.6682134570765661},{&quot;lrRecall&quot;:0.6711711711711712,&quot;lrPrecision&quot;:0.645021645021645,&quot;rfRecall&quot;:0.6509009009009009,&quot;rfPrecision&quot;:0.6674364896073903},{&quot;lrRecall&quot;:0.6711711711711712,&quot;lrPrecision&quot;:0.6408602150537634,&quot;rfRecall&quot;:0.6576576576576577,&quot;rfPrecision&quot;:0.6576576576576577},{&quot;lrRecall&quot;:0.6869369369369369,&quot;lrPrecision&quot;:0.6301652892561983,&quot;rfRecall&quot;:0.6599099099099099,&quot;rfPrecision&quot;:0.6569506726457399},{&quot;lrRecall&quot;:0.6891891891891891,&quot;lrPrecision&quot;:0.6270491803278688,&quot;rfRecall&quot;:0.6644144144144144,&quot;rfPrecision&quot;:0.6541019955654102},{&quot;lrRecall&quot;:0.6914414414414415,&quot;lrPrecision&quot;:0.6278118609406953,&quot;rfRecall&quot;:0.6644144144144144,&quot;rfPrecision&quot;:0.6526548672566371},{&quot;lrRecall&quot;:0.6914414414414415,&quot;lrPrecision&quot;:0.6265306122448979,&quot;rfRecall&quot;:0.6644144144144144,&quot;rfPrecision&quot;:0.6512141280353201},{&quot;lrRecall&quot;:0.6936936936936937,&quot;lrPrecision&quot;:0.6260162601626016,&quot;rfRecall&quot;:0.6666666666666666,&quot;rfPrecision&quot;:0.6519823788546255},{&quot;lrRecall&quot;:0.6936936936936937,&quot;lrPrecision&quot;:0.6247464503042597,&quot;rfRecall&quot;:0.6779279279279279,&quot;rfPrecision&quot;:0.6515151515151515},{&quot;lrRecall&quot;:0.6959459459459459,&quot;lrPrecision&quot;:0.6255060728744939,&quot;rfRecall&quot;:0.6801801801801802,&quot;rfPrecision&quot;:0.648068669527897},{&quot;lrRecall&quot;:0.6981981981981982,&quot;lrPrecision&quot;:0.6237424547283702,&quot;rfRecall&quot;:0.6846846846846847,&quot;rfPrecision&quot;:0.6440677966101694},{&quot;lrRecall&quot;:0.7004504504504504,&quot;lrPrecision&quot;:0.6244979919678715,&quot;rfRecall&quot;:0.6981981981981982,&quot;rfPrecision&quot;:0.6391752577319587},{&quot;lrRecall&quot;:0.7004504504504504,&quot;lrPrecision&quot;:0.6232464929859719,&quot;rfRecall&quot;:0.7072072072072072,&quot;rfPrecision&quot;:0.6369168356997972},{&quot;lrRecall&quot;:0.7004504504504504,&quot;lrPrecision&quot;:0.6207584830339321,&quot;rfRecall&quot;:0.7094594594594594,&quot;rfPrecision&quot;:0.6338028169014085},{&quot;lrRecall&quot;:0.7027027027027027,&quot;lrPrecision&quot;:0.6153846153846154,&quot;rfRecall&quot;:0.713963963963964,&quot;rfPrecision&quot;:0.634},{&quot;lrRecall&quot;:0.7027027027027027,&quot;lrPrecision&quot;:0.6141732283464567,&quot;rfRecall&quot;:0.722972972972973,&quot;rfPrecision&quot;:0.6331360946745562},{&quot;lrRecall&quot;:0.7094594594594594,&quot;lrPrecision&quot;:0.6104651162790697,&quot;rfRecall&quot;:0.7274774774774775,&quot;rfPrecision&quot;:0.6284046692607004},{&quot;lrRecall&quot;:0.7094594594594594,&quot;lrPrecision&quot;:0.6092843326885881,&quot;rfRecall&quot;:0.7274774774774775,&quot;rfPrecision&quot;:0.6271844660194175},{&quot;lrRecall&quot;:0.7094594594594594,&quot;lrPrecision&quot;:0.6081081081081081,&quot;rfRecall&quot;:0.7342342342342343,&quot;rfPrecision&quot;:0.6221374045801527},{&quot;lrRecall&quot;:0.7094594594594594,&quot;lrPrecision&quot;:0.6057692307692307,&quot;rfRecall&quot;:0.7522522522522522,&quot;rfPrecision&quot;:0.6151012891344383},{&quot;lrRecall&quot;:0.7184684684684685,&quot;lrPrecision&quot;:0.6053130929791272,&quot;rfRecall&quot;:0.7545045045045045,&quot;rfPrecision&quot;:0.6158088235294118},{&quot;lrRecall&quot;:0.7184684684684685,&quot;lrPrecision&quot;:0.5951492537313433,&quot;rfRecall&quot;:0.7612612612612613,&quot;rfPrecision&quot;:0.6123188405797102},{&quot;lrRecall&quot;:0.7252252252252253,&quot;lrPrecision&quot;:0.5930018416206262,&quot;rfRecall&quot;:0.7702702702702703,&quot;rfPrecision&quot;:0.6129032258064516},{&quot;lrRecall&quot;:0.7252252252252253,&quot;lrPrecision&quot;:0.5919117647058824,&quot;rfRecall&quot;:0.7702702702702703,&quot;rfPrecision&quot;:0.6107142857142858},{&quot;lrRecall&quot;:0.7274774774774775,&quot;lrPrecision&quot;:0.5915750915750916,&quot;rfRecall&quot;:0.7702702702702703,&quot;rfPrecision&quot;:0.6096256684491979},{&quot;lrRecall&quot;:0.7297297297297297,&quot;lrPrecision&quot;:0.5912408759124088,&quot;rfRecall&quot;:0.7725225225225225,&quot;rfPrecision&quot;:0.6081560283687943},{&quot;lrRecall&quot;:0.7364864864864865,&quot;lrPrecision&quot;:0.5913200723327305,&quot;rfRecall&quot;:0.7747747747747747,&quot;rfPrecision&quot;:0.607773851590106},{&quot;lrRecall&quot;:0.7387387387387387,&quot;lrPrecision&quot;:0.590990990990991,&quot;rfRecall&quot;:0.777027027027027,&quot;rfPrecision&quot;:0.6031468531468531},{&quot;lrRecall&quot;:0.7387387387387387,&quot;lrPrecision&quot;:0.5888689407540395,&quot;rfRecall&quot;:0.7837837837837838,&quot;rfPrecision&quot;:0.6020761245674741},{&quot;lrRecall&quot;:0.740990990990991,&quot;lrPrecision&quot;:0.5782073813708261,&quot;rfRecall&quot;:0.7837837837837838,&quot;rfPrecision&quot;:0.6010362694300518},{&quot;lrRecall&quot;:0.740990990990991,&quot;lrPrecision&quot;:0.5761821366024519,&quot;rfRecall&quot;:0.7837837837837838,&quot;rfPrecision&quot;:0.5918367346938775},{&quot;lrRecall&quot;:0.740990990990991,&quot;lrPrecision&quot;:0.5751748251748252,&quot;rfRecall&quot;:0.7837837837837838,&quot;rfPrecision&quot;:0.5898305084745763},{&quot;lrRecall&quot;:0.7432432432432432,&quot;lrPrecision&quot;:0.5729166666666666,&quot;rfRecall&quot;:0.786036036036036,&quot;rfPrecision&quot;:0.5875420875420876},{&quot;lrRecall&quot;:0.7454954954954955,&quot;lrPrecision&quot;:0.5726643598615917,&quot;rfRecall&quot;:0.7882882882882883,&quot;rfPrecision&quot;:0.5882352941176471},{&quot;lrRecall&quot;:0.7454954954954955,&quot;lrPrecision&quot;:0.5706896551724138,&quot;rfRecall&quot;:0.7882882882882883,&quot;rfPrecision&quot;:0.587248322147651},{&quot;lrRecall&quot;:0.75,&quot;lrPrecision&quot;:0.5711835334476844,&quot;rfRecall&quot;:0.7927927927927928,&quot;rfPrecision&quot;:0.5856905158069884},{&quot;lrRecall&quot;:0.7545045045045045,&quot;lrPrecision&quot;:0.568760611205433,&quot;rfRecall&quot;:0.7927927927927928,&quot;rfPrecision&quot;:0.5808580858085809},{&quot;lrRecall&quot;:0.759009009009009,&quot;lrPrecision&quot;:0.5626043405676127,&quot;rfRecall&quot;:0.7972972972972973,&quot;rfPrecision&quot;:0.5793780687397708},{&quot;lrRecall&quot;:0.759009009009009,&quot;lrPrecision&quot;:0.5551894563426688,&quot;rfRecall&quot;:0.8018018018018018,&quot;rfPrecision&quot;:0.5760517799352751},{&quot;lrRecall&quot;:0.7680180180180181,&quot;lrPrecision&quot;:0.5447284345047924,&quot;rfRecall&quot;:0.8040540540540541,&quot;rfPrecision&quot;:0.5748792270531401},{&quot;lrRecall&quot;:0.7747747747747747,&quot;lrPrecision&quot;:0.5417322834645669,&quot;rfRecall&quot;:0.8040540540540541,&quot;rfPrecision&quot;:0.5721153846153846},{&quot;lrRecall&quot;:0.7747747747747747,&quot;lrPrecision&quot;:0.5383411580594679,&quot;rfRecall&quot;:0.8040540540540541,&quot;rfPrecision&quot;:0.5712},{&quot;lrRecall&quot;:0.777027027027027,&quot;lrPrecision&quot;:0.5382215288611545,&quot;rfRecall&quot;:0.8108108108108109,&quot;rfPrecision&quot;:0.569620253164557},{&quot;lrRecall&quot;:0.777027027027027,&quot;lrPrecision&quot;:0.5373831775700935,&quot;rfRecall&quot;:0.8153153153153153,&quot;rfPrecision&quot;:0.5700787401574803},{&quot;lrRecall&quot;:0.786036036036036,&quot;lrPrecision&quot;:0.5336391437308868,&quot;rfRecall&quot;:0.8198198198198198,&quot;rfPrecision&quot;:0.5625965996908809},{&quot;lrRecall&quot;:0.7927927927927928,&quot;lrPrecision&quot;:0.5325264750378215,&quot;rfRecall&quot;:0.8220720720720721,&quot;rfPrecision&quot;:0.5606758832565284},{&quot;lrRecall&quot;:0.795045045045045,&quot;lrPrecision&quot;:0.5324283559577677,&quot;rfRecall&quot;:0.8288288288288288,&quot;rfPrecision&quot;:0.5459940652818991},{&quot;lrRecall&quot;:0.7995495495495496,&quot;lrPrecision&quot;:0.5298507462686567,&quot;rfRecall&quot;:0.831081081081081,&quot;rfPrecision&quot;:0.5434462444771723},{&quot;lrRecall&quot;:0.7995495495495496,&quot;lrPrecision&quot;:0.5290611028315947,&quot;rfRecall&quot;:0.831081081081081,&quot;rfPrecision&quot;:0.5418502202643172},{&quot;lrRecall&quot;:0.8018018018018018,&quot;lrPrecision&quot;:0.5258493353028065,&quot;rfRecall&quot;:0.831081081081081,&quot;rfPrecision&quot;:0.5379008746355685},{&quot;lrRecall&quot;:0.8018018018018018,&quot;lrPrecision&quot;:0.5212298682284041,&quot;rfRecall&quot;:0.831081081081081,&quot;rfPrecision&quot;:0.537117903930131},{&quot;lrRecall&quot;:0.8018018018018018,&quot;lrPrecision&quot;:0.5197080291970803,&quot;rfRecall&quot;:0.8333333333333334,&quot;rfPrecision&quot;:0.5362318840579711},{&quot;lrRecall&quot;:0.8040540540540541,&quot;lrPrecision&quot;:0.5188953488372093,&quot;rfRecall&quot;:0.8333333333333334,&quot;rfPrecision&quot;:0.5346820809248555},{&quot;lrRecall&quot;:0.8040540540540541,&quot;lrPrecision&quot;:0.516642547033285,&quot;rfRecall&quot;:0.8333333333333334,&quot;rfPrecision&quot;:0.5316091954022989},{&quot;lrRecall&quot;:0.8040540540540541,&quot;lrPrecision&quot;:0.5144092219020173,&quot;rfRecall&quot;:0.8333333333333334,&quot;rfPrecision&quot;:0.5300859598853869},{&quot;lrRecall&quot;:0.8040540540540541,&quot;lrPrecision&quot;:0.5136690647482014,&quot;rfRecall&quot;:0.8333333333333334,&quot;rfPrecision&quot;:0.5263157894736842},{&quot;lrRecall&quot;:0.8040540540540541,&quot;lrPrecision&quot;:0.5129310344827587,&quot;rfRecall&quot;:0.8333333333333334,&quot;rfPrecision&quot;:0.5203938115330521},{&quot;lrRecall&quot;:0.8040540540540541,&quot;lrPrecision&quot;:0.51,&quot;rfRecall&quot;:0.8378378378378378,&quot;rfPrecision&quot;:0.5195530726256983},{&quot;lrRecall&quot;:0.8040540540540541,&quot;lrPrecision&quot;:0.504950495049505,&quot;rfRecall&quot;:0.8400900900900901,&quot;rfPrecision&quot;:0.5187760778859527},{&quot;lrRecall&quot;:0.8085585585585585,&quot;lrPrecision&quot;:0.5049226441631505,&quot;rfRecall&quot;:0.8445945945945946,&quot;rfPrecision&quot;:0.5165289256198347},{&quot;lrRecall&quot;:0.8108108108108109,&quot;lrPrecision&quot;:0.5027932960893855,&quot;rfRecall&quot;:0.8490990990990991,&quot;rfPrecision&quot;:0.5157318741450069},{&quot;lrRecall&quot;:0.8153153153153153,&quot;lrPrecision&quot;:0.5020804438280166,&quot;rfRecall&quot;:0.8513513513513513,&quot;rfPrecision&quot;:0.5149863760217984},{&quot;lrRecall&quot;:0.8175675675675675,&quot;lrPrecision&quot;:0.5020746887966805,&quot;rfRecall&quot;:0.8513513513513513,&quot;rfPrecision&quot;:0.5128900949796472},{&quot;lrRecall&quot;:0.8220720720720721,&quot;lrPrecision&quot;:0.5020632737276479,&quot;rfRecall&quot;:0.8603603603603603,&quot;rfPrecision&quot;:0.5073041168658698},{&quot;lrRecall&quot;:0.8265765765765766,&quot;lrPrecision&quot;:0.5,&quot;rfRecall&quot;:0.8603603603603603,&quot;rfPrecision&quot;:0.506631299734748},{&quot;lrRecall&quot;:0.8265765765765766,&quot;lrPrecision&quot;:0.4993197278911565,&quot;rfRecall&quot;:0.8648648648648649,&quot;rfPrecision&quot;:0.5026178010471204},{&quot;lrRecall&quot;:0.8265765765765766,&quot;lrPrecision&quot;:0.4932795698924731,&quot;rfRecall&quot;:0.8648648648648649,&quot;rfPrecision&quot;:0.5019607843137255},{&quot;lrRecall&quot;:0.8265765765765766,&quot;lrPrecision&quot;:0.49261744966442955,&quot;rfRecall&quot;:0.8648648648648649,&quot;rfPrecision&quot;:0.4987012987012987},{&quot;lrRecall&quot;:0.8288288288288288,&quot;lrPrecision&quot;:0.4919786096256685,&quot;rfRecall&quot;:0.8671171171171171,&quot;rfPrecision&quot;:0.49169859514687103},{&quot;lrRecall&quot;:0.831081081081081,&quot;lrPrecision&quot;:0.49069148936170215,&quot;rfRecall&quot;:0.8693693693693694,&quot;rfPrecision&quot;:0.49171974522292994},{&quot;lrRecall&quot;:0.831081081081081,&quot;lrPrecision&quot;:0.48938992042440316,&quot;rfRecall&quot;:0.8761261261261262,&quot;rfPrecision&quot;:0.48443337484433374},{&quot;lrRecall&quot;:0.8333333333333334,&quot;lrPrecision&quot;:0.48812664907651715,&quot;rfRecall&quot;:0.8783783783783784,&quot;rfPrecision&quot;:0.48507462686567165},{&quot;lrRecall&quot;:0.8333333333333334,&quot;lrPrecision&quot;:0.4868421052631579,&quot;rfRecall&quot;:0.8783783783783784,&quot;rfPrecision&quot;:0.4838709677419355},{&quot;lrRecall&quot;:0.8355855855855856,&quot;lrPrecision&quot;:0.4818181818181818,&quot;rfRecall&quot;:0.8783783783783784,&quot;rfPrecision&quot;:0.483271375464684},{&quot;lrRecall&quot;:0.8355855855855856,&quot;lrPrecision&quot;:0.48119325551232167,&quot;rfRecall&quot;:0.8806306306306306,&quot;rfPrecision&quot;:0.4839108910891089},{&quot;lrRecall&quot;:0.8378378378378378,&quot;lrPrecision&quot;:0.48186528497409326,&quot;rfRecall&quot;:0.8851351351351351,&quot;rfPrecision&quot;:0.48518518518518516},{&quot;lrRecall&quot;:0.8378378378378378,&quot;lrPrecision&quot;:0.4793814432989691,&quot;rfRecall&quot;:0.8851351351351351,&quot;rfPrecision&quot;:0.4845869297163995},{&quot;lrRecall&quot;:0.8378378378378378,&quot;lrPrecision&quot;:0.47692307692307695,&quot;rfRecall&quot;:0.8851351351351351,&quot;rfPrecision&quot;:0.4810281517747858},{&quot;lrRecall&quot;:0.8423423423423423,&quot;lrPrecision&quot;:0.47522236340533675,&quot;rfRecall&quot;:0.8918918918918919,&quot;rfPrecision&quot;:0.474251497005988},{&quot;lrRecall&quot;:0.8423423423423423,&quot;lrPrecision&quot;:0.4722222222222222,&quot;rfRecall&quot;:0.8918918918918919,&quot;rfPrecision&quot;:0.4731182795698925},{&quot;lrRecall&quot;:0.8513513513513513,&quot;lrPrecision&quot;:0.46782178217821785,&quot;rfRecall&quot;:0.8918918918918919,&quot;rfPrecision&quot;:0.4697508896797153},{&quot;lrRecall&quot;:0.8513513513513513,&quot;lrPrecision&quot;:0.46494464944649444,&quot;rfRecall&quot;:0.8918918918918919,&quot;rfPrecision&quot;:0.4686390532544379},{&quot;lrRecall&quot;:0.8536036036036037,&quot;lrPrecision&quot;:0.45552884615384615,&quot;rfRecall&quot;:0.8941441441441441,&quot;rfPrecision&quot;:0.46926713947990545},{&quot;lrRecall&quot;:0.8536036036036037,&quot;lrPrecision&quot;:0.45172824791418353,&quot;rfRecall&quot;:0.8941441441441441,&quot;rfPrecision&quot;:0.465962441314554},{&quot;lrRecall&quot;:0.8581081081081081,&quot;lrPrecision&quot;:0.450887573964497,&quot;rfRecall&quot;:0.8941441441441441,&quot;rfPrecision&quot;:0.4632438739789965},{&quot;lrRecall&quot;:0.8581081081081081,&quot;lrPrecision&quot;:0.4492924528301887,&quot;rfRecall&quot;:0.8963963963963963,&quot;rfPrecision&quot;:0.4590542099192618},{&quot;lrRecall&quot;:0.8581081081081081,&quot;lrPrecision&quot;:0.44823529411764707,&quot;rfRecall&quot;:0.8986486486486487,&quot;rfPrecision&quot;:0.45914844649021863},{&quot;lrRecall&quot;:0.8603603603603603,&quot;lrPrecision&quot;:0.44730679156908665,&quot;rfRecall&quot;:0.9009009009009009,&quot;rfPrecision&quot;:0.45662100456621},{&quot;lrRecall&quot;:0.8603603603603603,&quot;lrPrecision&quot;:0.44678362573099417,&quot;rfRecall&quot;:0.9076576576576577,&quot;rfPrecision&quot;:0.45230078563411896},{&quot;lrRecall&quot;:0.8603603603603603,&quot;lrPrecision&quot;:0.4447031431897555,&quot;rfRecall&quot;:0.9076576576576577,&quot;rfPrecision&quot;:0.4497767857142857},{&quot;lrRecall&quot;:0.8648648648648649,&quot;lrPrecision&quot;:0.4439306358381503,&quot;rfRecall&quot;:0.9076576576576577,&quot;rfPrecision&quot;:0.4492753623188406},{&quot;lrRecall&quot;:0.8693693693693694,&quot;lrPrecision&quot;:0.4447004608294931,&quot;rfRecall&quot;:0.9076576576576577,&quot;rfPrecision&quot;:0.4487750556792873},{&quot;lrRecall&quot;:0.8693693693693694,&quot;lrPrecision&quot;:0.4396355353075171,&quot;rfRecall&quot;:0.9099099099099099,&quot;rfPrecision&quot;:0.44640883977900553},{&quot;lrRecall&quot;:0.8716216216216216,&quot;lrPrecision&quot;:0.43977272727272726,&quot;rfRecall&quot;:0.9144144144144144,&quot;rfPrecision&quot;:0.44371584699453553},{&quot;lrRecall&quot;:0.8716216216216216,&quot;lrPrecision&quot;:0.4363021420518602,&quot;rfRecall&quot;:0.9144144144144144,&quot;rfPrecision&quot;:0.4432314410480349},{&quot;lrRecall&quot;:0.8716216216216216,&quot;lrPrecision&quot;:0.431438127090301,&quot;rfRecall&quot;:0.9144144144144144,&quot;rfPrecision&quot;:0.44274809160305345},{&quot;lrRecall&quot;:0.8716216216216216,&quot;lrPrecision&quot;:0.4309576837416481,&quot;rfRecall&quot;:0.9144144144144144,&quot;rfPrecision&quot;:0.43844492440604754},{&quot;lrRecall&quot;:0.8716216216216216,&quot;lrPrecision&quot;:0.42904656319290463,&quot;rfRecall&quot;:0.9144144144144144,&quot;rfPrecision&quot;:0.4375},{&quot;lrRecall&quot;:0.8716216216216216,&quot;lrPrecision&quot;:0.4276243093922652,&quot;rfRecall&quot;:0.9166666666666666,&quot;rfPrecision&quot;:0.4376344086021505},{&quot;lrRecall&quot;:0.8716216216216216,&quot;lrPrecision&quot;:0.4271523178807947,&quot;rfRecall&quot;:0.9234234234234234,&quot;rfPrecision&quot;:0.4334038054968288},{&quot;lrRecall&quot;:0.8716216216216216,&quot;lrPrecision&quot;:0.4262114537444934,&quot;rfRecall&quot;:0.9234234234234234,&quot;rfPrecision&quot;:0.43294614572333684},{&quot;lrRecall&quot;:0.8738738738738738,&quot;lrPrecision&quot;:0.424507658643326,&quot;rfRecall&quot;:0.9234234234234234,&quot;rfPrecision&quot;:0.43248945147679324},{&quot;lrRecall&quot;:0.8738738738738738,&quot;lrPrecision&quot;:0.42311886586695746,&quot;rfRecall&quot;:0.9256756756756757,&quot;rfPrecision&quot;:0.4299163179916318},{&quot;lrRecall&quot;:0.8738738738738738,&quot;lrPrecision&quot;:0.4199134199134199,&quot;rfRecall&quot;:0.9256756756756757,&quot;rfPrecision&quot;:0.42946708463949845},{&quot;lrRecall&quot;:0.8738738738738738,&quot;lrPrecision&quot;:0.4190064794816415,&quot;rfRecall&quot;:0.9301801801801802,&quot;rfPrecision&quot;:0.4262125902992776},{&quot;lrRecall&quot;:0.8738738738738738,&quot;lrPrecision&quot;:0.4167561761546724,&quot;rfRecall&quot;:0.9301801801801802,&quot;rfPrecision&quot;:0.4253347064881565},{&quot;lrRecall&quot;:0.8738738738738738,&quot;lrPrecision&quot;:0.41452991452991456,&quot;rfRecall&quot;:0.9324324324324325,&quot;rfPrecision&quot;:0.42374616171954965},{&quot;lrRecall&quot;:0.8761261261261262,&quot;lrPrecision&quot;:0.41382978723404257,&quot;rfRecall&quot;:0.9324324324324325,&quot;rfPrecision&quot;:0.4215885947046843},{&quot;lrRecall&quot;:0.8783783783783784,&quot;lrPrecision&quot;:0.4140127388535032,&quot;rfRecall&quot;:0.9346846846846847,&quot;rfPrecision&quot;:0.4204660587639311},{&quot;lrRecall&quot;:0.8828828828828829,&quot;lrPrecision&quot;:0.41133263378803775,&quot;rfRecall&quot;:0.9346846846846847,&quot;rfPrecision&quot;:0.4200404858299595},{&quot;lrRecall&quot;:0.8828828828828829,&quot;lrPrecision&quot;:0.4091858037578288,&quot;rfRecall&quot;:0.9346846846846847,&quot;rfPrecision&quot;:0.4196157735085945},{&quot;lrRecall&quot;:0.8828828828828829,&quot;lrPrecision&quot;:0.4074844074844075,&quot;rfRecall&quot;:0.9346846846846847,&quot;rfPrecision&quot;:0.4179254783484391},{&quot;lrRecall&quot;:0.8851351351351351,&quot;lrPrecision&quot;:0.40349075975359344,&quot;rfRecall&quot;:0.9369369369369369,&quot;rfPrecision&quot;:0.41767068273092367},{&quot;lrRecall&quot;:0.8941441441441441,&quot;lrPrecision&quot;:0.3985943775100402,&quot;rfRecall&quot;:0.9369369369369369,&quot;rfPrecision&quot;:0.41434262948207173},{&quot;lrRecall&quot;:0.8986486486486487,&quot;lrPrecision&quot;:0.3993993993993994,&quot;rfRecall&quot;:0.9391891891891891,&quot;rfPrecision&quot;:0.40962671905697445},{&quot;lrRecall&quot;:0.9031531531531531,&quot;lrPrecision&quot;:0.39742319127849357,&quot;rfRecall&quot;:0.9391891891891891,&quot;rfPrecision&quot;:0.4056420233463035},{&quot;lrRecall&quot;:0.9031531531531531,&quot;lrPrecision&quot;:0.39624505928853754,&quot;rfRecall&quot;:0.9391891891891891,&quot;rfPrecision&quot;:0.40485436893203886},{&quot;lrRecall&quot;:0.9099099099099099,&quot;lrPrecision&quot;:0.3933787731256086,&quot;rfRecall&quot;:0.9391891891891891,&quot;rfPrecision&quot;:0.40446168768186225},{&quot;lrRecall&quot;:0.9121621621621622,&quot;lrPrecision&quot;:0.3935860058309038,&quot;rfRecall&quot;:0.9391891891891891,&quot;rfPrecision&quot;:0.4025096525096525},{&quot;lrRecall&quot;:0.918918918918919,&quot;lrPrecision&quot;:0.39043062200956935,&quot;rfRecall&quot;:0.9391891891891891,&quot;rfPrecision&quot;:0.4021215043394407},{&quot;lrRecall&quot;:0.9279279279279279,&quot;lrPrecision&quot;:0.389413988657845,&quot;rfRecall&quot;:0.9414414414414415,&quot;rfPrecision&quot;:0.40115163147792704},{&quot;lrRecall&quot;:0.9279279279279279,&quot;lrPrecision&quot;:0.3883129123468426,&quot;rfRecall&quot;:0.9436936936936937,&quot;rfPrecision&quot;:0.3994280266920877},{&quot;lrRecall&quot;:0.9301801801801802,&quot;lrPrecision&quot;:0.3863423760523854,&quot;rfRecall&quot;:0.9436936936936937,&quot;rfPrecision&quot;:0.3982889733840304},{&quot;lrRecall&quot;:0.9301801801801802,&quot;lrPrecision&quot;:0.385981308411215,&quot;rfRecall&quot;:0.9436936936936937,&quot;rfPrecision&quot;:0.39791073124406456},{&quot;lrRecall&quot;:0.9301801801801802,&quot;lrPrecision&quot;:0.38382899628252787,&quot;rfRecall&quot;:0.9436936936936937,&quot;rfPrecision&quot;:0.3971563981042654},{&quot;lrRecall&quot;:0.9301801801801802,&quot;lrPrecision&quot;:0.38347260909935005,&quot;rfRecall&quot;:0.9436936936936937,&quot;rfPrecision&quot;:0.39678030303030304},{&quot;lrRecall&quot;:0.9301801801801802,&quot;lrPrecision&quot;:0.3824074074074074,&quot;rfRecall&quot;:0.9459459459459459,&quot;rfPrecision&quot;:0.39585296889726673},{&quot;lrRecall&quot;:0.9301801801801802,&quot;lrPrecision&quot;:0.38099630996309963,&quot;rfRecall&quot;:0.9459459459459459,&quot;rfPrecision&quot;:0.3954802259887006},{&quot;lrRecall&quot;:0.9301801801801802,&quot;lrPrecision&quot;:0.379247015610652,&quot;rfRecall&quot;:0.9481981981981982,&quot;rfPrecision&quot;:0.3956766917293233},{&quot;lrRecall&quot;:0.9301801801801802,&quot;lrPrecision&quot;:0.3778591033851784,&quot;rfRecall&quot;:0.9481981981981982,&quot;rfPrecision&quot;:0.39530516431924884},{&quot;lrRecall&quot;:0.9301801801801802,&quot;lrPrecision&quot;:0.3771689497716895,&quot;rfRecall&quot;:0.9481981981981982,&quot;rfPrecision&quot;:0.39419475655430714},{&quot;lrRecall&quot;:0.9301801801801802,&quot;lrPrecision&quot;:0.3751135331516803,&quot;rfRecall&quot;:0.9481981981981982,&quot;rfPrecision&quot;:0.3938260056127222},{&quot;lrRecall&quot;:0.9301801801801802,&quot;lrPrecision&quot;:0.37477313974591653,&quot;rfRecall&quot;:0.9481981981981982,&quot;rfPrecision&quot;:0.39053803339517623},{&quot;lrRecall&quot;:0.9301801801801802,&quot;lrPrecision&quot;:0.3744333635539438,&quot;rfRecall&quot;:0.9481981981981982,&quot;rfPrecision&quot;:0.3901760889712697},{&quot;lrRecall&quot;:0.9324324324324325,&quot;lrPrecision&quot;:0.3709677419354839,&quot;rfRecall&quot;:0.9481981981981982,&quot;rfPrecision&quot;:0.38981481481481484},{&quot;lrRecall&quot;:0.9324324324324325,&quot;lrPrecision&quot;:0.37063563115487913,&quot;rfRecall&quot;:0.9481981981981982,&quot;rfPrecision&quot;:0.38909426987060997},{&quot;lrRecall&quot;:0.9324324324324325,&quot;lrPrecision&quot;:0.370304114490161,&quot;rfRecall&quot;:0.9481981981981982,&quot;rfPrecision&quot;:0.38837638376383765},{&quot;lrRecall&quot;:0.9346846846846847,&quot;lrPrecision&quot;:0.3702051739518287,&quot;rfRecall&quot;:0.9481981981981982,&quot;rfPrecision&quot;:0.3869485294117647},{&quot;lrRecall&quot;:0.9369369369369369,&quot;lrPrecision&quot;:0.368141592920354,&quot;rfRecall&quot;:0.9481981981981982,&quot;rfPrecision&quot;:0.38517840805123515},{&quot;lrRecall&quot;:0.9369369369369369,&quot;lrPrecision&quot;:0.3674911660777385,&quot;rfRecall&quot;:0.9481981981981982,&quot;rfPrecision&quot;:0.3837739288969918},{&quot;lrRecall&quot;:0.9369369369369369,&quot;lrPrecision&quot;:0.36716681376875554,&quot;rfRecall&quot;:0.9504504504504504,&quot;rfPrecision&quot;:0.38121047877145436},{&quot;lrRecall&quot;:0.9369369369369369,&quot;lrPrecision&quot;:0.3652326602282704,&quot;rfRecall&quot;:0.9504504504504504,&quot;rfPrecision&quot;:0.38086642599277976},{&quot;lrRecall&quot;:0.9391891891891891,&quot;lrPrecision&quot;:0.3648293963254593,&quot;rfRecall&quot;:0.9504504504504504,&quot;rfPrecision&quot;:0.37881508078994613},{&quot;lrRecall&quot;:0.9391891891891891,&quot;lrPrecision&quot;:0.36451048951048953,&quot;rfRecall&quot;:0.9504504504504504,&quot;rfPrecision&quot;:0.37779767233661593},{&quot;lrRecall&quot;:0.9391891891891891,&quot;lrPrecision&quot;:0.36041486603284356,&quot;rfRecall&quot;:0.9504504504504504,&quot;rfPrecision&quot;:0.3771224307417337},{&quot;lrRecall&quot;:0.9391891891891891,&quot;lrPrecision&quot;:0.3585554600171969,&quot;rfRecall&quot;:0.9504504504504504,&quot;rfPrecision&quot;:0.3757791629563669},{&quot;lrRecall&quot;:0.9391891891891891,&quot;lrPrecision&quot;:0.3564102564102564,&quot;rfRecall&quot;:0.9504504504504504,&quot;rfPrecision&quot;:0.3747779751332149},{&quot;lrRecall&quot;:0.9391891891891891,&quot;lrPrecision&quot;:0.35519591141396933,&quot;rfRecall&quot;:0.9504504504504504,&quot;rfPrecision&quot;:0.3688811188811189},{&quot;lrRecall&quot;:0.9391891891891891,&quot;lrPrecision&quot;:0.3542905692438403,&quot;rfRecall&quot;:0.9504504504504504,&quot;rfPrecision&quot;:0.367595818815331},{&quot;lrRecall&quot;:0.9391891891891891,&quot;lrPrecision&quot;:0.35279187817258884,&quot;rfRecall&quot;:0.9504504504504504,&quot;rfPrecision&quot;:0.3663194444444444},{&quot;lrRecall&quot;:0.9414414414414415,&quot;lrPrecision&quot;:0.35185185185185186,&quot;rfRecall&quot;:0.9504504504504504,&quot;rfPrecision&quot;:0.36536796536796534},{&quot;lrRecall&quot;:0.9436936936936937,&quot;lrPrecision&quot;:0.3506276150627615,&quot;rfRecall&quot;:0.9504504504504504,&quot;rfPrecision&quot;:0.36379310344827587},{&quot;lrRecall&quot;:0.9436936936936937,&quot;lrPrecision&quot;:0.3494578815679733,&quot;rfRecall&quot;:0.9504504504504504,&quot;rfPrecision&quot;:0.36316695352839934},{&quot;lrRecall&quot;:0.9436936936936937,&quot;lrPrecision&quot;:0.3488759367194005,&quot;rfRecall&quot;:0.9527027027027027,&quot;rfPrecision&quot;:0.362778730703259},{&quot;lrRecall&quot;:0.9459459459459459,&quot;lrPrecision&quot;:0.34739454094292804,&quot;rfRecall&quot;:0.954954954954955,&quot;rfPrecision&quot;:0.36054421768707484},{&quot;lrRecall&quot;:0.9459459459459459,&quot;lrPrecision&quot;:0.34596375617792424,&quot;rfRecall&quot;:0.954954954954955,&quot;rfPrecision&quot;:0.3602378929481733},{&quot;lrRecall&quot;:0.9459459459459459,&quot;lrPrecision&quot;:0.345679012345679,&quot;rfRecall&quot;:0.954954954954955,&quot;rfPrecision&quot;:0.3587140439932318},{&quot;lrRecall&quot;:0.9459459459459459,&quot;lrPrecision&quot;:0.3448275862068966,&quot;rfRecall&quot;:0.954954954954955,&quot;rfPrecision&quot;:0.3584108199492815},{&quot;lrRecall&quot;:0.9504504504504504,&quot;lrPrecision&quot;:0.34477124183006536,&quot;rfRecall&quot;:0.954954954954955,&quot;rfPrecision&quot;:0.357504215851602},{&quot;lrRecall&quot;:0.9504504504504504,&quot;lrPrecision&quot;:0.3442088091353997,&quot;rfRecall&quot;:0.9572072072072072,&quot;rfPrecision&quot;:0.3562447611064543},{&quot;lrRecall&quot;:0.9504504504504504,&quot;lrPrecision&quot;:0.3397745571658615,&quot;rfRecall&quot;:0.9594594594594594,&quot;rfPrecision&quot;:0.35529608006672225},{&quot;lrRecall&quot;:0.9504504504504504,&quot;lrPrecision&quot;:0.33868378812199035,&quot;rfRecall&quot;:0.9594594594594594,&quot;rfPrecision&quot;:0.355},{&quot;lrRecall&quot;:0.9504504504504504,&quot;lrPrecision&quot;:0.33814102564102566,&quot;rfRecall&quot;:0.9594594594594594,&quot;rfPrecision&quot;:0.35323383084577115},{&quot;lrRecall&quot;:0.9504504504504504,&quot;lrPrecision&quot;:0.33733013589128696,&quot;rfRecall&quot;:0.9617117117117117,&quot;rfPrecision&quot;:0.35376967688483846},{&quot;lrRecall&quot;:0.954954954954955,&quot;lrPrecision&quot;:0.3370429252782194,&quot;rfRecall&quot;:0.9662162162162162,&quot;rfPrecision&quot;:0.3530864197530864},{&quot;lrRecall&quot;:0.954954954954955,&quot;lrPrecision&quot;:0.334913112164297,&quot;rfRecall&quot;:0.9662162162162162,&quot;rfPrecision&quot;:0.352506162695152},{&quot;lrRecall&quot;:0.954954954954955,&quot;lrPrecision&quot;:0.3346487766377269,&quot;rfRecall&quot;:0.9662162162162162,&quot;rfPrecision&quot;:0.35192780968006565},{&quot;lrRecall&quot;:0.954954954954955,&quot;lrPrecision&quot;:0.3341213553979511,&quot;rfRecall&quot;:0.9662162162162162,&quot;rfPrecision&quot;:0.35135135135135137},{&quot;lrRecall&quot;:0.9572072072072072,&quot;lrPrecision&quot;:0.33022533022533024,&quot;rfRecall&quot;:0.9662162162162162,&quot;rfPrecision&quot;:0.3507767784137367},{&quot;lrRecall&quot;:0.9594594594594594,&quot;lrPrecision&quot;:0.32972136222910214,&quot;rfRecall&quot;:0.9662162162162162,&quot;rfPrecision&quot;:0.34906427990235966},{&quot;lrRecall&quot;:0.9617117117117117,&quot;lrPrecision&quot;:0.32947530864197533,&quot;rfRecall&quot;:0.9662162162162162,&quot;rfPrecision&quot;:0.34849715678310317},{&quot;lrRecall&quot;:0.963963963963964,&quot;lrPrecision&quot;:0.327217125382263,&quot;rfRecall&quot;:0.9662162162162162,&quot;rfPrecision&quot;:0.34764991896272285},{&quot;lrRecall&quot;:0.963963963963964,&quot;lrPrecision&quot;:0.32646834477498093,&quot;rfRecall&quot;:0.9662162162162162,&quot;rfPrecision&quot;:0.3473684210526316},{&quot;lrRecall&quot;:0.963963963963964,&quot;lrPrecision&quot;:0.32473444613050073,&quot;rfRecall&quot;:0.9662162162162162,&quot;rfPrecision&quot;:0.34596774193548385},{&quot;lrRecall&quot;:0.963963963963964,&quot;lrPrecision&quot;:0.3218045112781955,&quot;rfRecall&quot;:0.9752252252252253,&quot;rfPrecision&quot;:0.3428345209817894},{&quot;lrRecall&quot;:0.9662162162162162,&quot;lrPrecision&quot;:0.32158920539730135,&quot;rfRecall&quot;:0.9752252252252253,&quot;rfPrecision&quot;:0.3414826498422713},{&quot;lrRecall&quot;:0.9662162162162162,&quot;lrPrecision&quot;:0.32062780269058294,&quot;rfRecall&quot;:0.9752252252252253,&quot;rfPrecision&quot;:0.3409448818897638},{&quot;lrRecall&quot;:0.9662162162162162,&quot;lrPrecision&quot;:0.3182492581602374,&quot;rfRecall&quot;:0.9752252252252253,&quot;rfPrecision&quot;:0.34067663257277736},{&quot;lrRecall&quot;:0.9662162162162162,&quot;lrPrecision&quot;:0.31801334321719793,&quot;rfRecall&quot;:0.9752252252252253,&quot;rfPrecision&quot;:0.33987441130298274},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.3178122690317812,&quot;rfRecall&quot;:0.9752252252252253,&quot;rfPrecision&quot;:0.33881064162754304},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.3166421207658321,&quot;rfRecall&quot;:0.9752252252252253,&quot;rfPrecision&quot;:0.33828125},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.315712187958884,&quot;rfRecall&quot;:0.9752252252252253,&quot;rfPrecision&quot;:0.33801717408274784},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.31386861313868614,&quot;rfRecall&quot;:0.9752252252252253,&quot;rfPrecision&quot;:0.3377535101404056},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.3118201595358956,&quot;rfRecall&quot;:0.9752252252252253,&quot;rfPrecision&quot;:0.33670295489891133},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.3084648493543759,&quot;rfRecall&quot;:0.9752252252252253,&quot;rfPrecision&quot;:0.3351393188854489},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.30692362598144185,&quot;rfRecall&quot;:0.9752252252252253,&quot;rfPrecision&quot;:0.3341049382716049},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.3067047075606277,&quot;rfRecall&quot;:0.9752252252252253,&quot;rfPrecision&quot;:0.3333333333333333},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.30604982206405695,&quot;rfRecall&quot;:0.9774774774774775,&quot;rfPrecision&quot;:0.33358954650269024},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.30518097941802697,&quot;rfRecall&quot;:0.9774774774774775,&quot;rfPrecision&quot;:0.33307751343054487},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.3049645390070922,&quot;rfRecall&quot;:0.9774774774774775,&quot;rfPrecision&quot;:0.33054074638233055},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.3041018387553041,&quot;rfRecall&quot;:0.9797297297297297,&quot;rfPrecision&quot;:0.32929598788796366},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.30303030303030304,&quot;rfRecall&quot;:0.9797297297297297,&quot;rfPrecision&quot;:0.32756024096385544},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.30260380014074595,&quot;rfRecall&quot;:0.9797297297297297,&quot;rfPrecision&quot;:0.32706766917293234},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.299860529986053,&quot;rfRecall&quot;:0.9797297297297297,&quot;rfPrecision&quot;:0.3241430700447094},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.2992345163535143,&quot;rfRecall&quot;:0.9797297297297297,&quot;rfPrecision&quot;:0.3236607142857143},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.29840388619014574,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.3241839762611276},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.296551724137931,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.323943661971831},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.2963473466574776,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.32250922509225094},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.29573590096286106,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.3206162876008804},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.29553264604810997,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.31991215226939973},{&quot;lrRecall&quot;:0.9684684684684685,&quot;lrPrecision&quot;:0.29532967032967034,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.31921110299488675},{&quot;lrRecall&quot;:0.9707207207207207,&quot;lrPrecision&quot;:0.29581331503088537,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.3180494905385735},{&quot;lrRecall&quot;:0.9707207207207207,&quot;lrPrecision&quot;:0.2956104252400549,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.31781818181818183},{&quot;lrRecall&quot;:0.9707207207207207,&quot;lrPrecision&quot;:0.295407813570939,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.31689630166787525},{&quot;lrRecall&quot;:0.9707207207207207,&quot;lrPrecision&quot;:0.2948016415868673,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.31666666666666665},{&quot;lrRecall&quot;:0.9707207207207207,&quot;lrPrecision&quot;:0.2939972714870396,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.3164373642288197},{&quot;lrRecall&quot;:0.9707207207207207,&quot;lrPrecision&quot;:0.2931972789115646,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.31597975415762836},{&quot;lrRecall&quot;:0.9707207207207207,&quot;lrPrecision&quot;:0.29121621621621624,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.3157514450867052},{&quot;lrRecall&quot;:0.9707207207207207,&quot;lrPrecision&quot;:0.29062710721510454,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.3146148308135349},{&quot;lrRecall&quot;:0.9707207207207207,&quot;lrPrecision&quot;:0.28848728246318606,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.3141624730409777},{&quot;lrRecall&quot;:0.9707207207207207,&quot;lrPrecision&quot;:0.2867598137059215,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.31281317108088763},{&quot;lrRecall&quot;:0.972972972972973,&quot;lrPrecision&quot;:0.28590337524818,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.31214285714285717},{&quot;lrRecall&quot;:0.9752252252252253,&quot;lrPrecision&quot;:0.28618638466622603,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.3114754098360656},{&quot;lrRecall&quot;:0.9752252252252253,&quot;lrPrecision&quot;:0.285997357992074,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.31125356125356124},{&quot;lrRecall&quot;:0.9752252252252253,&quot;lrPrecision&quot;:0.2858085808580858,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.3086158192090395},{&quot;lrRecall&quot;:0.9752252252252253,&quot;lrPrecision&quot;:0.2837483617300131,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.30666666666666664},{&quot;lrRecall&quot;:0.9752252252252253,&quot;lrPrecision&quot;:0.2828216851730895,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.30580825752274315},{&quot;lrRecall&quot;:0.9752252252252253,&quot;lrPrecision&quot;:0.28263707571801566,&quot;rfRecall&quot;:0.9842342342342343,&quot;rfPrecision&quot;:0.3051675977653631},{&quot;lrRecall&quot;:0.9752252252252253,&quot;lrPrecision&quot;:0.2819010416666667,&quot;rfRecall&quot;:0.9864864864864865,&quot;rfPrecision&quot;:0.3048016701461378},{&quot;lrRecall&quot;:0.9752252252252253,&quot;lrPrecision&quot;:0.2808041504539559,&quot;rfRecall&quot;:0.9864864864864865,&quot;rfPrecision&quot;:0.3045897079276773},{&quot;lrRecall&quot;:0.9774774774774775,&quot;lrPrecision&quot;:0.2801807617817947,&quot;rfRecall&quot;:0.9864864864864865,&quot;rfPrecision&quot;:0.30437804030576787},{&quot;lrRecall&quot;:0.9774774774774775,&quot;lrPrecision&quot;:0.2790996784565916,&quot;rfRecall&quot;:0.9864864864864865,&quot;rfPrecision&quot;:0.30311418685121105},{&quot;lrRecall&quot;:0.9797297297297297,&quot;lrPrecision&quot;:0.27884615384615385,&quot;rfRecall&quot;:0.9864864864864865,&quot;rfPrecision&quot;:0.3029045643153527},{&quot;lrRecall&quot;:0.9797297297297297,&quot;lrPrecision&quot;:0.2786675208199872,&quot;rfRecall&quot;:0.9864864864864865,&quot;rfPrecision&quot;:0.30248618784530384},{&quot;lrRecall&quot;:0.9797297297297297,&quot;lrPrecision&quot;:0.2777777777777778,&quot;rfRecall&quot;:0.9864864864864865,&quot;rfPrecision&quot;:0.30103092783505153},{&quot;lrRecall&quot;:0.9797297297297297,&quot;lrPrecision&quot;:0.27636594663278274,&quot;rfRecall&quot;:0.9864864864864865,&quot;rfPrecision&quot;:0.3008241758241758},{&quot;lrRecall&quot;:0.9797297297297297,&quot;lrPrecision&quot;:0.27531645569620256,&quot;rfRecall&quot;:0.9864864864864865,&quot;rfPrecision&quot;:0.3002056202878684},{&quot;lrRecall&quot;:0.9797297297297297,&quot;lrPrecision&quot;:0.27479469361970943,&quot;rfRecall&quot;:0.9887387387387387,&quot;rfPrecision&quot;:0.29843643779741674},{&quot;lrRecall&quot;:0.9797297297297297,&quot;lrPrecision&quot;:0.2741020793950851,&quot;rfRecall&quot;:0.9887387387387387,&quot;rfPrecision&quot;:0.2982336956521739},{&quot;lrRecall&quot;:0.9797297297297297,&quot;lrPrecision&quot;:0.2737570799244808,&quot;rfRecall&quot;:0.990990990990991,&quot;rfPrecision&quot;:0.29850746268656714},{&quot;lrRecall&quot;:0.9797297297297297,&quot;lrPrecision&quot;:0.27324120603015073,&quot;rfRecall&quot;:0.990990990990991,&quot;rfPrecision&quot;:0.2970965563808238},{&quot;lrRecall&quot;:0.9797297297297297,&quot;lrPrecision&quot;:0.27153558052434457,&quot;rfRecall&quot;:0.9932432432432432,&quot;rfPrecision&quot;:0.2961719274680994},{&quot;lrRecall&quot;:0.9797297297297297,&quot;lrPrecision&quot;:0.27102803738317754,&quot;rfRecall&quot;:0.9932432432432432,&quot;rfPrecision&quot;:0.29360852197070575},{&quot;lrRecall&quot;:0.9797297297297297,&quot;lrPrecision&quot;:0.27085927770859275,&quot;rfRecall&quot;:0.9932432432432432,&quot;rfPrecision&quot;:0.2914738929279577},{&quot;lrRecall&quot;:0.9819819819819819,&quot;lrPrecision&quot;:0.2688039457459926,&quot;rfRecall&quot;:0.9932432432432432,&quot;rfPrecision&quot;:0.29108910891089107},{&quot;lrRecall&quot;:0.9819819819819819,&quot;lrPrecision&quot;:0.2684729064039409,&quot;rfRecall&quot;:0.9932432432432432,&quot;rfPrecision&quot;:0.2895600787918582},{&quot;lrRecall&quot;:0.9819819819819819,&quot;lrPrecision&quot;:0.26715686274509803,&quot;rfRecall&quot;:0.9932432432432432,&quot;rfPrecision&quot;:0.28729641693811075},{&quot;lrRecall&quot;:0.9819819819819819,&quot;lrPrecision&quot;:0.2668298653610771,&quot;rfRecall&quot;:0.9932432432432432,&quot;rfPrecision&quot;:0.28692257644762525},{&quot;lrRecall&quot;:0.9819819819819819,&quot;lrPrecision&quot;:0.2661782661782662,&quot;rfRecall&quot;:0.9932432432432432,&quot;rfPrecision&quot;:0.28599221789883267},{&quot;lrRecall&quot;:0.9819819819819819,&quot;lrPrecision&quot;:0.2658536585365854,&quot;rfRecall&quot;:0.9932432432432432,&quot;rfPrecision&quot;:0.2858068697342839},{&quot;lrRecall&quot;:0.9819819819819819,&quot;lrPrecision&quot;:0.26217678893565843,&quot;rfRecall&quot;:0.9932432432432432,&quot;rfPrecision&quot;:0.28396651641983256},{&quot;lrRecall&quot;:0.9819819819819819,&quot;lrPrecision&quot;:0.26107784431137726,&quot;rfRecall&quot;:0.9932432432432432,&quot;rfPrecision&quot;:0.28360128617363345},{&quot;lrRecall&quot;:0.9819819819819819,&quot;lrPrecision&quot;:0.2599880739415623,&quot;rfRecall&quot;:0.9932432432432432,&quot;rfPrecision&quot;:0.2832369942196532},{&quot;lrRecall&quot;:0.9819819819819819,&quot;lrPrecision&quot;:0.25921521997621877,&quot;rfRecall&quot;:0.9932432432432432,&quot;rfPrecision&quot;:0.2819693094629156},{&quot;lrRecall&quot;:0.9819819819819819,&quot;lrPrecision&quot;:0.2576832151300236,&quot;rfRecall&quot;:0.9932432432432432,&quot;rfPrecision&quot;:0.28125},{&quot;lrRecall&quot;:0.9819819819819819,&quot;lrPrecision&quot;:0.25737898465171194,&quot;rfRecall&quot;:0.9932432432432432,&quot;rfPrecision&quot;:0.2808917197452229},{&quot;lrRecall&quot;:0.9819819819819819,&quot;lrPrecision&quot;:0.25707547169811323,&quot;rfRecall&quot;:0.9954954954954955,&quot;rfPrecision&quot;:0.27939317319848295},{&quot;lrRecall&quot;:0.9819819819819819,&quot;lrPrecision&quot;:0.25677267373380447,&quot;rfRecall&quot;:0.9954954954954955,&quot;rfPrecision&quot;:0.27904040404040403},{&quot;lrRecall&quot;:0.9819819819819819,&quot;lrPrecision&quot;:0.2560187903699354,&quot;rfRecall&quot;:0.9954954954954955,&quot;rfPrecision&quot;:0.27886435331230286},{&quot;lrRecall&quot;:0.9842342342342343,&quot;lrPrecision&quot;:0.25615474794841736,&quot;rfRecall&quot;:0.9954954954954955,&quot;rfPrecision&quot;:0.27816236626809315},{&quot;lrRecall&quot;:0.9842342342342343,&quot;lrPrecision&quot;:0.2552570093457944,&quot;rfRecall&quot;:0.9954954954954955,&quot;rfPrecision&quot;:0.27607745159275454},{&quot;lrRecall&quot;:0.9842342342342343,&quot;lrPrecision&quot;:0.25289351851851855,&quot;rfRecall&quot;:0.9954954954954955,&quot;rfPrecision&quot;:0.2759051186017478},{&quot;lrRecall&quot;:0.9842342342342343,&quot;lrPrecision&quot;:0.25274725274725274,&quot;rfRecall&quot;:0.9954954954954955,&quot;rfPrecision&quot;:0.2753894080996885},{&quot;lrRecall&quot;:0.9842342342342343,&quot;lrPrecision&quot;:0.25216387766878245,&quot;rfRecall&quot;:0.9954954954954955,&quot;rfPrecision&quot;:0.27487562189054726},{&quot;lrRecall&quot;:0.9864864864864865,&quot;lrPrecision&quot;:0.2518688901667625,&quot;rfRecall&quot;:0.9954954954954955,&quot;rfPrecision&quot;:0.2745341614906832},{&quot;lrRecall&quot;:0.9864864864864865,&quot;lrPrecision&quot;:0.25143513203214696,&quot;rfRecall&quot;:0.9954954954954955,&quot;rfPrecision&quot;:0.2740235585864848},{&quot;lrRecall&quot;:0.9864864864864865,&quot;lrPrecision&quot;:0.2502857142857143,&quot;rfRecall&quot;:0.9954954954954955,&quot;rfPrecision&quot;:0.2733457019171305},{&quot;lrRecall&quot;:0.9864864864864865,&quot;lrPrecision&quot;:0.2501427755568247,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2729513247073321},{&quot;lrRecall&quot;:0.9864864864864865,&quot;lrPrecision&quot;:0.24829931972789115,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.27144607843137253},{&quot;lrRecall&quot;:0.9864864864864865,&quot;lrPrecision&quot;:0.24773755656108598,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2694647201946472},{&quot;lrRecall&quot;:0.9887387387387387,&quot;lrPrecision&quot;:0.2476029328821207,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2683222289521502},{&quot;lrRecall&quot;:0.9887387387387387,&quot;lrPrecision&quot;:0.2469066366704162,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.265746850629874},{&quot;lrRecall&quot;:0.9887387387387387,&quot;lrPrecision&quot;:0.24676784710511523,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2655875299760192},{&quot;lrRecall&quot;:0.9887387387387387,&quot;lrPrecision&quot;:0.24621424565339317,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2635336109458656},{&quot;lrRecall&quot;:0.9887387387387387,&quot;lrPrecision&quot;:0.24566312255176273,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2633769322235434},{&quot;lrRecall&quot;:0.9887387387387387,&quot;lrPrecision&quot;:0.24497767857142858,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.26306413301662707},{&quot;lrRecall&quot;:0.9887387387387387,&quot;lrPrecision&quot;:0.24388888888888888,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2629080118694362},{&quot;lrRecall&quot;:0.9887387387387387,&quot;lrPrecision&quot;:0.24375347029428096,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.26259632483698875},{&quot;lrRecall&quot;:0.9887387387387387,&quot;lrPrecision&quot;:0.24361820199778025,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.25997652582159625},{&quot;lrRecall&quot;:0.9887387387387387,&quot;lrPrecision&quot;:0.24267551133222776,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.25936768149882905},{&quot;lrRecall&quot;:0.9887387387387387,&quot;lrPrecision&quot;:0.2422737306843267,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2592159157401989},{&quot;lrRecall&quot;:0.990990990990991,&quot;lrPrecision&quot;:0.2422907488986784,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2583090379008746},{&quot;lrRecall&quot;:0.9932432432432432,&quot;lrPrecision&quot;:0.24257425742574257,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2559214326978625},{&quot;lrRecall&quot;:0.9932432432432432,&quot;lrPrecision&quot;:0.2415115005476451,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2547441058079356},{&quot;lrRecall&quot;:0.9932432432432432,&quot;lrPrecision&quot;:0.24045801526717558,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.25445146467547386},{&quot;lrRecall&quot;:0.9932432432432432,&quot;lrPrecision&quot;:0.24006532389765922,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.25415949512335057},{&quot;lrRecall&quot;:0.9932432432432432,&quot;lrPrecision&quot;:0.23993471164309033,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2540137614678899},{&quot;lrRecall&quot;:0.9932432432432432,&quot;lrPrecision&quot;:0.2398042414355628,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.25242165242165243},{&quot;lrRecall&quot;:0.9932432432432432,&quot;lrPrecision&quot;:0.23967391304347826,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.25028248587570623},{&quot;lrRecall&quot;:0.9932432432432432,&quot;lrPrecision&quot;:0.23915401301518438,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.24887640449438203},{&quot;lrRecall&quot;:0.9932432432432432,&quot;lrPrecision&quot;:0.23773584905660378,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.24804031354983203},{&quot;lrRecall&quot;:0.9932432432432432,&quot;lrPrecision&quot;:0.23709677419354838,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.24748603351955306},{&quot;lrRecall&quot;:0.9932432432432432,&quot;lrPrecision&quot;:0.2369693713057496,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.24720982142857142},{&quot;lrRecall&quot;:0.9932432432432432,&quot;lrPrecision&quot;:0.23646112600536193,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2462479155086159},{&quot;lrRecall&quot;:0.9954954954954955,&quot;lrPrecision&quot;:0.23623730625334047,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2458379578246393},{&quot;lrRecall&quot;:0.9954954954954955,&quot;lrPrecision&quot;:0.23573333333333332,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2457016084303938},{&quot;lrRecall&quot;:0.9954954954954955,&quot;lrPrecision&quot;:0.23548215237080447,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.24529346622369877},{&quot;lrRecall&quot;:0.9954954954954955,&quot;lrPrecision&quot;:0.2351063829787234,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.24515771997786387},{&quot;lrRecall&quot;:0.9954954954954955,&quot;lrPrecision&quot;:0.23473181093998938,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.24461623412479294},{&quot;lrRecall&quot;:0.9954954954954955,&quot;lrPrecision&quot;:0.2346072186836518,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.24394273127753305},{&quot;lrRecall&quot;:0.9954954954954955,&quot;lrPrecision&quot;:0.23324538258575198,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.24260679079956188},{&quot;lrRecall&quot;:0.9954954954954955,&quot;lrPrecision&quot;:0.23275408109531331,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.24234135667396062},{&quot;lrRecall&quot;:0.9954954954954955,&quot;lrPrecision&quot;:0.23202099737532808,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2410228509249184},{&quot;lrRecall&quot;:0.9954954954954955,&quot;lrPrecision&quot;:0.23177766124803356,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2399783315276273},{&quot;lrRecall&quot;:0.9954954954954955,&quot;lrPrecision&quot;:0.23056859676577987,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.23945945945945946},{&quot;lrRecall&quot;:0.9954954954954955,&quot;lrPrecision&quot;:0.2287784679089027,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2390717754991905},{&quot;lrRecall&quot;:0.9954954954954955,&quot;lrPrecision&quot;:0.22713257965056527,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.23881401617250675},{&quot;lrRecall&quot;:0.9954954954954955,&quot;lrPrecision&quot;:0.22666666666666666,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.23868534482758622},{&quot;lrRecall&quot;:0.9954954954954955,&quot;lrPrecision&quot;:0.2263184843830005,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.23817204301075268},{&quot;lrRecall&quot;:0.9954954954954955,&quot;lrPrecision&quot;:0.225395206527282,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.23753351206434317},{&quot;lrRecall&quot;:0.9977477477477478,&quot;lrPrecision&quot;:0.2240768841679312,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.23740621650589497},{&quot;lrRecall&quot;:0.9977477477477478,&quot;lrPrecision&quot;:0.22396359959555107,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.23626666666666668},{&quot;lrRecall&quot;:0.9977477477477478,&quot;lrPrecision&quot;:0.22373737373737373,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.23601491742141714},{&quot;lrRecall&quot;:0.9977477477477478,&quot;lrPrecision&quot;:0.22362443210499747,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.23576370409792444},{&quot;lrRecall&quot;:0.9977477477477478,&quot;lrPrecision&quot;:0.2227249874308698,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.23563829787234042},{&quot;lrRecall&quot;:0.9977477477477478,&quot;lrPrecision&quot;:0.22250125565042692,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.23538788522848034},{&quot;lrRecall&quot;:0.9977477477477478,&quot;lrPrecision&quot;:0.22238955823293172,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.23526287838555496},{&quot;lrRecall&quot;:0.9977477477477478,&quot;lrPrecision&quot;:0.22216649949849548,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.23488865323435842},{&quot;lrRecall&quot;:0.9977477477477478,&quot;lrPrecision&quot;:0.22172172172172172,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.23476417594064652},{&quot;lrRecall&quot;:0.9977477477477478,&quot;lrPrecision&quot;:0.22105788423153694,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2340200739566825},{&quot;lrRecall&quot;:0.9977477477477478,&quot;lrPrecision&quot;:0.22061752988047809,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.23389651531151004},{&quot;lrRecall&quot;:0.9977477477477478,&quot;lrPrecision&quot;:0.2197420634920635,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2331578947368421},{&quot;lrRecall&quot;:0.9977477477477478,&quot;lrPrecision&quot;:0.2196331184928111,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.23291272344900105},{&quot;lrRecall&quot;:0.9977477477477478,&quot;lrPrecision&quot;:0.21865745310957552,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.232790331056227},{&quot;lrRecall&quot;:0.9977477477477478,&quot;lrPrecision&quot;:0.21790457452041317,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2319371727748691},{&quot;lrRecall&quot;:0.9977477477477478,&quot;lrPrecision&quot;:0.21715686274509804,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.23181580324437467},{&quot;lrRecall&quot;:0.9977477477477478,&quot;lrPrecision&quot;:0.21630859375,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.23157344485101933},{&quot;lrRecall&quot;:0.9977477477477478,&quot;lrPrecision&quot;:0.21599219892735252,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.23096976016684045},{&quot;lrRecall&quot;:0.9977477477477478,&quot;lrPrecision&quot;:0.2158869395711501,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.23024948024948025},{&quot;lrRecall&quot;:0.9977477477477478,&quot;lrPrecision&quot;:0.21567672833495619,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.22953367875647668},{&quot;lrRecall&quot;:1.0,&quot;lrPrecision&quot;:0.21605839416058395,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.22882231404958678},{&quot;lrRecall&quot;:1.0,&quot;lrPrecision&quot;:0.21522055259331072,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.22835051546391752},{&quot;lrRecall&quot;:1.0,&quot;lrPrecision&quot;:0.21511627906976744,&quot;rfRecall&quot;:0.9977477477477478,&quot;rfPrecision&quot;:0.2282328696548171},{&quot;lrRecall&quot;:1.0,&quot;lrPrecision&quot;:0.2144927536231884,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22839506172839505},{&quot;lrRecall&quot;:1.0,&quot;lrPrecision&quot;:0.21428571428571427,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22757560225525372},{&quot;lrRecall&quot;:1.0,&quot;lrPrecision&quot;:0.21407907425265188,&quot;rfRecall&quot;:1.0,&quot;rfPrecision&quot;:0.22745901639344263}],&quot;genId&quot;:&quot;200980584&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/customC3Chart'], \n      function(playground, _magiccustomC3Chart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magiccustomC3Chart,\n    \"o\": {\"js\":\"var chartOptions = { data: { xs: {\\n                            'lrPrecision': 'lrRecall',\\n                            'rfPrecision': 'rfRecall',\\n                         }\\n                   },\\n                   axis: {\\n                      y: {\\n                        label: 'precision'\\n                      },\\n                      x: {\\n                         label: 'recall',\\n                         tick: {\\n                            count: 5\\n                         }\\n                      }\\n                   },\\n                   point: {\\n                        show: false\\n                   }\\n                  };\",\"headers\":[\"lrRecall\",\"lrPrecision\",\"rfRecall\",\"rfPrecision\"],\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon27c5865b3e60c867b7551a86002fdf6b&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon4f50109251cd846459dd7ff38790366a&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 37
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "1DB5EE44335249928B897FF2D0C98977"
    },
    "cell_type" : "code",
    "source" : "CustomC3Chart(rocPoints,\n              \"\"\"{ data: { xs: {\n                            'lrTPR': 'lrFPR',\n                            'rfTPR': 'rfFPR',\n                         }\n                   },\n                   axis: {\n                      y: {\n                        label: 'TPR'\n                      },\n                      x: {\n                         label: 'FPR',\n                         tick: {\n                            count: 5\n                         }\n                      }\n                   },\n                   point: {\n                        show: false\n                   }\n                  }\"\"\")\n",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res43: notebook.front.widgets.CustomC3Chart[Array[ROCPoint]] = <CustomC3Chart widget>\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon390646897b5b227813c278e4f60d7064&quot;,&quot;dataInit&quot;:[{&quot;lrFPR&quot;:0.0006134969325153375,&quot;lrTPR&quot;:0.013513513513513514,&quot;rfFPR&quot;:0.0,&quot;rfTPR&quot;:0.0045045045045045045},{&quot;lrFPR&quot;:0.0006134969325153375,&quot;lrTPR&quot;:0.015765765765765764,&quot;rfFPR&quot;:0.0,&quot;rfTPR&quot;:0.006756756756756757},{&quot;lrFPR&quot;:0.0006134969325153375,&quot;lrTPR&quot;:0.036036036036036036,&quot;rfFPR&quot;:0.0006134969325153375,&quot;rfTPR&quot;:0.013513513513513514},{&quot;lrFPR&quot;:0.0006134969325153375,&quot;lrTPR&quot;:0.0472972972972973,&quot;rfFPR&quot;:0.0006134969325153375,&quot;rfTPR&quot;:0.018018018018018018},{&quot;lrFPR&quot;:0.0006134969325153375,&quot;lrTPR&quot;:0.04954954954954955,&quot;rfFPR&quot;:0.0006134969325153375,&quot;rfTPR&quot;:0.02027027027027027},{&quot;lrFPR&quot;:0.0006134969325153375,&quot;lrTPR&quot;:0.0518018018018018,&quot;rfFPR&quot;:0.0006134969325153375,&quot;rfTPR&quot;:0.04504504504504504},{&quot;lrFPR&quot;:0.0036809815950920245,&quot;lrTPR&quot;:0.08333333333333333,&quot;rfFPR&quot;:0.0006134969325153375,&quot;rfTPR&quot;:0.0472972972972973},{&quot;lrFPR&quot;:0.004294478527607362,&quot;lrTPR&quot;:0.09009009009009009,&quot;rfFPR&quot;:0.0006134969325153375,&quot;rfTPR&quot;:0.05405405405405406},{&quot;lrFPR&quot;:0.004294478527607362,&quot;lrTPR&quot;:0.0990990990990991,&quot;rfFPR&quot;:0.0006134969325153375,&quot;rfTPR&quot;:0.05855855855855856},{&quot;lrFPR&quot;:0.006134969325153374,&quot;lrTPR&quot;:0.11036036036036036,&quot;rfFPR&quot;:0.0006134969325153375,&quot;rfTPR&quot;:0.06756756756756757},{&quot;lrFPR&quot;:0.007975460122699387,&quot;lrTPR&quot;:0.13513513513513514,&quot;rfFPR&quot;:0.0006134969325153375,&quot;rfTPR&quot;:0.07432432432432433},{&quot;lrFPR&quot;:0.007975460122699387,&quot;lrTPR&quot;:0.13963963963963963,&quot;rfFPR&quot;:0.00245398773006135,&quot;rfTPR&quot;:0.09009009009009009},{&quot;lrFPR&quot;:0.009202453987730062,&quot;lrTPR&quot;:0.17117117117117117,&quot;rfFPR&quot;:0.00245398773006135,&quot;rfTPR&quot;:0.0945945945945946},{&quot;lrFPR&quot;:0.009202453987730062,&quot;lrTPR&quot;:0.17342342342342343,&quot;rfFPR&quot;:0.003067484662576687,&quot;rfTPR&quot;:0.10585585585585586},{&quot;lrFPR&quot;:0.0098159509202454,&quot;lrTPR&quot;:0.18468468468468469,&quot;rfFPR&quot;:0.003067484662576687,&quot;rfTPR&quot;:0.10810810810810811},{&quot;lrFPR&quot;:0.0098159509202454,&quot;lrTPR&quot;:0.18693693693693694,&quot;rfFPR&quot;:0.004294478527607362,&quot;rfTPR&quot;:0.13063063063063063},{&quot;lrFPR&quot;:0.011656441717791411,&quot;lrTPR&quot;:0.20045045045045046,&quot;rfFPR&quot;:0.005521472392638037,&quot;rfTPR&quot;:0.15990990990990991},{&quot;lrFPR&quot;:0.011656441717791411,&quot;lrTPR&quot;:0.20945945945945946,&quot;rfFPR&quot;:0.005521472392638037,&quot;rfTPR&quot;:0.16441441441441443},{&quot;lrFPR&quot;:0.011656441717791411,&quot;lrTPR&quot;:0.21171171171171171,&quot;rfFPR&quot;:0.006134969325153374,&quot;rfTPR&quot;:0.19594594594594594},{&quot;lrFPR&quot;:0.011656441717791411,&quot;lrTPR&quot;:0.21396396396396397,&quot;rfFPR&quot;:0.007975460122699387,&quot;rfTPR&quot;:0.21621621621621623},{&quot;lrFPR&quot;:0.012269938650306749,&quot;lrTPR&quot;:0.21396396396396397,&quot;rfFPR&quot;:0.008588957055214725,&quot;rfTPR&quot;:0.21846846846846846},{&quot;lrFPR&quot;:0.012269938650306749,&quot;lrTPR&quot;:0.21621621621621623,&quot;rfFPR&quot;:0.009202453987730062,&quot;rfTPR&quot;:0.23873873873873874},{&quot;lrFPR&quot;:0.012269938650306749,&quot;lrTPR&quot;:0.22522522522522523,&quot;rfFPR&quot;:0.0098159509202454,&quot;rfTPR&quot;:0.240990990990991},{&quot;lrFPR&quot;:0.012269938650306749,&quot;lrTPR&quot;:0.22747747747747749,&quot;rfFPR&quot;:0.0098159509202454,&quot;rfTPR&quot;:0.24324324324324326},{&quot;lrFPR&quot;:0.012883435582822086,&quot;lrTPR&quot;:0.23873873873873874,&quot;rfFPR&quot;:0.011042944785276074,&quot;rfTPR&quot;:0.28378378378378377},{&quot;lrFPR&quot;:0.013496932515337423,&quot;lrTPR&quot;:0.240990990990991,&quot;rfFPR&quot;:0.011042944785276074,&quot;rfTPR&quot;:0.2882882882882883},{&quot;lrFPR&quot;:0.014723926380368098,&quot;lrTPR&quot;:0.24549549549549549,&quot;rfFPR&quot;:0.012883435582822086,&quot;rfTPR&quot;:0.30180180180180183},{&quot;lrFPR&quot;:0.015337423312883436,&quot;lrTPR&quot;:0.25675675675675674,&quot;rfFPR&quot;:0.012883435582822086,&quot;rfTPR&quot;:0.30405405405405406},{&quot;lrFPR&quot;:0.015337423312883436,&quot;lrTPR&quot;:0.2635135135135135,&quot;rfFPR&quot;:0.012883435582822086,&quot;rfTPR&quot;:0.3063063063063063},{&quot;lrFPR&quot;:0.015337423312883436,&quot;lrTPR&quot;:0.2725225225225225,&quot;rfFPR&quot;:0.01411042944785276,&quot;rfTPR&quot;:0.32657657657657657},{&quot;lrFPR&quot;:0.015337423312883436,&quot;lrTPR&quot;:0.27702702702702703,&quot;rfFPR&quot;:0.014723926380368098,&quot;rfTPR&quot;:0.3333333333333333},{&quot;lrFPR&quot;:0.015337423312883436,&quot;lrTPR&quot;:0.28153153153153154,&quot;rfFPR&quot;:0.015337423312883436,&quot;rfTPR&quot;:0.34234234234234234},{&quot;lrFPR&quot;:0.017791411042944787,&quot;lrTPR&quot;:0.2972972972972973,&quot;rfFPR&quot;:0.015950920245398775,&quot;rfTPR&quot;:0.34234234234234234},{&quot;lrFPR&quot;:0.018404907975460124,&quot;lrTPR&quot;:0.3130630630630631,&quot;rfFPR&quot;:0.015950920245398775,&quot;rfTPR&quot;:0.34459459459459457},{&quot;lrFPR&quot;:0.01901840490797546,&quot;lrTPR&quot;:0.31756756756756754,&quot;rfFPR&quot;:0.01717791411042945,&quot;rfTPR&quot;:0.3490990990990991},{&quot;lrFPR&quot;:0.020245398773006136,&quot;lrTPR&quot;:0.32207207207207206,&quot;rfFPR&quot;:0.017791411042944787,&quot;rfTPR&quot;:0.35585585585585583},{&quot;lrFPR&quot;:0.020858895705521473,&quot;lrTPR&quot;:0.32432432432432434,&quot;rfFPR&quot;:0.017791411042944787,&quot;rfTPR&quot;:0.3581081081081081},{&quot;lrFPR&quot;:0.020858895705521473,&quot;lrTPR&quot;:0.3333333333333333,&quot;rfFPR&quot;:0.018404907975460124,&quot;rfTPR&quot;:0.36036036036036034},{&quot;lrFPR&quot;:0.020858895705521473,&quot;lrTPR&quot;:0.3400900900900901,&quot;rfFPR&quot;:0.01901840490797546,&quot;rfTPR&quot;:0.36711711711711714},{&quot;lrFPR&quot;:0.02147239263803681,&quot;lrTPR&quot;:0.35135135135135137,&quot;rfFPR&quot;:0.020245398773006136,&quot;rfTPR&quot;:0.36936936936936937},{&quot;lrFPR&quot;:0.023312883435582823,&quot;lrTPR&quot;:0.3581081081081081,&quot;rfFPR&quot;:0.020245398773006136,&quot;rfTPR&quot;:0.3716216216216216},{&quot;lrFPR&quot;:0.023312883435582823,&quot;lrTPR&quot;:0.36486486486486486,&quot;rfFPR&quot;:0.020858895705521473,&quot;rfTPR&quot;:0.3761261261261261},{&quot;lrFPR&quot;:0.023312883435582823,&quot;lrTPR&quot;:0.3738738738738739,&quot;rfFPR&quot;:0.02147239263803681,&quot;rfTPR&quot;:0.38513513513513514},{&quot;lrFPR&quot;:0.02392638036809816,&quot;lrTPR&quot;:0.3738738738738739,&quot;rfFPR&quot;:0.022085889570552148,&quot;rfTPR&quot;:0.38963963963963966},{&quot;lrFPR&quot;:0.02638036809815951,&quot;lrTPR&quot;:0.3783783783783784,&quot;rfFPR&quot;:0.022699386503067485,&quot;rfTPR&quot;:0.40315315315315314},{&quot;lrFPR&quot;:0.027607361963190184,&quot;lrTPR&quot;:0.38513513513513514,&quot;rfFPR&quot;:0.023312883435582823,&quot;rfTPR&quot;:0.40315315315315314},{&quot;lrFPR&quot;:0.030061349693251534,&quot;lrTPR&quot;:0.40540540540540543,&quot;rfFPR&quot;:0.025766871165644172,&quot;rfTPR&quot;:0.42567567567567566},{&quot;lrFPR&quot;:0.030061349693251534,&quot;lrTPR&quot;:0.40765765765765766,&quot;rfFPR&quot;:0.025766871165644172,&quot;rfTPR&quot;:0.4346846846846847},{&quot;lrFPR&quot;:0.03067484662576687,&quot;lrTPR&quot;:0.40765765765765766,&quot;rfFPR&quot;:0.025766871165644172,&quot;rfTPR&quot;:0.4369369369369369},{&quot;lrFPR&quot;:0.03190184049079755,&quot;lrTPR&quot;:0.4166666666666667,&quot;rfFPR&quot;:0.025766871165644172,&quot;rfTPR&quot;:0.4391891891891892},{&quot;lrFPR&quot;:0.03251533742331288,&quot;lrTPR&quot;:0.42342342342342343,&quot;rfFPR&quot;:0.027607361963190184,&quot;rfTPR&quot;:0.45495495495495497},{&quot;lrFPR&quot;:0.03558282208588957,&quot;lrTPR&quot;:0.4346846846846847,&quot;rfFPR&quot;:0.029447852760736196,&quot;rfTPR&quot;:0.46621621621621623},{&quot;lrFPR&quot;:0.03865030674846626,&quot;lrTPR&quot;:0.45045045045045046,&quot;rfFPR&quot;:0.029447852760736196,&quot;rfTPR&quot;:0.46846846846846846},{&quot;lrFPR&quot;:0.03987730061349693,&quot;lrTPR&quot;:0.4572072072072072,&quot;rfFPR&quot;:0.030061349693251534,&quot;rfTPR&quot;:0.47072072072072074},{&quot;lrFPR&quot;:0.03987730061349693,&quot;lrTPR&quot;:0.46396396396396394,&quot;rfFPR&quot;:0.03067484662576687,&quot;rfTPR&quot;:0.47297297297297297},{&quot;lrFPR&quot;:0.03987730061349693,&quot;lrTPR&quot;:0.46846846846846846,&quot;rfFPR&quot;:0.03128834355828221,&quot;rfTPR&quot;:0.48423423423423423},{&quot;lrFPR&quot;:0.03987730061349693,&quot;lrTPR&quot;:0.47072072072072074,&quot;rfFPR&quot;:0.03128834355828221,&quot;rfTPR&quot;:0.48873873873873874},{&quot;lrFPR&quot;:0.04049079754601227,&quot;lrTPR&quot;:0.4774774774774775,&quot;rfFPR&quot;:0.03190184049079755,&quot;rfTPR&quot;:0.49099099099099097},{&quot;lrFPR&quot;:0.04049079754601227,&quot;lrTPR&quot;:0.4797297297297297,&quot;rfFPR&quot;:0.03496932515337423,&quot;rfTPR&quot;:0.5022522522522522},{&quot;lrFPR&quot;:0.043558282208588955,&quot;lrTPR&quot;:0.5045045045045045,&quot;rfFPR&quot;:0.03987730061349693,&quot;rfTPR&quot;:0.5225225225225225},{&quot;lrFPR&quot;:0.046625766871165646,&quot;lrTPR&quot;:0.509009009009009,&quot;rfFPR&quot;:0.041104294478527606,&quot;rfTPR&quot;:0.5247747747747747},{&quot;lrFPR&quot;:0.04785276073619632,&quot;lrTPR&quot;:0.5135135135135135,&quot;rfFPR&quot;:0.04171779141104295,&quot;rfTPR&quot;:0.5315315315315315},{&quot;lrFPR&quot;:0.04785276073619632,&quot;lrTPR&quot;:0.5157657657657657,&quot;rfFPR&quot;:0.043558282208588955,&quot;rfTPR&quot;:0.536036036036036},{&quot;lrFPR&quot;:0.05337423312883435,&quot;lrTPR&quot;:0.536036036036036,&quot;rfFPR&quot;:0.044171779141104296,&quot;rfTPR&quot;:0.536036036036036},{&quot;lrFPR&quot;:0.05337423312883435,&quot;lrTPR&quot;:0.5405405405405406,&quot;rfFPR&quot;:0.04478527607361963,&quot;rfTPR&quot;:0.5405405405405406},{&quot;lrFPR&quot;:0.053987730061349694,&quot;lrTPR&quot;:0.5405405405405406,&quot;rfFPR&quot;:0.04539877300613497,&quot;rfTPR&quot;:0.5540540540540541},{&quot;lrFPR&quot;:0.05889570552147239,&quot;lrTPR&quot;:0.5563063063063063,&quot;rfFPR&quot;:0.04969325153374233,&quot;rfTPR&quot;:0.5675675675675675},{&quot;lrFPR&quot;:0.06196319018404908,&quot;lrTPR&quot;:0.5765765765765766,&quot;rfFPR&quot;:0.05337423312883435,&quot;rfTPR&quot;:0.5765765765765766},{&quot;lrFPR&quot;:0.06809815950920245,&quot;lrTPR&quot;:0.5923423423423423,&quot;rfFPR&quot;:0.0558282208588957,&quot;rfTPR&quot;:0.581081081081081},{&quot;lrFPR&quot;:0.0687116564417178,&quot;lrTPR&quot;:0.5923423423423423,&quot;rfFPR&quot;:0.05705521472392638,&quot;rfTPR&quot;:0.581081081081081},{&quot;lrFPR&quot;:0.07300613496932515,&quot;lrTPR&quot;:0.6013513513513513,&quot;rfFPR&quot;:0.06012269938650307,&quot;rfTPR&quot;:0.5923423423423423},{&quot;lrFPR&quot;:0.07423312883435583,&quot;lrTPR&quot;:0.6058558558558559,&quot;rfFPR&quot;:0.06012269938650307,&quot;rfTPR&quot;:0.5945945945945946},{&quot;lrFPR&quot;:0.07730061349693251,&quot;lrTPR&quot;:0.6126126126126126,&quot;rfFPR&quot;:0.06134969325153374,&quot;rfTPR&quot;:0.5945945945945946},{&quot;lrFPR&quot;:0.07791411042944785,&quot;lrTPR&quot;:0.6126126126126126,&quot;rfFPR&quot;:0.06196319018404908,&quot;rfTPR&quot;:0.5968468468468469},{&quot;lrFPR&quot;:0.0785276073619632,&quot;lrTPR&quot;:0.6126126126126126,&quot;rfFPR&quot;:0.06257668711656442,&quot;rfTPR&quot;:0.5990990990990991},{&quot;lrFPR&quot;:0.08098159509202454,&quot;lrTPR&quot;:0.6148648648648649,&quot;rfFPR&quot;:0.06319018404907975,&quot;rfTPR&quot;:0.6013513513513513},{&quot;lrFPR&quot;:0.08220858895705521,&quot;lrTPR&quot;:0.6193693693693694,&quot;rfFPR&quot;:0.06441717791411043,&quot;rfTPR&quot;:0.6013513513513513},{&quot;lrFPR&quot;:0.08282208588957055,&quot;lrTPR&quot;:0.6193693693693694,&quot;rfFPR&quot;:0.06625766871165645,&quot;rfTPR&quot;:0.6036036036036037},{&quot;lrFPR&quot;:0.0852760736196319,&quot;lrTPR&quot;:0.6261261261261262,&quot;rfFPR&quot;:0.06932515337423313,&quot;rfTPR&quot;:0.6036036036036037},{&quot;lrFPR&quot;:0.08711656441717791,&quot;lrTPR&quot;:0.6306306306306306,&quot;rfFPR&quot;:0.0736196319018405,&quot;rfTPR&quot;:0.6193693693693694},{&quot;lrFPR&quot;:0.09079754601226994,&quot;lrTPR&quot;:0.6351351351351351,&quot;rfFPR&quot;:0.07607361963190185,&quot;rfTPR&quot;:0.6283783783783784},{&quot;lrFPR&quot;:0.09079754601226994,&quot;lrTPR&quot;:0.6396396396396397,&quot;rfFPR&quot;:0.07668711656441718,&quot;rfTPR&quot;:0.6306306306306306},{&quot;lrFPR&quot;:0.09141104294478528,&quot;lrTPR&quot;:0.6486486486486487,&quot;rfFPR&quot;:0.08282208588957055,&quot;rfTPR&quot;:0.6396396396396397},{&quot;lrFPR&quot;:0.09325153374233129,&quot;lrTPR&quot;:0.6509009009009009,&quot;rfFPR&quot;:0.0834355828220859,&quot;rfTPR&quot;:0.6396396396396397},{&quot;lrFPR&quot;:0.09447852760736196,&quot;lrTPR&quot;:0.6509009009009009,&quot;rfFPR&quot;:0.08711656441717791,&quot;rfTPR&quot;:0.6463963963963963},{&quot;lrFPR&quot;:0.0950920245398773,&quot;lrTPR&quot;:0.6576576576576577,&quot;rfFPR&quot;:0.09386503067484663,&quot;rfTPR&quot;:0.6644144144144144},{&quot;lrFPR&quot;:0.09631901840490797,&quot;lrTPR&quot;:0.6599099099099099,&quot;rfFPR&quot;:0.0950920245398773,&quot;rfTPR&quot;:0.6644144144144144},{&quot;lrFPR&quot;:0.09877300613496932,&quot;lrTPR&quot;:0.6666666666666666,&quot;rfFPR&quot;:0.09693251533742331,&quot;rfTPR&quot;:0.6666666666666666},{&quot;lrFPR&quot;:0.09877300613496932,&quot;lrTPR&quot;:0.668918918918919,&quot;rfFPR&quot;:0.09693251533742331,&quot;rfTPR&quot;:0.668918918918919},{&quot;lrFPR&quot;:0.1,&quot;lrTPR&quot;:0.6711711711711712,&quot;rfFPR&quot;:0.09815950920245399,&quot;rfTPR&quot;:0.6756756756756757},{&quot;lrFPR&quot;:0.10736196319018405,&quot;lrTPR&quot;:0.6824324324324325,&quot;rfFPR&quot;:0.10306748466257669,&quot;rfTPR&quot;:0.6846846846846847},{&quot;lrFPR&quot;:0.10858895705521472,&quot;lrTPR&quot;:0.6869369369369369,&quot;rfFPR&quot;:0.10552147239263804,&quot;rfTPR&quot;:0.6981981981981982},{&quot;lrFPR&quot;:0.10920245398773006,&quot;lrTPR&quot;:0.6869369369369369,&quot;rfFPR&quot;:0.1098159509202454,&quot;rfTPR&quot;:0.704954954954955},{&quot;lrFPR&quot;:0.1116564417177914,&quot;lrTPR&quot;:0.6869369369369369,&quot;rfFPR&quot;:0.11226993865030675,&quot;rfTPR&quot;:0.7117117117117117},{&quot;lrFPR&quot;:0.1116564417177914,&quot;lrTPR&quot;:0.6891891891891891,&quot;rfFPR&quot;:0.11533742331288344,&quot;rfTPR&quot;:0.7252252252252253},{&quot;lrFPR&quot;:0.11349693251533742,&quot;lrTPR&quot;:0.6981981981981982,&quot;rfFPR&quot;:0.11595092024539877,&quot;rfTPR&quot;:0.7252252252252253},{&quot;lrFPR&quot;:0.11717791411042945,&quot;lrTPR&quot;:0.7027027027027027,&quot;rfFPR&quot;:0.11840490797546012,&quot;rfTPR&quot;:0.7274774774774775},{&quot;lrFPR&quot;:0.11779141104294479,&quot;lrTPR&quot;:0.7027027027027027,&quot;rfFPR&quot;:0.11840490797546012,&quot;rfTPR&quot;:0.7342342342342343},{&quot;lrFPR&quot;:0.11840490797546012,&quot;lrTPR&quot;:0.7027027027027027,&quot;rfFPR&quot;:0.12147239263803682,&quot;rfTPR&quot;:0.7342342342342343},{&quot;lrFPR&quot;:0.12024539877300613,&quot;lrTPR&quot;:0.7027027027027027,&quot;rfFPR&quot;:0.12331288343558282,&quot;rfTPR&quot;:0.7364864864864865},{&quot;lrFPR&quot;:0.12208588957055215,&quot;lrTPR&quot;:0.7027027027027027,&quot;rfFPR&quot;:0.1263803680981595,&quot;rfTPR&quot;:0.7387387387387387},{&quot;lrFPR&quot;:0.12331288343558282,&quot;lrTPR&quot;:0.7072072072072072,&quot;rfFPR&quot;:0.12699386503067484,&quot;rfTPR&quot;:0.740990990990991},{&quot;lrFPR&quot;:0.13374233128834356,&quot;lrTPR&quot;:0.7184684684684685,&quot;rfFPR&quot;:0.12699386503067484,&quot;rfTPR&quot;:0.7432432432432432},{&quot;lrFPR&quot;:0.13680981595092023,&quot;lrTPR&quot;:0.7274774774774775,&quot;rfFPR&quot;:0.1276073619631902,&quot;rfTPR&quot;:0.7432432432432432},{&quot;lrFPR&quot;:0.1374233128834356,&quot;lrTPR&quot;:0.7342342342342343,&quot;rfFPR&quot;:0.12822085889570553,&quot;rfTPR&quot;:0.75},{&quot;lrFPR&quot;:0.1392638036809816,&quot;lrTPR&quot;:0.7387387387387387,&quot;rfFPR&quot;:0.12883435582822086,&quot;rfTPR&quot;:0.759009009009009},{&quot;lrFPR&quot;:0.1423312883435583,&quot;lrTPR&quot;:0.7387387387387387,&quot;rfFPR&quot;:0.13006134969325153,&quot;rfTPR&quot;:0.7612612612612613},{&quot;lrFPR&quot;:0.14355828220858896,&quot;lrTPR&quot;:0.7387387387387387,&quot;rfFPR&quot;:0.13190184049079753,&quot;rfTPR&quot;:0.7612612612612613},{&quot;lrFPR&quot;:0.1441717791411043,&quot;lrTPR&quot;:0.7387387387387387,&quot;rfFPR&quot;:0.1325153374233129,&quot;rfTPR&quot;:0.7702702702702703},{&quot;lrFPR&quot;:0.14785276073619633,&quot;lrTPR&quot;:0.740990990990991,&quot;rfFPR&quot;:0.13312883435582823,&quot;rfTPR&quot;:0.7702702702702703},{&quot;lrFPR&quot;:0.15030674846625766,&quot;lrTPR&quot;:0.740990990990991,&quot;rfFPR&quot;:0.13374233128834356,&quot;rfTPR&quot;:0.7702702702702703},{&quot;lrFPR&quot;:0.15276073619631902,&quot;lrTPR&quot;:0.7454954954954955,&quot;rfFPR&quot;:0.13496932515337423,&quot;rfTPR&quot;:0.7702702702702703},{&quot;lrFPR&quot;:0.1619631901840491,&quot;lrTPR&quot;:0.759009009009009,&quot;rfFPR&quot;:0.1361963190184049,&quot;rfTPR&quot;:0.7725225225225225},{&quot;lrFPR&quot;:0.1638036809815951,&quot;lrTPR&quot;:0.759009009009009,&quot;rfFPR&quot;:0.1374233128834356,&quot;rfTPR&quot;:0.7747747747747747},{&quot;lrFPR&quot;:0.16441717791411042,&quot;lrTPR&quot;:0.759009009009009,&quot;rfFPR&quot;:0.1423312883435583,&quot;rfTPR&quot;:0.7837837837837838},{&quot;lrFPR&quot;:0.1656441717791411,&quot;lrTPR&quot;:0.759009009009009,&quot;rfFPR&quot;:0.14539877300613496,&quot;rfTPR&quot;:0.7837837837837838},{&quot;lrFPR&quot;:0.1668711656441718,&quot;lrTPR&quot;:0.759009009009009,&quot;rfFPR&quot;:0.14662576687116563,&quot;rfTPR&quot;:0.7837837837837838},{&quot;lrFPR&quot;:0.16809815950920245,&quot;lrTPR&quot;:0.759009009009009,&quot;rfFPR&quot;:0.15276073619631902,&quot;rfTPR&quot;:0.7905405405405406},{&quot;lrFPR&quot;:0.17116564417177915,&quot;lrTPR&quot;:0.7657657657657657,&quot;rfFPR&quot;:0.15460122699386503,&quot;rfTPR&quot;:0.7927927927927928},{&quot;lrFPR&quot;:0.1736196319018405,&quot;lrTPR&quot;:0.7657657657657657,&quot;rfFPR&quot;:0.1558282208588957,&quot;rfTPR&quot;:0.7927927927927928},{&quot;lrFPR&quot;:0.17423312883435582,&quot;lrTPR&quot;:0.7680180180180181,&quot;rfFPR&quot;:0.1570552147239264,&quot;rfTPR&quot;:0.7972972972972973},{&quot;lrFPR&quot;:0.17607361963190185,&quot;lrTPR&quot;:0.7680180180180181,&quot;rfFPR&quot;:0.15828220858895706,&quot;rfTPR&quot;:0.7972972972972973},{&quot;lrFPR&quot;:0.1785276073619632,&quot;lrTPR&quot;:0.7725225225225225,&quot;rfFPR&quot;:0.16012269938650306,&quot;rfTPR&quot;:0.7972972972972973},{&quot;lrFPR&quot;:0.1785276073619632,&quot;lrTPR&quot;:0.7747747747747747,&quot;rfFPR&quot;:0.1607361963190184,&quot;rfTPR&quot;:0.7995495495495496},{&quot;lrFPR&quot;:0.18159509202453988,&quot;lrTPR&quot;:0.777027027027027,&quot;rfFPR&quot;:0.16441717791411042,&quot;rfTPR&quot;:0.8085585585585585},{&quot;lrFPR&quot;:0.18343558282208589,&quot;lrTPR&quot;:0.7815315315315315,&quot;rfFPR&quot;:0.1656441717791411,&quot;rfTPR&quot;:0.8085585585585585},{&quot;lrFPR&quot;:0.18711656441717792,&quot;lrTPR&quot;:0.786036036036036,&quot;rfFPR&quot;:0.16748466257668712,&quot;rfTPR&quot;:0.8153153153153153},{&quot;lrFPR&quot;:0.18834355828220858,&quot;lrTPR&quot;:0.7882882882882883,&quot;rfFPR&quot;:0.16932515337423312,&quot;rfTPR&quot;:0.8153153153153153},{&quot;lrFPR&quot;:0.18834355828220858,&quot;lrTPR&quot;:0.7905405405405406,&quot;rfFPR&quot;:0.1705521472392638,&quot;rfTPR&quot;:0.8153153153153153},{&quot;lrFPR&quot;:0.18895705521472392,&quot;lrTPR&quot;:0.7927927927927928,&quot;rfFPR&quot;:0.17116564417177915,&quot;rfTPR&quot;:0.8175675675675675},{&quot;lrFPR&quot;:0.1901840490797546,&quot;lrTPR&quot;:0.7972972972972973,&quot;rfFPR&quot;:0.17177914110429449,&quot;rfTPR&quot;:0.8175675675675675},{&quot;lrFPR&quot;:0.19079754601226995,&quot;lrTPR&quot;:0.7995495495495496,&quot;rfFPR&quot;:0.1754601226993865,&quot;rfTPR&quot;:0.8220720720720721},{&quot;lrFPR&quot;:0.19141104294478528,&quot;lrTPR&quot;:0.7995495495495496,&quot;rfFPR&quot;:0.18343558282208589,&quot;rfTPR&quot;:0.8243243243243243},{&quot;lrFPR&quot;:0.19263803680981595,&quot;lrTPR&quot;:0.7995495495495496,&quot;rfFPR&quot;:0.18466257668711655,&quot;rfTPR&quot;:0.8243243243243243},{&quot;lrFPR&quot;:0.19631901840490798,&quot;lrTPR&quot;:0.8018018018018018,&quot;rfFPR&quot;:0.18650306748466258,&quot;rfTPR&quot;:0.8265765765765766},{&quot;lrFPR&quot;:0.19938650306748465,&quot;lrTPR&quot;:0.8018018018018018,&quot;rfFPR&quot;:0.19631901840490798,&quot;rfTPR&quot;:0.831081081081081},{&quot;lrFPR&quot;:0.201840490797546,&quot;lrTPR&quot;:0.8018018018018018,&quot;rfFPR&quot;:0.19938650306748465,&quot;rfTPR&quot;:0.8333333333333334},{&quot;lrFPR&quot;:0.20306748466257668,&quot;lrTPR&quot;:0.8040540540540541,&quot;rfFPR&quot;:0.20368098159509201,&quot;rfTPR&quot;:0.8333333333333334},{&quot;lrFPR&quot;:0.20552147239263804,&quot;lrTPR&quot;:0.8040540540540541,&quot;rfFPR&quot;:0.20552147239263804,&quot;rfTPR&quot;:0.8333333333333334},{&quot;lrFPR&quot;:0.20920245398773007,&quot;lrTPR&quot;:0.8040540540540541,&quot;rfFPR&quot;:0.2085889570552147,&quot;rfTPR&quot;:0.8333333333333334},{&quot;lrFPR&quot;:0.21901840490797547,&quot;lrTPR&quot;:0.8108108108108109,&quot;rfFPR&quot;:0.21104294478527608,&quot;rfTPR&quot;:0.8333333333333334},{&quot;lrFPR&quot;:0.22085889570552147,&quot;lrTPR&quot;:0.8153153153153153,&quot;rfFPR&quot;:0.2184049079754601,&quot;rfTPR&quot;:0.8513513513513513},{&quot;lrFPR&quot;:0.22085889570552147,&quot;lrTPR&quot;:0.8175675675675675,&quot;rfFPR&quot;:0.22024539877300614,&quot;rfTPR&quot;:0.8536036036036037},{&quot;lrFPR&quot;:0.22208588957055214,&quot;lrTPR&quot;:0.8220720720720721,&quot;rfFPR&quot;:0.22085889570552147,&quot;rfTPR&quot;:0.8536036036036037},{&quot;lrFPR&quot;:0.2263803680981595,&quot;lrTPR&quot;:0.8265765765765766,&quot;rfFPR&quot;:0.22208588957055214,&quot;rfTPR&quot;:0.8536036036036037},{&quot;lrFPR&quot;:0.23067484662576687,&quot;lrTPR&quot;:0.8265765765765766,&quot;rfFPR&quot;:0.22208588957055214,&quot;rfTPR&quot;:0.8558558558558559},{&quot;lrFPR&quot;:0.23190184049079754,&quot;lrTPR&quot;:0.8265765765765766,&quot;rfFPR&quot;:0.2294478527607362,&quot;rfTPR&quot;:0.8603603603603603},{&quot;lrFPR&quot;:0.23680981595092024,&quot;lrTPR&quot;:0.831081081081081,&quot;rfFPR&quot;:0.2312883435582822,&quot;rfTPR&quot;:0.8648648648648649},{&quot;lrFPR&quot;:0.24785276073619633,&quot;lrTPR&quot;:0.8378378378378378,&quot;rfFPR&quot;:0.23251533742331287,&quot;rfTPR&quot;:0.8648648648648649},{&quot;lrFPR&quot;:0.24969325153374233,&quot;lrTPR&quot;:0.8378378378378378,&quot;rfFPR&quot;:0.24049079754601227,&quot;rfTPR&quot;:0.8671171171171171},{&quot;lrFPR&quot;:0.252760736196319,&quot;lrTPR&quot;:0.8378378378378378,&quot;rfFPR&quot;:0.25153374233128833,&quot;rfTPR&quot;:0.8716216216216216},{&quot;lrFPR&quot;:0.252760736196319,&quot;lrTPR&quot;:0.8423423423423423,&quot;rfFPR&quot;:0.252760736196319,&quot;rfTPR&quot;:0.8716216216216216},{&quot;lrFPR&quot;:0.254601226993865,&quot;lrTPR&quot;:0.8423423423423423,&quot;rfFPR&quot;:0.252760736196319,&quot;rfTPR&quot;:0.8738738738738738},{&quot;lrFPR&quot;:0.25644171779141106,&quot;lrTPR&quot;:0.8423423423423423,&quot;rfFPR&quot;:0.25337423312883434,&quot;rfTPR&quot;:0.8761261261261262},{&quot;lrFPR&quot;:0.2674846625766871,&quot;lrTPR&quot;:0.8513513513513513,&quot;rfFPR&quot;:0.2570552147239264,&quot;rfTPR&quot;:0.8851351351351351},{&quot;lrFPR&quot;:0.26809815950920246,&quot;lrTPR&quot;:0.8513513513513513,&quot;rfFPR&quot;:0.25766871165644173,&quot;rfTPR&quot;:0.8851351351351351},{&quot;lrFPR&quot;:0.2723926380368098,&quot;lrTPR&quot;:0.8513513513513513,&quot;rfFPR&quot;:0.26134969325153373,&quot;rfTPR&quot;:0.8851351351351351},{&quot;lrFPR&quot;:0.27423312883435585,&quot;lrTPR&quot;:0.8536036036036037,&quot;rfFPR&quot;:0.26809815950920246,&quot;rfTPR&quot;:0.8896396396396397},{&quot;lrFPR&quot;:0.2748466257668712,&quot;lrTPR&quot;:0.8536036036036037,&quot;rfFPR&quot;:0.2687116564417178,&quot;rfTPR&quot;:0.8918918918918919},{&quot;lrFPR&quot;:0.27607361963190186,&quot;lrTPR&quot;:0.8536036036036037,&quot;rfFPR&quot;:0.26932515337423313,&quot;rfTPR&quot;:0.8918918918918919},{&quot;lrFPR&quot;:0.27791411042944786,&quot;lrTPR&quot;:0.8536036036036037,&quot;rfFPR&quot;:0.27300613496932513,&quot;rfTPR&quot;:0.8918918918918919},{&quot;lrFPR&quot;:0.2791411042944785,&quot;lrTPR&quot;:0.8536036036036037,&quot;rfFPR&quot;:0.27361963190184047,&quot;rfTPR&quot;:0.8918918918918919},{&quot;lrFPR&quot;:0.27975460122699386,&quot;lrTPR&quot;:0.8536036036036037,&quot;rfFPR&quot;:0.2748466257668712,&quot;rfTPR&quot;:0.8918918918918919},{&quot;lrFPR&quot;:0.2822085889570552,&quot;lrTPR&quot;:0.8558558558558559,&quot;rfFPR&quot;:0.2754601226993865,&quot;rfTPR&quot;:0.8918918918918919},{&quot;lrFPR&quot;:0.28404907975460125,&quot;lrTPR&quot;:0.8581081081081081,&quot;rfFPR&quot;:0.2766871165644172,&quot;rfTPR&quot;:0.8941441441441441},{&quot;lrFPR&quot;:0.2889570552147239,&quot;lrTPR&quot;:0.8603603603603603,&quot;rfFPR&quot;:0.2773006134969325,&quot;rfTPR&quot;:0.8941441441441441},{&quot;lrFPR&quot;:0.28957055214723926,&quot;lrTPR&quot;:0.8603603603603603,&quot;rfFPR&quot;:0.2791411042944785,&quot;rfTPR&quot;:0.8941441441441441},{&quot;lrFPR&quot;:0.2920245398773006,&quot;lrTPR&quot;:0.8603603603603603,&quot;rfFPR&quot;:0.2803680981595092,&quot;rfTPR&quot;:0.8941441441441441},{&quot;lrFPR&quot;:0.29325153374233126,&quot;lrTPR&quot;:0.8626126126126126,&quot;rfFPR&quot;:0.28343558282208586,&quot;rfTPR&quot;:0.8941441441441441},{&quot;lrFPR&quot;:0.2969325153374233,&quot;lrTPR&quot;:0.8693693693693694,&quot;rfFPR&quot;:0.2852760736196319,&quot;rfTPR&quot;:0.8963963963963963},{&quot;lrFPR&quot;:0.29938650306748466,&quot;lrTPR&quot;:0.8693693693693694,&quot;rfFPR&quot;:0.28588957055214725,&quot;rfTPR&quot;:0.8963963963963963},{&quot;lrFPR&quot;:0.3024539877300613,&quot;lrTPR&quot;:0.8716216216216216,&quot;rfFPR&quot;:0.2883435582822086,&quot;rfTPR&quot;:0.8986486486486487},{&quot;lrFPR&quot;:0.3042944785276074,&quot;lrTPR&quot;:0.8716216216216216,&quot;rfFPR&quot;:0.2889570552147239,&quot;rfTPR&quot;:0.8986486486486487},{&quot;lrFPR&quot;:0.3049079754601227,&quot;lrTPR&quot;:0.8716216216216216,&quot;rfFPR&quot;:0.2920245398773006,&quot;rfTPR&quot;:0.9009009009009009},{&quot;lrFPR&quot;:0.30736196319018405,&quot;lrTPR&quot;:0.8716216216216216,&quot;rfFPR&quot;:0.2926380368098159,&quot;rfTPR&quot;:0.9009009009009009},{&quot;lrFPR&quot;:0.3104294478527607,&quot;lrTPR&quot;:0.8716216216216216,&quot;rfFPR&quot;:0.29570552147239265,&quot;rfTPR&quot;:0.9009009009009009},{&quot;lrFPR&quot;:0.3122699386503067,&quot;lrTPR&quot;:0.8716216216216216,&quot;rfFPR&quot;:0.30122699386503066,&quot;rfTPR&quot;:0.9076576576576577},{&quot;lrFPR&quot;:0.3128834355828221,&quot;lrTPR&quot;:0.8716216216216216,&quot;rfFPR&quot;:0.3042944785276074,&quot;rfTPR&quot;:0.9099099099099099},{&quot;lrFPR&quot;:0.31717791411042945,&quot;lrTPR&quot;:0.8716216216216216,&quot;rfFPR&quot;:0.3049079754601227,&quot;rfTPR&quot;:0.9099099099099099},{&quot;lrFPR&quot;:0.3177914110429448,&quot;lrTPR&quot;:0.8716216216216216,&quot;rfFPR&quot;:0.3177914110429448,&quot;rfTPR&quot;:0.9144144144144144},{&quot;lrFPR&quot;:0.32085889570552145,&quot;lrTPR&quot;:0.8738738738738738,&quot;rfFPR&quot;:0.31901840490797545,&quot;rfTPR&quot;:0.9144144144144144},{&quot;lrFPR&quot;:0.3214723926380368,&quot;lrTPR&quot;:0.8738738738738738,&quot;rfFPR&quot;:0.3196319018404908,&quot;rfTPR&quot;:0.9144144144144144},{&quot;lrFPR&quot;:0.3226993865030675,&quot;lrTPR&quot;:0.8738738738738738,&quot;rfFPR&quot;:0.3202453987730061,&quot;rfTPR&quot;:0.9144144144144144},{&quot;lrFPR&quot;:0.3257668711656442,&quot;lrTPR&quot;:0.8738738738738738,&quot;rfFPR&quot;:0.32699386503067485,&quot;rfTPR&quot;:0.9234234234234234},{&quot;lrFPR&quot;:0.32883435582822085,&quot;lrTPR&quot;:0.8738738738738738,&quot;rfFPR&quot;:0.3300613496932515,&quot;rfTPR&quot;:0.9234234234234234},{&quot;lrFPR&quot;:0.33312883435582824,&quot;lrTPR&quot;:0.8738738738738738,&quot;rfFPR&quot;:0.33312883435582824,&quot;rfTPR&quot;:0.9256756756756757},{&quot;lrFPR&quot;:0.3337423312883436,&quot;lrTPR&quot;:0.8738738738738738,&quot;rfFPR&quot;:0.3355828220858896,&quot;rfTPR&quot;:0.9256756756756757},{&quot;lrFPR&quot;:0.3361963190184049,&quot;lrTPR&quot;:0.8761261261261262,&quot;rfFPR&quot;:0.3361963190184049,&quot;rfTPR&quot;:0.9256756756756757},{&quot;lrFPR&quot;:0.33680981595092024,&quot;lrTPR&quot;:0.8761261261261262,&quot;rfFPR&quot;:0.3392638036809816,&quot;rfTPR&quot;:0.9301801801801802},{&quot;lrFPR&quot;:0.33865030674846625,&quot;lrTPR&quot;:0.8783783783783784,&quot;rfFPR&quot;:0.34049079754601225,&quot;rfTPR&quot;:0.9301801801801802},{&quot;lrFPR&quot;:0.3392638036809816,&quot;lrTPR&quot;:0.8783783783783784,&quot;rfFPR&quot;:0.3411042944785276,&quot;rfTPR&quot;:0.9301801801801802},{&quot;lrFPR&quot;:0.34478527607361964,&quot;lrTPR&quot;:0.8828828828828829,&quot;rfFPR&quot;:0.3441717791411043,&quot;rfTPR&quot;:0.9301801801801802},{&quot;lrFPR&quot;:0.34662576687116564,&quot;lrTPR&quot;:0.8828828828828829,&quot;rfFPR&quot;:0.3460122699386503,&quot;rfTPR&quot;:0.9324324324324325},{&quot;lrFPR&quot;:0.3496932515337423,&quot;lrTPR&quot;:0.8828828828828829,&quot;rfFPR&quot;:0.3478527607361963,&quot;rfTPR&quot;:0.9324324324324325},{&quot;lrFPR&quot;:0.35030674846625764,&quot;lrTPR&quot;:0.8851351351351351,&quot;rfFPR&quot;:0.35521472392638037,&quot;rfTPR&quot;:0.9369369369369369},{&quot;lrFPR&quot;:0.36012269938650304,&quot;lrTPR&quot;:0.8851351351351351,&quot;rfFPR&quot;:0.36134969325153377,&quot;rfTPR&quot;:0.9369369369369369},{&quot;lrFPR&quot;:0.36687116564417177,&quot;lrTPR&quot;:0.8941441441441441,&quot;rfFPR&quot;:0.3638036809815951,&quot;rfTPR&quot;:0.9391891891891891},{&quot;lrFPR&quot;:0.3674846625766871,&quot;lrTPR&quot;:0.8986486486486487,&quot;rfFPR&quot;:0.36625766871165644,&quot;rfTPR&quot;:0.9391891891891891},{&quot;lrFPR&quot;:0.36993865030674844,&quot;lrTPR&quot;:0.9009009009009009,&quot;rfFPR&quot;:0.3754601226993865,&quot;rfTPR&quot;:0.9391891891891891},{&quot;lrFPR&quot;:0.3717791411042945,&quot;lrTPR&quot;:0.9009009009009009,&quot;rfFPR&quot;:0.3791411042944785,&quot;rfTPR&quot;:0.9391891891891891},{&quot;lrFPR&quot;:0.3736196319018405,&quot;lrTPR&quot;:0.9031531531531531,&quot;rfFPR&quot;:0.3803680981595092,&quot;rfTPR&quot;:0.9391891891891891},{&quot;lrFPR&quot;:0.37607361963190183,&quot;lrTPR&quot;:0.9054054054054054,&quot;rfFPR&quot;:0.3815950920245399,&quot;rfTPR&quot;:0.9414414414414415},{&quot;lrFPR&quot;:0.3773006134969325,&quot;lrTPR&quot;:0.9054054054054054,&quot;rfFPR&quot;:0.38282208588957056,&quot;rfTPR&quot;:0.9414414414414415},{&quot;lrFPR&quot;:0.37975460122699384,&quot;lrTPR&quot;:0.9054054054054054,&quot;rfFPR&quot;:0.38404907975460123,&quot;rfTPR&quot;:0.9436936936936937},{&quot;lrFPR&quot;:0.37975460122699384,&quot;lrTPR&quot;:0.9099099099099099,&quot;rfFPR&quot;:0.38773006134969323,&quot;rfTPR&quot;:0.9436936936936937},{&quot;lrFPR&quot;:0.38098159509202456,&quot;lrTPR&quot;:0.9099099099099099,&quot;rfFPR&quot;:0.3895705521472393,&quot;rfTPR&quot;:0.9436936936936937},{&quot;lrFPR&quot;:0.38220858895705523,&quot;lrTPR&quot;:0.9121621621621622,&quot;rfFPR&quot;:0.39447852760736196,&quot;rfTPR&quot;:0.9481981981981982},{&quot;lrFPR&quot;:0.38404907975460123,&quot;lrTPR&quot;:0.9121621621621622,&quot;rfFPR&quot;:0.3969325153374233,&quot;rfTPR&quot;:0.9481981981981982},{&quot;lrFPR&quot;:0.38466257668711656,&quot;lrTPR&quot;:0.9166666666666666,&quot;rfFPR&quot;:0.4,&quot;rfTPR&quot;:0.9481981981981982},{&quot;lrFPR&quot;:0.3889570552147239,&quot;lrTPR&quot;:0.918918918918919,&quot;rfFPR&quot;:0.405521472392638,&quot;rfTPR&quot;:0.9481981981981982},{&quot;lrFPR&quot;:0.39386503067484663,&quot;lrTPR&quot;:0.9234234234234234,&quot;rfFPR&quot;:0.40736196319018403,&quot;rfTPR&quot;:0.9481981981981982},{&quot;lrFPR&quot;:0.3987730061349693,&quot;lrTPR&quot;:0.9301801801801802,&quot;rfFPR&quot;:0.4116564417177914,&quot;rfTPR&quot;:0.9481981981981982},{&quot;lrFPR&quot;:0.40061349693251536,&quot;lrTPR&quot;:0.9301801801801802,&quot;rfFPR&quot;:0.41226993865030676,&quot;rfTPR&quot;:0.9481981981981982},{&quot;lrFPR&quot;:0.4085889570552147,&quot;lrTPR&quot;:0.9301801801801802,&quot;rfFPR&quot;:0.4128834355828221,&quot;rfTPR&quot;:0.9481981981981982},{&quot;lrFPR&quot;:0.4092024539877301,&quot;lrTPR&quot;:0.9301801801801802,&quot;rfFPR&quot;:0.4226993865030675,&quot;rfTPR&quot;:0.9504504504504504},{&quot;lrFPR&quot;:0.4165644171779141,&quot;lrTPR&quot;:0.9301801801801802,&quot;rfFPR&quot;:0.4294478527607362,&quot;rfTPR&quot;:0.9504504504504504},{&quot;lrFPR&quot;:0.4171779141104294,&quot;lrTPR&quot;:0.9301801801801802,&quot;rfFPR&quot;:0.4325153374233129,&quot;rfTPR&quot;:0.9504504504504504},{&quot;lrFPR&quot;:0.42024539877300615,&quot;lrTPR&quot;:0.9301801801801802,&quot;rfFPR&quot;:0.43374233128834355,&quot;rfTPR&quot;:0.9504504504504504},{&quot;lrFPR&quot;:0.4208588957055215,&quot;lrTPR&quot;:0.9301801801801802,&quot;rfFPR&quot;:0.4349693251533742,&quot;rfTPR&quot;:0.9504504504504504},{&quot;lrFPR&quot;:0.42208588957055215,&quot;lrTPR&quot;:0.9301801801801802,&quot;rfFPR&quot;:0.4368098159509202,&quot;rfTPR&quot;:0.9504504504504504},{&quot;lrFPR&quot;:0.42392638036809815,&quot;lrTPR&quot;:0.9301801801801802,&quot;rfFPR&quot;:0.4386503067484663,&quot;rfTPR&quot;:0.9504504504504504},{&quot;lrFPR&quot;:0.42576687116564416,&quot;lrTPR&quot;:0.9301801801801802,&quot;rfFPR&quot;:0.4429447852760736,&quot;rfTPR&quot;:0.9504504504504504},{&quot;lrFPR&quot;:0.4269938650306748,&quot;lrTPR&quot;:0.9301801801801802,&quot;rfFPR&quot;:0.4466257668711656,&quot;rfTPR&quot;:0.9504504504504504},{&quot;lrFPR&quot;:0.4294478527607362,&quot;lrTPR&quot;:0.9301801801801802,&quot;rfFPR&quot;:0.4521472392638037,&quot;rfTPR&quot;:0.9504504504504504},{&quot;lrFPR&quot;:0.4343558282208589,&quot;lrTPR&quot;:0.9346846846846847,&quot;rfFPR&quot;:0.452760736196319,&quot;rfTPR&quot;:0.9504504504504504},{&quot;lrFPR&quot;:0.4361963190184049,&quot;lrTPR&quot;:0.9346846846846847,&quot;rfFPR&quot;:0.4582822085889571,&quot;rfTPR&quot;:0.9527027027027027},{&quot;lrFPR&quot;:0.43742331288343556,&quot;lrTPR&quot;:0.9369369369369369,&quot;rfFPR&quot;:0.4607361963190184,&quot;rfTPR&quot;:0.954954954954955},{&quot;lrFPR&quot;:0.4386503067484663,&quot;lrTPR&quot;:0.9369369369369369,&quot;rfFPR&quot;:0.4619631901840491,&quot;rfTPR&quot;:0.954954954954955},{&quot;lrFPR&quot;:0.43987730061349695,&quot;lrTPR&quot;:0.9369369369369369,&quot;rfFPR&quot;:0.4638036809815951,&quot;rfTPR&quot;:0.954954954954955},{&quot;lrFPR&quot;:0.4411042944785276,&quot;lrTPR&quot;:0.9369369369369369,&quot;rfFPR&quot;:0.4662576687116564,&quot;rfTPR&quot;:0.954954954954955},{&quot;lrFPR&quot;:0.4441717791411043,&quot;lrTPR&quot;:0.9391891891891891,&quot;rfFPR&quot;:0.46748466257668714,&quot;rfTPR&quot;:0.954954954954955},{&quot;lrFPR&quot;:0.449079754601227,&quot;lrTPR&quot;:0.9391891891891891,&quot;rfFPR&quot;:0.4742331288343558,&quot;rfTPR&quot;:0.9594594594594594},{&quot;lrFPR&quot;:0.4503067484662577,&quot;lrTPR&quot;:0.9391891891891891,&quot;rfFPR&quot;:0.4766871165644172,&quot;rfTPR&quot;:0.9594594594594594},{&quot;lrFPR&quot;:0.45337423312883435,&quot;lrTPR&quot;:0.9391891891891891,&quot;rfFPR&quot;:0.4815950920245399,&quot;rfTPR&quot;:0.9662162162162162},{&quot;lrFPR&quot;:0.4539877300613497,&quot;lrTPR&quot;:0.9391891891891891,&quot;rfFPR&quot;:0.48588957055214727,&quot;rfTPR&quot;:0.9662162162162162},{&quot;lrFPR&quot;:0.456441717791411,&quot;lrTPR&quot;:0.9391891891891891,&quot;rfFPR&quot;:0.48957055214723927,&quot;rfTPR&quot;:0.9662162162162162},{&quot;lrFPR&quot;:0.4607361963190184,&quot;lrTPR&quot;:0.9391891891891891,&quot;rfFPR&quot;:0.49079754601226994,&quot;rfTPR&quot;:0.9662162162162162},{&quot;lrFPR&quot;:0.4619631901840491,&quot;lrTPR&quot;:0.9391891891891891,&quot;rfFPR&quot;:0.49263803680981594,&quot;rfTPR&quot;:0.9662162162162162},{&quot;lrFPR&quot;:0.46319018404907975,&quot;lrTPR&quot;:0.9391891891891891,&quot;rfFPR&quot;:0.4950920245398773,&quot;rfTPR&quot;:0.9662162162162162},{&quot;lrFPR&quot;:0.4662576687116564,&quot;lrTPR&quot;:0.9391891891891891,&quot;rfFPR&quot;:0.49877300613496933,&quot;rfTPR&quot;:0.9684684684684685},{&quot;lrFPR&quot;:0.46748466257668714,&quot;lrTPR&quot;:0.9391891891891891,&quot;rfFPR&quot;:0.5012269938650307,&quot;rfTPR&quot;:0.9684684684684685},{&quot;lrFPR&quot;:0.46809815950920247,&quot;lrTPR&quot;:0.9391891891891891,&quot;rfFPR&quot;:0.5085889570552147,&quot;rfTPR&quot;:0.972972972972973},{&quot;lrFPR&quot;:0.46932515337423314,&quot;lrTPR&quot;:0.9391891891891891,&quot;rfFPR&quot;:0.50920245398773,&quot;rfTPR&quot;:0.9752252252252253},{&quot;lrFPR&quot;:0.4699386503067485,&quot;lrTPR&quot;:0.9391891891891891,&quot;rfFPR&quot;:0.5196319018404908,&quot;rfTPR&quot;:0.9752252252252253},{&quot;lrFPR&quot;:0.4723926380368098,&quot;lrTPR&quot;:0.9414414414414415,&quot;rfFPR&quot;:0.5263803680981595,&quot;rfTPR&quot;:0.9752252252252253},{&quot;lrFPR&quot;:0.47300613496932514,&quot;lrTPR&quot;:0.9436936936936937,&quot;rfFPR&quot;:0.5288343558282208,&quot;rfTPR&quot;:0.9752252252252253},{&quot;lrFPR&quot;:0.4742331288343558,&quot;lrTPR&quot;:0.9436936936936937,&quot;rfFPR&quot;:0.5355828220858896,&quot;rfTPR&quot;:0.9774774774774775},{&quot;lrFPR&quot;:0.47730061349693254,&quot;lrTPR&quot;:0.9436936936936937,&quot;rfFPR&quot;:0.5386503067484663,&quot;rfTPR&quot;:0.9774774774774775},{&quot;lrFPR&quot;:0.4785276073619632,&quot;lrTPR&quot;:0.9436936936936937,&quot;rfFPR&quot;:0.5392638036809816,&quot;rfTPR&quot;:0.9774774774774775},{&quot;lrFPR&quot;:0.4815950920245399,&quot;lrTPR&quot;:0.9436936936936937,&quot;rfFPR&quot;:0.5466257668711656,&quot;rfTPR&quot;:0.9797297297297297},{&quot;lrFPR&quot;:0.4822085889570552,&quot;lrTPR&quot;:0.9436936936936937,&quot;rfFPR&quot;:0.5472392638036809,&quot;rfTPR&quot;:0.9797297297297297},{&quot;lrFPR&quot;:0.4840490797546012,&quot;lrTPR&quot;:0.9436936936936937,&quot;rfFPR&quot;:0.5521472392638037,&quot;rfTPR&quot;:0.9797297297297297},{&quot;lrFPR&quot;:0.4852760736196319,&quot;lrTPR&quot;:0.9459459459459459,&quot;rfFPR&quot;:0.5539877300613497,&quot;rfTPR&quot;:0.9797297297297297},{&quot;lrFPR&quot;:0.4865030674846626,&quot;lrTPR&quot;:0.9459459459459459,&quot;rfFPR&quot;:0.558282208588957,&quot;rfTPR&quot;:0.9819819819819819},{&quot;lrFPR&quot;:0.48711656441717793,&quot;lrTPR&quot;:0.9459459459459459,&quot;rfFPR&quot;:0.558282208588957,&quot;rfTPR&quot;:0.9842342342342343},{&quot;lrFPR&quot;:0.4901840490797546,&quot;lrTPR&quot;:0.9504504504504504,&quot;rfFPR&quot;:0.5766871165644172,&quot;rfTPR&quot;:0.9842342342342343},{&quot;lrFPR&quot;:0.49141104294478527,&quot;lrTPR&quot;:0.9504504504504504,&quot;rfFPR&quot;:0.5773006134969325,&quot;rfTPR&quot;:0.9842342342342343},{&quot;lrFPR&quot;:0.49938650306748467,&quot;lrTPR&quot;:0.9504504504504504,&quot;rfFPR&quot;:0.5779141104294478,&quot;rfTPR&quot;:0.9842342342342343},{&quot;lrFPR&quot;:0.5024539877300613,&quot;lrTPR&quot;:0.9504504504504504,&quot;rfFPR&quot;:0.5785276073619632,&quot;rfTPR&quot;:0.9842342342342343},{&quot;lrFPR&quot;:0.5049079754601227,&quot;lrTPR&quot;:0.9504504504504504,&quot;rfFPR&quot;:0.588957055214724,&quot;rfTPR&quot;:0.9842342342342343},{&quot;lrFPR&quot;:0.5085889570552147,&quot;lrTPR&quot;:0.954954954954955,&quot;rfFPR&quot;:0.5920245398773006,&quot;rfTPR&quot;:0.9842342342342343},{&quot;lrFPR&quot;:0.5159509202453988,&quot;lrTPR&quot;:0.954954954954955,&quot;rfFPR&quot;:0.598159509202454,&quot;rfTPR&quot;:0.9842342342342343},{&quot;lrFPR&quot;:0.5220858895705521,&quot;lrTPR&quot;:0.9572072072072072,&quot;rfFPR&quot;:0.6006134969325153,&quot;rfTPR&quot;:0.9842342342342343},{&quot;lrFPR&quot;:0.5245398773006135,&quot;lrTPR&quot;:0.9572072072072072,&quot;rfFPR&quot;:0.6061349693251534,&quot;rfTPR&quot;:0.9842342342342343},{&quot;lrFPR&quot;:0.5251533742331288,&quot;lrTPR&quot;:0.9572072072072072,&quot;rfFPR&quot;:0.6098159509202454,&quot;rfTPR&quot;:0.9842342342342343},{&quot;lrFPR&quot;:0.5269938650306748,&quot;lrTPR&quot;:0.9572072072072072,&quot;rfFPR&quot;:0.6116564417177914,&quot;rfTPR&quot;:0.9864864864864865},{&quot;lrFPR&quot;:0.5331288343558283,&quot;lrTPR&quot;:0.9617117117117117,&quot;rfFPR&quot;:0.6134969325153374,&quot;rfTPR&quot;:0.9864864864864865},{&quot;lrFPR&quot;:0.5349693251533743,&quot;lrTPR&quot;:0.9617117117117117,&quot;rfFPR&quot;:0.6226993865030674,&quot;rfTPR&quot;:0.9864864864864865},{&quot;lrFPR&quot;:0.5392638036809816,&quot;lrTPR&quot;:0.9617117117117117,&quot;rfFPR&quot;:0.6233128834355828,&quot;rfTPR&quot;:0.9864864864864865},{&quot;lrFPR&quot;:0.5466257668711656,&quot;lrTPR&quot;:0.963963963963964,&quot;rfFPR&quot;:0.6245398773006134,&quot;rfTPR&quot;:0.9864864864864865},{&quot;lrFPR&quot;:0.5496932515337424,&quot;lrTPR&quot;:0.963963963963964,&quot;rfFPR&quot;:0.6288343558282209,&quot;rfTPR&quot;:0.9864864864864865},{&quot;lrFPR&quot;:0.5503067484662577,&quot;lrTPR&quot;:0.963963963963964,&quot;rfFPR&quot;:0.6343558282208589,&quot;rfTPR&quot;:0.9887387387387387},{&quot;lrFPR&quot;:0.5552147239263804,&quot;lrTPR&quot;:0.9662162162162162,&quot;rfFPR&quot;:0.6368098159509202,&quot;rfTPR&quot;:0.990990990990991},{&quot;lrFPR&quot;:0.556441717791411,&quot;lrTPR&quot;:0.9662162162162162,&quot;rfFPR&quot;:0.6392638036809816,&quot;rfTPR&quot;:0.990990990990991},{&quot;lrFPR&quot;:0.5650306748466257,&quot;lrTPR&quot;:0.9684684684684685,&quot;rfFPR&quot;:0.6429447852760736,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.5693251533742332,&quot;lrTPR&quot;:0.9684684684684685,&quot;rfFPR&quot;:0.6435582822085889,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.5717791411042945,&quot;lrTPR&quot;:0.9684684684684685,&quot;rfFPR&quot;:0.6460122699386504,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.5785276073619632,&quot;lrTPR&quot;:0.9684684684684685,&quot;rfFPR&quot;:0.6478527607361964,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.5791411042944785,&quot;lrTPR&quot;:0.9684684684684685,&quot;rfFPR&quot;:0.6521472392638037,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.5797546012269938,&quot;lrTPR&quot;:0.9684684684684685,&quot;rfFPR&quot;:0.656441717791411,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.5803680981595092,&quot;lrTPR&quot;:0.9684684684684685,&quot;rfFPR&quot;:0.6588957055214724,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.5815950920245399,&quot;lrTPR&quot;:0.9684684684684685,&quot;rfFPR&quot;:0.660122699386503,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.5834355828220859,&quot;lrTPR&quot;:0.9684684684684685,&quot;rfFPR&quot;:0.6644171779141105,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.594478527607362,&quot;lrTPR&quot;:0.9684684684684685,&quot;rfFPR&quot;:0.6705521472392638,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.6006134969325153,&quot;lrTPR&quot;:0.9684684684684685,&quot;rfFPR&quot;:0.6717791411042945,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.6110429447852761,&quot;lrTPR&quot;:0.9684684684684685,&quot;rfFPR&quot;:0.6736196319018405,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.6122699386503068,&quot;lrTPR&quot;:0.9684684684684685,&quot;rfFPR&quot;:0.6742331288343558,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.6153374233128834,&quot;lrTPR&quot;:0.9684684684684685,&quot;rfFPR&quot;:0.6773006134969325,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.6165644171779141,&quot;lrTPR&quot;:0.9684684684684685,&quot;rfFPR&quot;:0.6791411042944785,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.6184049079754601,&quot;lrTPR&quot;:0.9684684684684685,&quot;rfFPR&quot;:0.6797546012269938,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.6208588957055214,&quot;lrTPR&quot;:0.9684684684684685,&quot;rfFPR&quot;:0.6834355828220859,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.6214723926380368,&quot;lrTPR&quot;:0.9684684684684685,&quot;rfFPR&quot;:0.6901840490797546,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.6245398773006134,&quot;lrTPR&quot;:0.9684684684684685,&quot;rfFPR&quot;:0.6914110429447853,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.6294478527607362,&quot;lrTPR&quot;:0.9707207207207207,&quot;rfFPR&quot;:0.692638036809816,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.6312883435582822,&quot;lrTPR&quot;:0.9707207207207207,&quot;rfFPR&quot;:0.694478527607362,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.6337423312883436,&quot;lrTPR&quot;:0.9707207207207207,&quot;rfFPR&quot;:0.6950920245398773,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.6386503067484662,&quot;lrTPR&quot;:0.9707207207207207,&quot;rfFPR&quot;:0.696319018404908,&quot;rfTPR&quot;:0.9932432432432432},{&quot;lrFPR&quot;:0.6411042944785276,&quot;lrTPR&quot;:0.9707207207207207,&quot;rfFPR&quot;:0.7006134969325153,&quot;rfTPR&quot;:0.9954954954954955},{&quot;lrFPR&quot;:0.6423312883435582,&quot;lrTPR&quot;:0.9707207207207207,&quot;rfFPR&quot;:0.7024539877300614,&quot;rfTPR&quot;:0.9954954954954955},{&quot;lrFPR&quot;:0.6460122699386504,&quot;lrTPR&quot;:0.9707207207207207,&quot;rfFPR&quot;:0.7116564417177914,&quot;rfTPR&quot;:0.9954954954954955},{&quot;lrFPR&quot;:0.6466257668711657,&quot;lrTPR&quot;:0.9707207207207207,&quot;rfFPR&quot;:0.7147239263803681,&quot;rfTPR&quot;:0.9954954954954955},{&quot;lrFPR&quot;:0.647239263803681,&quot;lrTPR&quot;:0.9707207207207207,&quot;rfFPR&quot;:0.7165644171779141,&quot;rfTPR&quot;:0.9954954954954955},{&quot;lrFPR&quot;:0.650920245398773,&quot;lrTPR&quot;:0.9707207207207207,&quot;rfFPR&quot;:0.7184049079754601,&quot;rfTPR&quot;:0.9954954954954955},{&quot;lrFPR&quot;:0.6570552147239264,&quot;lrTPR&quot;:0.9707207207207207,&quot;rfFPR&quot;:0.7196319018404908,&quot;rfTPR&quot;:0.9954954954954955},{&quot;lrFPR&quot;:0.6588957055214724,&quot;lrTPR&quot;:0.972972972972973,&quot;rfFPR&quot;:0.7239263803680982,&quot;rfTPR&quot;:0.9954954954954955},{&quot;lrFPR&quot;:0.660122699386503,&quot;lrTPR&quot;:0.972972972972973,&quot;rfFPR&quot;:0.7239263803680982,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.6625766871165644,&quot;lrTPR&quot;:0.9752252252252253,&quot;rfFPR&quot;:0.7251533742331289,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.6631901840490797,&quot;lrTPR&quot;:0.9752252252252253,&quot;rfFPR&quot;:0.7263803680981595,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.6650306748466258,&quot;lrTPR&quot;:0.9752252252252253,&quot;rfFPR&quot;:0.7398773006134969,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.6717791411042945,&quot;lrTPR&quot;:0.9752252252252253,&quot;rfFPR&quot;:0.7404907975460123,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.6723926380368098,&quot;lrTPR&quot;:0.9752252252252253,&quot;rfFPR&quot;:0.7460122699386503,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.6730061349693252,&quot;lrTPR&quot;:0.9752252252252253,&quot;rfFPR&quot;:0.7466257668711657,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.6852760736196319,&quot;lrTPR&quot;:0.9774774774774775,&quot;rfFPR&quot;:0.7484662576687117,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.6858895705521473,&quot;lrTPR&quot;:0.9774774774774775,&quot;rfFPR&quot;:0.749079754601227,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.6865030674846626,&quot;lrTPR&quot;:0.9774774774774775,&quot;rfFPR&quot;:0.7515337423312883,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.6895705521472393,&quot;lrTPR&quot;:0.9797297297297297,&quot;rfFPR&quot;:0.7552147239263803,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.6950920245398773,&quot;lrTPR&quot;:0.9797297297297297,&quot;rfFPR&quot;:0.7644171779141105,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.6957055214723926,&quot;lrTPR&quot;:0.9797297297297297,&quot;rfFPR&quot;:0.7656441717791411,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.6969325153374233,&quot;lrTPR&quot;:0.9797297297297297,&quot;rfFPR&quot;:0.7748466257668711,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.6987730061349693,&quot;lrTPR&quot;:0.9797297297297297,&quot;rfFPR&quot;:0.7766871165644171,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7042944785276074,&quot;lrTPR&quot;:0.9797297297297297,&quot;rfFPR&quot;:0.7785276073619631,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7055214723926381,&quot;lrTPR&quot;:0.9797297297297297,&quot;rfFPR&quot;:0.7803680981595092,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7092024539877301,&quot;lrTPR&quot;:0.9797297297297297,&quot;rfFPR&quot;:0.7834355828220859,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7098159509202454,&quot;lrTPR&quot;:0.9797297297297297,&quot;rfFPR&quot;:0.7846625766871166,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7116564417177914,&quot;lrTPR&quot;:0.9797297297297297,&quot;rfFPR&quot;:0.7914110429447853,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7147239263803681,&quot;lrTPR&quot;:0.9797297297297297,&quot;rfFPR&quot;:0.7969325153374233,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7165644171779141,&quot;lrTPR&quot;:0.9797297297297297,&quot;rfFPR&quot;:0.801840490797546,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7177914110429447,&quot;lrTPR&quot;:0.9797297297297297,&quot;rfFPR&quot;:0.8098159509202454,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7208588957055214,&quot;lrTPR&quot;:0.9797297297297297,&quot;rfFPR&quot;:0.8104294478527607,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7239263803680982,&quot;lrTPR&quot;:0.9819819819819819,&quot;rfFPR&quot;:0.8239263803680982,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7257668711656442,&quot;lrTPR&quot;:0.9819819819819819,&quot;rfFPR&quot;:0.8251533742331288,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7263803680981595,&quot;lrTPR&quot;:0.9819819819819819,&quot;rfFPR&quot;:0.8300613496932515,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7331288343558282,&quot;lrTPR&quot;:0.9819819819819819,&quot;rfFPR&quot;:0.8331288343558282,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7386503067484662,&quot;lrTPR&quot;:0.9819819819819819,&quot;rfFPR&quot;:0.8411042944785276,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.743558282208589,&quot;lrTPR&quot;:0.9819819819819819,&quot;rfFPR&quot;:0.843558282208589,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7441717791411043,&quot;lrTPR&quot;:0.9819819819819819,&quot;rfFPR&quot;:0.8447852760736196,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7447852760736197,&quot;lrTPR&quot;:0.9819819819819819,&quot;rfFPR&quot;:0.8466257668711656,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7460122699386503,&quot;lrTPR&quot;:0.9819819819819819,&quot;rfFPR&quot;:0.8484662576687116,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7496932515337423,&quot;lrTPR&quot;:0.9819819819819819,&quot;rfFPR&quot;:0.854601226993865,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.752760736196319,&quot;lrTPR&quot;:0.9819819819819819,&quot;rfFPR&quot;:0.8576687116564418,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.758282208588957,&quot;lrTPR&quot;:0.9819819819819819,&quot;rfFPR&quot;:0.8625766871165644,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7601226993865031,&quot;lrTPR&quot;:0.9819819819819819,&quot;rfFPR&quot;:0.8631901840490798,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7607361963190185,&quot;lrTPR&quot;:0.9819819819819819,&quot;rfFPR&quot;:0.8650306748466258,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7625766871165645,&quot;lrTPR&quot;:0.9819819819819819,&quot;rfFPR&quot;:0.8668711656441718,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7674846625766871,&quot;lrTPR&quot;:0.9819819819819819,&quot;rfFPR&quot;:0.8693251533742331,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7680981595092025,&quot;lrTPR&quot;:0.9819819819819819,&quot;rfFPR&quot;:0.8760736196319019,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7687116564417178,&quot;lrTPR&quot;:0.9819819819819819,&quot;rfFPR&quot;:0.8809815950920246,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7717791411042945,&quot;lrTPR&quot;:0.9819819819819819,&quot;rfFPR&quot;:0.8846625766871166,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7773006134969325,&quot;lrTPR&quot;:0.9819819819819819,&quot;rfFPR&quot;:0.8852760736196319,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7858895705521473,&quot;lrTPR&quot;:0.9842342342342343,&quot;rfFPR&quot;:0.8889570552147239,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7865030674846626,&quot;lrTPR&quot;:0.9842342342342343,&quot;rfFPR&quot;:0.8914110429447852,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7871165644171779,&quot;lrTPR&quot;:0.9842342342342343,&quot;rfFPR&quot;:0.8938650306748466,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7914110429447853,&quot;lrTPR&quot;:0.9842342342342343,&quot;rfFPR&quot;:0.8969325153374234,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7926380368098159,&quot;lrTPR&quot;:0.9842342342342343,&quot;rfFPR&quot;:0.9006134969325154,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.798159509202454,&quot;lrTPR&quot;:0.9842342342342343,&quot;rfFPR&quot;:0.901840490797546,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.7993865030674847,&quot;lrTPR&quot;:0.9864864864864865,&quot;rfFPR&quot;:0.9024539877300614,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.8030674846625767,&quot;lrTPR&quot;:0.9864864864864865,&quot;rfFPR&quot;:0.905521472392638,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.8042944785276074,&quot;lrTPR&quot;:0.9864864864864865,&quot;rfFPR&quot;:0.9134969325153375,&quot;rfTPR&quot;:0.9977477477477478},{&quot;lrFPR&quot;:0.8104294478527607,&quot;lrTPR&quot;:0.9864864864864865,&quot;rfFPR&quot;:0.9214723926380368,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.811042944785276,&quot;lrTPR&quot;:0.9864864864864865,&quot;rfFPR&quot;:0.9226993865030675,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8116564417177914,&quot;lrTPR&quot;:0.9864864864864865,&quot;rfFPR&quot;:0.9251533742331288,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8141104294478527,&quot;lrTPR&quot;:0.9864864864864865,&quot;rfFPR&quot;:0.9257668711656442,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8159509202453987,&quot;lrTPR&quot;:0.9864864864864865,&quot;rfFPR&quot;:0.9423312883435583,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8208588957055215,&quot;lrTPR&quot;:0.9887387387387387,&quot;rfFPR&quot;:0.9515337423312883,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8220858895705522,&quot;lrTPR&quot;:0.9887387387387387,&quot;rfFPR&quot;:0.9546012269938651,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8257668711656442,&quot;lrTPR&quot;:0.9887387387387387,&quot;rfFPR&quot;:0.9607361963190184,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8269938650306748,&quot;lrTPR&quot;:0.9887387387387387,&quot;rfFPR&quot;:0.9644171779141104,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8288343558282208,&quot;lrTPR&quot;:0.9887387387387387,&quot;rfFPR&quot;:0.9650306748466257,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8312883435582822,&quot;lrTPR&quot;:0.9887387387387387,&quot;rfFPR&quot;:0.9656441717791411,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8319018404907975,&quot;lrTPR&quot;:0.9887387387387387,&quot;rfFPR&quot;:0.9674846625766871,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8337423312883435,&quot;lrTPR&quot;:0.9887387387387387,&quot;rfFPR&quot;:0.9723926380368099,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8368098159509203,&quot;lrTPR&quot;:0.9887387387387387,&quot;rfFPR&quot;:0.9736196319018405,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8374233128834356,&quot;lrTPR&quot;:0.9887387387387387,&quot;rfFPR&quot;:0.9742331288343559,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8386503067484663,&quot;lrTPR&quot;:0.9887387387387387,&quot;rfFPR&quot;:0.9773006134969325,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8392638036809816,&quot;lrTPR&quot;:0.9887387387387387,&quot;rfFPR&quot;:0.9803680981595092,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.843558282208589,&quot;lrTPR&quot;:0.9887387387387387,&quot;rfFPR&quot;:0.9809815950920245,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8460122699386503,&quot;lrTPR&quot;:0.9932432432432432,&quot;rfFPR&quot;:0.9852760736196319,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8564417177914111,&quot;lrTPR&quot;:0.9932432432432432,&quot;rfFPR&quot;:0.9877300613496932,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8588957055214724,&quot;lrTPR&quot;:0.9932432432432432,&quot;rfFPR&quot;:0.9895705521472392,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8638036809815951,&quot;lrTPR&quot;:0.9932432432432432,&quot;rfFPR&quot;:0.9950920245398773,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8736196319018404,&quot;lrTPR&quot;:0.9932432432432432,&quot;rfFPR&quot;:0.998159509202454,&quot;rfTPR&quot;:1.0},{&quot;lrFPR&quot;:0.8760736196319019,&quot;lrTPR&quot;:0.9932432432432432,&quot;rfFPR&quot;:1.0,&quot;rfTPR&quot;:1.0}],&quot;genId&quot;:&quot;655692818&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/customC3Chart'], \n      function(playground, _magiccustomC3Chart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magiccustomC3Chart,\n    \"o\": {\"js\":\"var chartOptions = { data: { xs: {\\n                            'lrTPR': 'lrFPR',\\n                            'rfTPR': 'rfFPR',\\n                         }\\n                   },\\n                   axis: {\\n                      y: {\\n                        label: 'TPR'\\n                      },\\n                      x: {\\n                         label: 'FPR',\\n                         tick: {\\n                            count: 5\\n                         }\\n                      }\\n                   },\\n                   point: {\\n                        show: false\\n                   }\\n                  };\",\"headers\":[\"lrFPR\",\"lrTPR\",\"rfFPR\",\"rfTPR\"],\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon546b4f2e795735cfb481ac9d3cec7078&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon79c40c9fec3b6304639ea3fdada64788&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 26
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "07DE1126FF72485EADB6E42DA3A80F1B"
    },
    "cell_type" : "code",
    "source" : "println(\"Area under precision-recall lr curve = \" + lrMetrics.areaUnderPR)\nprintln(\"Area under precision-recall rf curve = \" + rfMetrics.areaUnderPR)\n\nprintln(\"Area under roc lr curve = \" + lrMetrics.areaUnderROC)\nprintln(\"Area under roc rf curve = \" + rfMetrics.areaUnderROC)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "Area under precision-recall lr curve = 0.6907287253608467\nArea under precision-recall rf curve = 0.7313441839977114\nArea under roc lr curve = 0.8779154921792953\nArea under roc rf curve = 0.900725418670204\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 27
    } ]
  }, {
    "metadata" : {
      "id" : "17CD2D328D794AA6A5EA6D18374BFD4C"
    },
    "cell_type" : "markdown",
    "source" : "It's easy to see what it's hard to achieve good precision with high recall related to positive reviews. What's because of low fraction of positive reviews in our unbalanced dataset. The quality of classification would be different if we will calculate metrics relating to negative reviews.\n\n**Problem**. Find the maximum accuracy of each classifier at level of recall of at least 0.8:\n  - while predicting positive reviews\n  - while predicting negative reviews"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "208B7A15C29E47ED9DCF1AB78AF184B0"
    },
    "cell_type" : "code",
    "source" : "// measuring predictions of positive reviews\nval lrPosPredictionAndLabels = lrPredictions\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(1), r.getAs[Double](1)))\nval rfPosPredictionAndLabels = rfPredictions\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(1), r.getAs[Double](1)))\nval lrPosMetrics = new BinaryClassificationMetrics(lrPosPredictionAndLabels)\nval rfPosMetrics = new BinaryClassificationMetrics(rfPosPredictionAndLabels)\n\n// measuring predictions of negative reviews\nval lrNegPredictionAndLabels = lrPredictions\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(0), 1.0 - r.getAs[Double](1)))\nval rfNegPredictionAndLabels = rfPredictions\n  .select(\"rawPrediction\", \"label\")\n  .map(r => (r.getAs[DenseVector](0)(0), 1.0 - r.getAs[Double](1)))\nval lrNegMetrics = new BinaryClassificationMetrics(lrNegPredictionAndLabels)\nval rfNegMetrics = new BinaryClassificationMetrics(rfNegPredictionAndLabels)\n\n\n// Obtain precision-recall curves\nval lrPosPrecisionRecall = lrPosMetrics.pr\nval rfPosPrecisionRecall = rfPosMetrics.pr\nval lrNegPrecisionRecall = lrNegMetrics.pr\nval rfNegPrecisionRecall = rfNegMetrics.pr",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "lrPosPredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[748] at map at <console>:113\nrfPosPredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[769] at map at <console>:116\nlrPosMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@799c50d3\nrfPosMetrics: org.apache.spark.mllib.evaluation.BinaryClassificationMetrics = org.apache.spark.mllib.evaluation.BinaryClassificationMetrics@6415c3a7\nlrNegPredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[790] at map at <console>:123\nrfNegPredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[811] at map at <console>:126\nlrNegMetrics: org.apache.spark...."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 29
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9B6B404DDBBE46049D6CC47F1B78FB87"
    },
    "cell_type" : "code",
    "source" : "println(\"=== Positive reviews prediction ===\")\nprintln(\"Logistic regression max accuracy at recall >= 0.8: \" + \n        lrPosMetrics.pr.filter(_._1 >= 0.8).map(_._2).max)\nprintln(\"Random Forest max accuracy at recall >= 0.8: \" + \n        rfPosMetrics.pr.filter(_._1 >= 0.8).map(_._2).max)\n\nprintln(\"=== Negative reviews prediction ===\")\nprintln(\"Logistic regression max accuracy at recall >= 0.8: \" + \n        lrNegMetrics.pr.filter(_._1 >= 0.8).map(_._2).max)\nprintln(\"Random Forest max accuracy at recall >= 0.8: \" + \n        rfNegMetrics.pr.filter(_._1 >= 0.8).map(_._2).max)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "=== Positive reviews prediction ===\nLogistic regression max accuracy at recall >= 0.8: 0.5274074074074074\nRandom Forest max accuracy at recall >= 0.8: 0.5760517799352751\n=== Negative reviews prediction ===\nLogistic regression max accuracy at recall >= 0.8: 0.9370979270907791\nRandom Forest max accuracy at recall >= 0.8: 0.9465317919075145\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 32
    } ]
  }, {
    "metadata" : {
      "id" : "0FAC2E3D9E274994B48017C51C94B775"
    },
    "cell_type" : "markdown",
    "source" : "Also we can conclude what complex, slow and heavy Random Forest with 500 decision trees doesn't perform much better then easy and fast Logistic Regression. That's because decision tree based models don't suite well for *sparse features* (bag-of-words is an example of sparse features)."
  }, {
    "metadata" : {
      "id" : "C4A27F6381894D7A8867569B6A018F70"
    },
    "cell_type" : "markdown",
    "source" : "Up to this point we have not performed hyperparameters tuning. From now let's use only LogisticRegression model and perform 5-fold cross-validation to find optimal `regularization parameter (regParam)` for Logistic Regression with respect to 'roc_auc' metric. Also searching for optimal value of regularization parameter on a logarithmic scale is good idea."
  }, {
    "metadata" : {
      "id" : "609BDE23913740A181B92C5E1A73CCBD"
    },
    "cell_type" : "markdown",
    "source" : "## Feature selection and dimensionality reduction"
  }, {
    "metadata" : {
      "id" : "E56CEDCB27264AFFBB3DE3B73912BA13"
    },
    "cell_type" : "markdown",
    "source" : "At this stage it can be concluded that the proposed text encoding may not be the best. Not every algorithm can be applied in this problem due to the large feature space. In addition, there is a lot of noise in our encoded data, because all the words have been taken to build the vocabulary, i.e., were taken even those words which were found only in a single review (think about typos). So it seems that it would be nice to reduce the dimensionality of the data and to get rid of the noise. One can perform feature selection and dimensionality reduction in multiple ways.\n\n### Term frequency\nTry to create a sample that will consist of only the most \"important\" words. It seems that the occurrence of the most frequent words in the review, for example, *good*, *bad*, etc. are quite good indicators. This can be done by discarding the rare words by frequency. One can specify the minimum number (or fraction) of different reviews a word must appear in to be included in the vocabulary by setting `minDF` parameter of `CountVectorizer`.\n\n### Feature Importance\nUse trained random forest to obtain its importance estimation for each feature and select most important features (words) using this estimations.\n\n### Hashing trick\n\nA different approach from the above two is [hashing](https://en.wikipedia.org/wiki/Feature_hashing) or hashing trick: get the hash of each word and after that, for example, perform bag-of-words over the space of obtained hashes. This allows you to tune the size of the feature space: the lower the sapce, the higher the frequency of collisions. Also it allows to handle previously unseen words. This approach is implemented in [HashingTF](http://spark.apache.org/docs/1.6.1/api/scala/index.html#org.apache.spark.ml.feature.HashingTF) `Transformer`.\n\nYou may notice that the last two approaches can be applied not only to textual data."
  } ],
  "nbformat" : 4
}